
HW2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080083c4  080083c4  000093c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008454  08008454  0000a7a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008454  08008454  00009454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800845c  0800845c  0000a7a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800845c  0800845c  0000945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008460  08008460  00009460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000664  20000000  08008464  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000664  08008ac8  0000a664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000704  08008b68  0000a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000520c  200007a4  08008c08  0000a7a4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200059b0  08008c08  0000a9b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a7a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021a5c  00000000  00000000  0000a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fe8  00000000  00000000  0002c230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019d0  00000000  00000000  00030218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000142b  00000000  00000000  00031be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004178  00000000  00000000  00033013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e916  00000000  00000000  0003718b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010224b  00000000  00000000  00055aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00157cec  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007164  00000000  00000000  00157d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  0015ee94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200007a4 	.word	0x200007a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083ac 	.word	0x080083ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200007a8 	.word	0x200007a8
 800020c:	080083ac 	.word	0x080083ac

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
		{ 1, 0, 0, 1, 1, 0, 0, 1 }, { 1, 1, 0, 0, 0, 0, 1, 1 } };
uint8_t NINE[8][8] = { { 1, 1, 0, 0, 0, 0, 1, 1 }, { 1, 0, 0, 1, 1, 0, 0, 1 }, {
		1, 0, 0, 1, 1, 0, 0, 1 }, { 1, 0, 0, 1, 1, 0, 0, 1 }, { 1, 1, 0, 0, 0,
		0, 0, 1 }, { 1, 1, 1, 1, 1, 0, 0, 1 }, { 1, 1, 1, 1, 1, 0, 0, 1 }, { 1,
		1, 1, 1, 1, 0, 0, 1 } };
int main(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000504:	f001 fb37 	bl	8001b76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000508:	f000 fe2e 	bl	8001168 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800050c:	f000 ff40 	bl	8001390 <MX_GPIO_Init>
	MX_ETH_Init();
 8000510:	f000 fe92 	bl	8001238 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000514:	f000 fede 	bl	80012d4 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 ff0c 	bl	8001334 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */
	MX_FREERTOS_Init();
 800051c:	f000 f888 	bl	8000630 <MX_FREERTOS_Init>

	/* Start scheduler */
	vTaskStartScheduler();
 8000520:	f006 f80a 	bl	8006538 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <main+0x24>

08000528 <ReviseID>:

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
void ReviseID(uint8_t num, uint8_t digit) {
 8000528:	b490      	push	{r4, r7}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
	uint8_t (*ptr)[8];
	switch (num) {
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b09      	cmp	r3, #9
 800053c:	d834      	bhi.n	80005a8 <ReviseID+0x80>
 800053e:	a201      	add	r2, pc, #4	@ (adr r2, 8000544 <ReviseID+0x1c>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	0800056d 	.word	0x0800056d
 8000548:	08000573 	.word	0x08000573
 800054c:	08000579 	.word	0x08000579
 8000550:	0800057f 	.word	0x0800057f
 8000554:	08000585 	.word	0x08000585
 8000558:	0800058b 	.word	0x0800058b
 800055c:	08000591 	.word	0x08000591
 8000560:	08000597 	.word	0x08000597
 8000564:	0800059d 	.word	0x0800059d
 8000568:	080005a3 	.word	0x080005a3
	case 0:
		ptr = ZERO;
 800056c:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <ReviseID+0xdc>)
 800056e:	60fb      	str	r3, [r7, #12]
		break;
 8000570:	e01a      	b.n	80005a8 <ReviseID+0x80>
	case 1:
		ptr = ONE;
 8000572:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <ReviseID+0xe0>)
 8000574:	60fb      	str	r3, [r7, #12]
		break;
 8000576:	e017      	b.n	80005a8 <ReviseID+0x80>
	case 2:
		ptr = TWO;
 8000578:	4b24      	ldr	r3, [pc, #144]	@ (800060c <ReviseID+0xe4>)
 800057a:	60fb      	str	r3, [r7, #12]
		break;
 800057c:	e014      	b.n	80005a8 <ReviseID+0x80>
	case 3:
		ptr = THREE;
 800057e:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <ReviseID+0xe8>)
 8000580:	60fb      	str	r3, [r7, #12]
		break;
 8000582:	e011      	b.n	80005a8 <ReviseID+0x80>
	case 4:
		ptr = FOUR;
 8000584:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <ReviseID+0xec>)
 8000586:	60fb      	str	r3, [r7, #12]
		break;
 8000588:	e00e      	b.n	80005a8 <ReviseID+0x80>
	case 5:
		ptr = FIVE;
 800058a:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <ReviseID+0xf0>)
 800058c:	60fb      	str	r3, [r7, #12]
		break;
 800058e:	e00b      	b.n	80005a8 <ReviseID+0x80>
	case 6:
		ptr = SIX;
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <ReviseID+0xf4>)
 8000592:	60fb      	str	r3, [r7, #12]
		break;
 8000594:	e008      	b.n	80005a8 <ReviseID+0x80>
	case 7:
		ptr = SEVEN;
 8000596:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <ReviseID+0xf8>)
 8000598:	60fb      	str	r3, [r7, #12]
		break;
 800059a:	e005      	b.n	80005a8 <ReviseID+0x80>
	case 8:
		ptr = EIGHT;
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <ReviseID+0xfc>)
 800059e:	60fb      	str	r3, [r7, #12]
		break;
 80005a0:	e002      	b.n	80005a8 <ReviseID+0x80>
	case 9:
		ptr = NINE;
 80005a2:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <ReviseID+0x100>)
 80005a4:	60fb      	str	r3, [r7, #12]
		break;
 80005a6:	bf00      	nop
	}
	for (uint8_t i = 0; i < 8; i++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	72fb      	strb	r3, [r7, #11]
 80005ac:	e020      	b.n	80005f0 <ReviseID+0xc8>
		for (uint8_t j = 0; j < 8; j++) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	72bb      	strb	r3, [r7, #10]
 80005b2:	e017      	b.n	80005e4 <ReviseID+0xbc>
			STUDID[i][j + (digit - 1) * 8] = ptr[i][j];
 80005b4:	7afb      	ldrb	r3, [r7, #11]
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	18d0      	adds	r0, r2, r3
 80005bc:	7abb      	ldrb	r3, [r7, #10]
 80005be:	7afa      	ldrb	r2, [r7, #11]
 80005c0:	7abc      	ldrb	r4, [r7, #10]
 80005c2:	79b9      	ldrb	r1, [r7, #6]
 80005c4:	3901      	subs	r1, #1
 80005c6:	00c9      	lsls	r1, r1, #3
 80005c8:	4421      	add	r1, r4
 80005ca:	5cc4      	ldrb	r4, [r0, r3]
 80005cc:	4817      	ldr	r0, [pc, #92]	@ (800062c <ReviseID+0x104>)
 80005ce:	4613      	mov	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	4403      	add	r3, r0
 80005d8:	440b      	add	r3, r1
 80005da:	4622      	mov	r2, r4
 80005dc:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 8; j++) {
 80005de:	7abb      	ldrb	r3, [r7, #10]
 80005e0:	3301      	adds	r3, #1
 80005e2:	72bb      	strb	r3, [r7, #10]
 80005e4:	7abb      	ldrb	r3, [r7, #10]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	d9e4      	bls.n	80005b4 <ReviseID+0x8c>
	for (uint8_t i = 0; i < 8; i++) {
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	3301      	adds	r3, #1
 80005ee:	72fb      	strb	r3, [r7, #11]
 80005f0:	7afb      	ldrb	r3, [r7, #11]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	d9db      	bls.n	80005ae <ReviseID+0x86>
		}
	}
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc90      	pop	{r4, r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000384 	.word	0x20000384
 8000608:	200003c4 	.word	0x200003c4
 800060c:	20000404 	.word	0x20000404
 8000610:	20000444 	.word	0x20000444
 8000614:	20000484 	.word	0x20000484
 8000618:	200004c4 	.word	0x200004c4
 800061c:	20000504 	.word	0x20000504
 8000620:	20000544 	.word	0x20000544
 8000624:	20000584 	.word	0x20000584
 8000628:	200005c4 	.word	0x200005c4
 800062c:	200001c4 	.word	0x200001c4

08000630 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af02      	add	r7, sp, #8
	xOneShotTimer = xTimerCreate("OneShot",
 8000636:	4b5c      	ldr	r3, [pc, #368]	@ (80007a8 <MX_FREERTOS_Init+0x178>)
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000642:	485a      	ldr	r0, [pc, #360]	@ (80007ac <MX_FREERTOS_Init+0x17c>)
 8000644:	f006 fe28 	bl	8007298 <xTimerCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a59      	ldr	r2, [pc, #356]	@ (80007b0 <MX_FREERTOS_Init+0x180>)
 800064c:	6013      	str	r3, [r2, #0]
	mainONE_SHOT_TIMER_PERIOD,
	pdFALSE, 0, prvOneShotTimerCallback);

	xModifyTimer = xTimerCreate("Modify",
 800064e:	4b59      	ldr	r3, [pc, #356]	@ (80007b4 <MX_FREERTOS_Init+0x184>)
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	2200      	movs	r2, #0
 8000656:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800065a:	4857      	ldr	r0, [pc, #348]	@ (80007b8 <MX_FREERTOS_Init+0x188>)
 800065c:	f006 fe1c 	bl	8007298 <xTimerCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a56      	ldr	r2, [pc, #344]	@ (80007bc <MX_FREERTOS_Init+0x18c>)
 8000664:	6013      	str	r3, [r2, #0]
	mainONE_SHOT_TIMER_PERIOD * 3,
	pdFALSE, 0, prvModifyTimerCallback);

	xAutoReloadTimer = xTimerCreate("AutoReload",
 8000666:	4b56      	ldr	r3, [pc, #344]	@ (80007c0 <MX_FREERTOS_Init+0x190>)
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000672:	4854      	ldr	r0, [pc, #336]	@ (80007c4 <MX_FREERTOS_Init+0x194>)
 8000674:	f006 fe10 	bl	8007298 <xTimerCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a53      	ldr	r2, [pc, #332]	@ (80007c8 <MX_FREERTOS_Init+0x198>)
 800067c:	6013      	str	r3, [r2, #0]
	mainAUTO_RELOAD_TIMER_PERIOD,
	pdTRUE, 0, prvAutoReloadTimerCallback);

	xCountingSemaphore = xSemaphoreCreateCounting(10, 0);
 800067e:	2100      	movs	r1, #0
 8000680:	200a      	movs	r0, #10
 8000682:	f004 ff8e 	bl	80055a2 <xQueueCreateCountingSemaphore>
 8000686:	4603      	mov	r3, r0
 8000688:	4a50      	ldr	r2, [pc, #320]	@ (80007cc <MX_FREERTOS_Init+0x19c>)
 800068a:	6013      	str	r3, [r2, #0]

	ReviseID(2, 1);
 800068c:	2101      	movs	r1, #1
 800068e:	2002      	movs	r0, #2
 8000690:	f7ff ff4a 	bl	8000528 <ReviseID>
	ReviseID(1, 2);
 8000694:	2102      	movs	r1, #2
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff ff46 	bl	8000528 <ReviseID>
	ReviseID(1, 3);
 800069c:	2103      	movs	r1, #3
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff ff42 	bl	8000528 <ReviseID>
	ReviseID(6, 4);
 80006a4:	2104      	movs	r1, #4
 80006a6:	2006      	movs	r0, #6
 80006a8:	f7ff ff3e 	bl	8000528 <ReviseID>
	ReviseID(0, 5);
 80006ac:	2105      	movs	r1, #5
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff3a 	bl	8000528 <ReviseID>
	ReviseID(6, 6);
 80006b4:	2106      	movs	r1, #6
 80006b6:	2006      	movs	r0, #6
 80006b8:	f7ff ff36 	bl	8000528 <ReviseID>
//	xSemtwo = xSemaphoreCreateCounting(10, 0);
//	xSemthree = xSemaphoreCreateCounting(10, 0);
//	xSemfour = xSemaphoreCreateCounting(10, 0);
//	xSemfive = xSemaphoreCreateCounting(10, 0);

	xQueue = xQueueCreate(10, sizeof(uint8_t));
 80006bc:	2200      	movs	r2, #0
 80006be:	2101      	movs	r1, #1
 80006c0:	200a      	movs	r0, #10
 80006c2:	f004 ff08 	bl	80054d6 <xQueueGenericCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a41      	ldr	r2, [pc, #260]	@ (80007d0 <MX_FREERTOS_Init+0x1a0>)
 80006ca:	6013      	str	r3, [r2, #0]
	xSecQueue = xQueueCreate(10, sizeof(uint8_t));
 80006cc:	2200      	movs	r2, #0
 80006ce:	2101      	movs	r1, #1
 80006d0:	200a      	movs	r0, #10
 80006d2:	f004 ff00 	bl	80054d6 <xQueueGenericCreate>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a3e      	ldr	r2, [pc, #248]	@ (80007d4 <MX_FREERTOS_Init+0x1a4>)
 80006da:	6013      	str	r3, [r2, #0]
	xOneQueue = xQueueCreate(10, sizeof(uint8_t));
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	200a      	movs	r0, #10
 80006e2:	f004 fef8 	bl	80054d6 <xQueueGenericCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a3b      	ldr	r2, [pc, #236]	@ (80007d8 <MX_FREERTOS_Init+0x1a8>)
 80006ea:	6013      	str	r3, [r2, #0]
	xFiveQueue = xQueueCreate(10, sizeof(uint8_t));
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	200a      	movs	r0, #10
 80006f2:	f004 fef0 	bl	80054d6 <xQueueGenericCreate>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a38      	ldr	r2, [pc, #224]	@ (80007dc <MX_FREERTOS_Init+0x1ac>)
 80006fa:	6013      	str	r3, [r2, #0]

	if (xOneShotTimer != NULL && xModifyTimer != NULL && xAutoReloadTimer != NULL && xCountingSemaphore != NULL && xQueue != NULL && xSecQueue != NULL && xOneQueue != NULL && xFiveQueue != NULL) {
 80006fc:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <MX_FREERTOS_Init+0x180>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d04d      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <MX_FREERTOS_Init+0x18c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d049      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
 800070c:	4b2e      	ldr	r3, [pc, #184]	@ (80007c8 <MX_FREERTOS_Init+0x198>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d045      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
 8000714:	4b2d      	ldr	r3, [pc, #180]	@ (80007cc <MX_FREERTOS_Init+0x19c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d041      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <MX_FREERTOS_Init+0x1a0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d03d      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_FREERTOS_Init+0x1a4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d039      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
 800072c:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_FREERTOS_Init+0x1a8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d035      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <MX_FREERTOS_Init+0x1ac>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d031      	beq.n	80007a0 <MX_FREERTOS_Init+0x170>
		xTaskCreate(SwitchTask, "SwitchTask", STACK_SIZE, NULL,
 800073c:	2300      	movs	r3, #0
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2303      	movs	r3, #3
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	4925      	ldr	r1, [pc, #148]	@ (80007e0 <MX_FREERTOS_Init+0x1b0>)
 800074a:	4826      	ldr	r0, [pc, #152]	@ (80007e4 <MX_FREERTOS_Init+0x1b4>)
 800074c:	f005 fd94 	bl	8006278 <xTaskCreate>
		tskIDLE_PRIORITY + 3, NULL);
		xTaskCreate(WriteNumTask, "WriteNumTask", STACK_SIZE, NULL,
 8000750:	2300      	movs	r3, #0
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	2302      	movs	r3, #2
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	4922      	ldr	r1, [pc, #136]	@ (80007e8 <MX_FREERTOS_Init+0x1b8>)
 800075e:	4823      	ldr	r0, [pc, #140]	@ (80007ec <MX_FREERTOS_Init+0x1bc>)
 8000760:	f005 fd8a 	bl	8006278 <xTaskCreate>
		tskIDLE_PRIORITY + 2, NULL);
		xTaskCreate(ModeTask, "ModeTask", STACK_SIZE, NULL,
 8000764:	2300      	movs	r3, #0
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	2302      	movs	r3, #2
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2300      	movs	r3, #0
 800076e:	2280      	movs	r2, #128	@ 0x80
 8000770:	491f      	ldr	r1, [pc, #124]	@ (80007f0 <MX_FREERTOS_Init+0x1c0>)
 8000772:	4820      	ldr	r0, [pc, #128]	@ (80007f4 <MX_FREERTOS_Init+0x1c4>)
 8000774:	f005 fd80 	bl	8006278 <xTaskCreate>
		tskIDLE_PRIORITY + 2, NULL);
		xTaskCreate(ModeactTask, "ModeactTask", STACK_SIZE, NULL,
 8000778:	2300      	movs	r3, #0
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	2302      	movs	r3, #2
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	491c      	ldr	r1, [pc, #112]	@ (80007f8 <MX_FREERTOS_Init+0x1c8>)
 8000786:	481d      	ldr	r0, [pc, #116]	@ (80007fc <MX_FREERTOS_Init+0x1cc>)
 8000788:	f005 fd76 	bl	8006278 <xTaskCreate>
		tskIDLE_PRIORITY + 2, NULL);
		xTaskCreate(ModefiveTask, "ModefiveTask", STACK_SIZE, NULL,
 800078c:	2300      	movs	r3, #0
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	2302      	movs	r3, #2
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2300      	movs	r3, #0
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	4919      	ldr	r1, [pc, #100]	@ (8000800 <MX_FREERTOS_Init+0x1d0>)
 800079a:	481a      	ldr	r0, [pc, #104]	@ (8000804 <MX_FREERTOS_Init+0x1d4>)
 800079c:	f005 fd6c 	bl	8006278 <xTaskCreate>
		tskIDLE_PRIORITY + 2, NULL);
	}
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	08000829 	.word	0x08000829
 80007ac:	080083c4 	.word	0x080083c4
 80007b0:	20000e14 	.word	0x20000e14
 80007b4:	08000809 	.word	0x08000809
 80007b8:	080083cc 	.word	0x080083cc
 80007bc:	20000e18 	.word	0x20000e18
 80007c0:	08000849 	.word	0x08000849
 80007c4:	080083d4 	.word	0x080083d4
 80007c8:	20000e1c 	.word	0x20000e1c
 80007cc:	20000e10 	.word	0x20000e10
 80007d0:	20000e20 	.word	0x20000e20
 80007d4:	20000e24 	.word	0x20000e24
 80007d8:	20000e28 	.word	0x20000e28
 80007dc:	20000e2c 	.word	0x20000e2c
 80007e0:	080083e0 	.word	0x080083e0
 80007e4:	080010b5 	.word	0x080010b5
 80007e8:	080083ec 	.word	0x080083ec
 80007ec:	08000e75 	.word	0x08000e75
 80007f0:	080083fc 	.word	0x080083fc
 80007f4:	08000d71 	.word	0x08000d71
 80007f8:	08008408 	.word	0x08008408
 80007fc:	08000895 	.word	0x08000895
 8000800:	08008414 	.word	0x08008414
 8000804:	08000abd 	.word	0x08000abd

08000808 <prvModifyTimerCallback>:
static void prvModifyTimerCallback(TimerHandle_t xTimer) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	modifychk = 1;
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <prvModifyTimerCallback+0x1c>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000e30 	.word	0x20000e30

08000828 <prvOneShotTimerCallback>:
static void prvOneShotTimerCallback(TimerHandle_t xTimer) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	secchk = 1;
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <prvOneShotTimerCallback+0x1c>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000e33 	.word	0x20000e33

08000848 <prvAutoReloadTimerCallback>:
static void prvAutoReloadTimerCallback(TimerHandle_t xTimer) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	moving_point++;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <prvAutoReloadTimerCallback+0x44>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <prvAutoReloadTimerCallback+0x44>)
 800085a:	701a      	strb	r2, [r3, #0]
	if (moving_point > 55) {
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <prvAutoReloadTimerCallback+0x44>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b37      	cmp	r3, #55	@ 0x37
 8000862:	d902      	bls.n	800086a <prvAutoReloadTimerCallback+0x22>
		moving_point = 0;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <prvAutoReloadTimerCallback+0x44>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
	}
	if (moving_point == 48) {
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <prvAutoReloadTimerCallback+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b30      	cmp	r3, #48	@ 0x30
 8000870:	d105      	bne.n	800087e <prvAutoReloadTimerCallback+0x36>
		shift_count++;
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <prvAutoReloadTimerCallback+0x48>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <prvAutoReloadTimerCallback+0x48>)
 800087c:	701a      	strb	r2, [r3, #0]
	}
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000e31 	.word	0x20000e31
 8000890:	20000e32 	.word	0x20000e32

08000894 <ModeactTask>:

void ModeactTask(void *argument) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af02      	add	r7, sp, #8
 800089a:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	77fb      	strb	r3, [r7, #31]
	uint8_t num;
	uint8_t (*ptr)[56];
	uint8_t cur;
	while (1) {
		if (flag == 0) {
 80008a0:	7ffb      	ldrb	r3, [r7, #31]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11a      	bne.n	80008dc <ModeactTask+0x48>
			xQueueReceive(xOneQueue, &num, portMAX_DELAY);
 80008a6:	4b7c      	ldr	r3, [pc, #496]	@ (8000a98 <ModeactTask+0x204>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f107 010d 	add.w	r1, r7, #13
 80008ae:	f04f 32ff 	mov.w	r2, #4294967295
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 f8f4 	bl	8005aa0 <xQueueReceive>
			switch (num) {
 80008b8:	7b7b      	ldrb	r3, [r7, #13]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	dc02      	bgt.n	80008c4 <ModeactTask+0x30>
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dc04      	bgt.n	80008cc <ModeactTask+0x38>
 80008c2:	e009      	b.n	80008d8 <ModeactTask+0x44>
 80008c4:	3b03      	subs	r3, #3
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d806      	bhi.n	80008d8 <ModeactTask+0x44>
 80008ca:	e002      	b.n	80008d2 <ModeactTask+0x3e>
			case 1:
			case 2:
				ptr = SOGANG;
 80008cc:	4b73      	ldr	r3, [pc, #460]	@ (8000a9c <ModeactTask+0x208>)
 80008ce:	61bb      	str	r3, [r7, #24]
				break;
 80008d0:	e002      	b.n	80008d8 <ModeactTask+0x44>
			case 3:
			case 4:
				ptr = STUDID;
 80008d2:	4b73      	ldr	r3, [pc, #460]	@ (8000aa0 <ModeactTask+0x20c>)
 80008d4:	61bb      	str	r3, [r7, #24]
				break;
 80008d6:	bf00      	nop
			}
			flag = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	77fb      	strb	r3, [r7, #31]
		}
		cur = moving_point;
 80008dc:	4b71      	ldr	r3, [pc, #452]	@ (8000aa4 <ModeactTask+0x210>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < 8; i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	75fb      	strb	r3, [r7, #23]
 80008e6:	e0a7      	b.n	8000a38 <ModeactTask+0x1a4>
			uint8_t ti = (cur + i) > 55 ? (cur + i - 56) : (cur + i);
 80008e8:	7bfa      	ldrb	r2, [r7, #15]
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	4413      	add	r3, r2
 80008ee:	2b37      	cmp	r3, #55	@ 0x37
 80008f0:	dd06      	ble.n	8000900 <ModeactTask+0x6c>
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3b38      	subs	r3, #56	@ 0x38
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	e003      	b.n	8000908 <ModeactTask+0x74>
 8000900:	7bfa      	ldrb	r2, [r7, #15]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	4413      	add	r3, r2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	73bb      	strb	r3, [r7, #14]
			uint16_t COL;

			switch (i) {
 800090a:	7dfb      	ldrb	r3, [r7, #23]
 800090c:	2b07      	cmp	r3, #7
 800090e:	d833      	bhi.n	8000978 <ModeactTask+0xe4>
 8000910:	a201      	add	r2, pc, #4	@ (adr r2, 8000918 <ModeactTask+0x84>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000939 	.word	0x08000939
 800091c:	08000941 	.word	0x08000941
 8000920:	08000949 	.word	0x08000949
 8000924:	08000951 	.word	0x08000951
 8000928:	08000959 	.word	0x08000959
 800092c:	08000961 	.word	0x08000961
 8000930:	08000969 	.word	0x08000969
 8000934:	08000971 	.word	0x08000971
			case 0:
				COL = GPIO_PIN_8;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	82bb      	strh	r3, [r7, #20]
				break;
 800093e:	e01b      	b.n	8000978 <ModeactTask+0xe4>
			case 1:
				COL = GPIO_PIN_9;
 8000940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000944:	82bb      	strh	r3, [r7, #20]
				break;
 8000946:	e017      	b.n	8000978 <ModeactTask+0xe4>
			case 2:
				COL = GPIO_PIN_10;
 8000948:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800094c:	82bb      	strh	r3, [r7, #20]
				break;
 800094e:	e013      	b.n	8000978 <ModeactTask+0xe4>
			case 3:
				COL = GPIO_PIN_11;
 8000950:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000954:	82bb      	strh	r3, [r7, #20]
				break;
 8000956:	e00f      	b.n	8000978 <ModeactTask+0xe4>
			case 4:
				COL = GPIO_PIN_12;
 8000958:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095c:	82bb      	strh	r3, [r7, #20]
				break;
 800095e:	e00b      	b.n	8000978 <ModeactTask+0xe4>
			case 5:
				COL = GPIO_PIN_13;
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	82bb      	strh	r3, [r7, #20]
				break;
 8000966:	e007      	b.n	8000978 <ModeactTask+0xe4>
			case 6:
				COL = GPIO_PIN_14;
 8000968:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800096c:	82bb      	strh	r3, [r7, #20]
				break;
 800096e:	e003      	b.n	8000978 <ModeactTask+0xe4>
			case 7:
				COL = GPIO_PIN_15;
 8000970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000974:	82bb      	strh	r3, [r7, #20]
				break;
 8000976:	bf00      	nop
			}

			HAL_GPIO_WritePin(GPIOE, COL, GPIO_PIN_SET);
 8000978:	8abb      	ldrh	r3, [r7, #20]
 800097a:	2201      	movs	r2, #1
 800097c:	4619      	mov	r1, r3
 800097e:	484a      	ldr	r0, [pc, #296]	@ (8000aa8 <ModeactTask+0x214>)
 8000980:	f001 ff26 	bl	80027d0 <HAL_GPIO_WritePin>
			for (uint8_t j = 0; j < 8; j++) {
 8000984:	2300      	movs	r3, #0
 8000986:	74fb      	strb	r3, [r7, #19]
 8000988:	e04a      	b.n	8000a20 <ModeactTask+0x18c>
				uint16_t ROW;
				switch (j) {
 800098a:	7cfb      	ldrb	r3, [r7, #19]
 800098c:	2b07      	cmp	r3, #7
 800098e:	d82b      	bhi.n	80009e8 <ModeactTask+0x154>
 8000990:	a201      	add	r2, pc, #4	@ (adr r2, 8000998 <ModeactTask+0x104>)
 8000992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000996:	bf00      	nop
 8000998:	080009b9 	.word	0x080009b9
 800099c:	080009bf 	.word	0x080009bf
 80009a0:	080009c5 	.word	0x080009c5
 80009a4:	080009cb 	.word	0x080009cb
 80009a8:	080009d1 	.word	0x080009d1
 80009ac:	080009d7 	.word	0x080009d7
 80009b0:	080009dd 	.word	0x080009dd
 80009b4:	080009e3 	.word	0x080009e3
				case 0:
					ROW = GPIO_PIN_0;
 80009b8:	2301      	movs	r3, #1
 80009ba:	823b      	strh	r3, [r7, #16]
					break;
 80009bc:	e014      	b.n	80009e8 <ModeactTask+0x154>
				case 1:
					ROW = GPIO_PIN_1;
 80009be:	2302      	movs	r3, #2
 80009c0:	823b      	strh	r3, [r7, #16]
					break;
 80009c2:	e011      	b.n	80009e8 <ModeactTask+0x154>
				case 2:
					ROW = GPIO_PIN_2;
 80009c4:	2304      	movs	r3, #4
 80009c6:	823b      	strh	r3, [r7, #16]
					break;
 80009c8:	e00e      	b.n	80009e8 <ModeactTask+0x154>
				case 3:
					ROW = GPIO_PIN_3;
 80009ca:	2308      	movs	r3, #8
 80009cc:	823b      	strh	r3, [r7, #16]
					break;
 80009ce:	e00b      	b.n	80009e8 <ModeactTask+0x154>
				case 4:
					ROW = GPIO_PIN_4;
 80009d0:	2310      	movs	r3, #16
 80009d2:	823b      	strh	r3, [r7, #16]
					break;
 80009d4:	e008      	b.n	80009e8 <ModeactTask+0x154>
				case 5:
					ROW = GPIO_PIN_5;
 80009d6:	2320      	movs	r3, #32
 80009d8:	823b      	strh	r3, [r7, #16]
					break;
 80009da:	e005      	b.n	80009e8 <ModeactTask+0x154>
				case 6:
					ROW = GPIO_PIN_6;
 80009dc:	2340      	movs	r3, #64	@ 0x40
 80009de:	823b      	strh	r3, [r7, #16]
					break;
 80009e0:	e002      	b.n	80009e8 <ModeactTask+0x154>
				case 7:
					ROW = GPIO_PIN_7;
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	823b      	strh	r3, [r7, #16]
					break;
 80009e6:	bf00      	nop
				}
				if (ptr[j][ti] == 1) {
 80009e8:	7cfa      	ldrb	r2, [r7, #19]
 80009ea:	4613      	mov	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	461a      	mov	r2, r3
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	441a      	add	r2, r3
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	5cd3      	ldrb	r3, [r2, r3]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d106      	bne.n	8000a0e <ModeactTask+0x17a>
					HAL_GPIO_WritePin(GPIOD, ROW, GPIO_PIN_SET);
 8000a00:	8a3b      	ldrh	r3, [r7, #16]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	4829      	ldr	r0, [pc, #164]	@ (8000aac <ModeactTask+0x218>)
 8000a08:	f001 fee2 	bl	80027d0 <HAL_GPIO_WritePin>
 8000a0c:	e005      	b.n	8000a1a <ModeactTask+0x186>
				} else {
					HAL_GPIO_WritePin(GPIOD, ROW, GPIO_PIN_RESET);
 8000a0e:	8a3b      	ldrh	r3, [r7, #16]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	4825      	ldr	r0, [pc, #148]	@ (8000aac <ModeactTask+0x218>)
 8000a16:	f001 fedb 	bl	80027d0 <HAL_GPIO_WritePin>
			for (uint8_t j = 0; j < 8; j++) {
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	74fb      	strb	r3, [r7, #19]
 8000a20:	7cfb      	ldrb	r3, [r7, #19]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	d9b1      	bls.n	800098a <ModeactTask+0xf6>
				}
			}
			HAL_GPIO_WritePin(GPIOE, COL, GPIO_PIN_RESET);
 8000a26:	8abb      	ldrh	r3, [r7, #20]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <ModeactTask+0x214>)
 8000a2e:	f001 fecf 	bl	80027d0 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 8; i++) {
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	3301      	adds	r3, #1
 8000a36:	75fb      	strb	r3, [r7, #23]
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	2b07      	cmp	r3, #7
 8000a3c:	f67f af54 	bls.w	80008e8 <ModeactTask+0x54>
		}
		if (shift_count == 3) {
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <ModeactTask+0x21c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	f47f af2b 	bne.w	80008a0 <ModeactTask+0xc>
			xTimerStop(xAutoReloadTimer, 0);
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <ModeactTask+0x220>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2200      	movs	r2, #0
 8000a56:	2103      	movs	r1, #3
 8000a58:	f006 fc7e 	bl	8007358 <xTimerGenericCommand>
			mode = 0;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <ModeactTask+0x224>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
			xQueueReceive(xOneQueue, &num, portMAX_DELAY);
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <ModeactTask+0x204>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f107 010d 	add.w	r1, r7, #13
 8000a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 f816 	bl	8005aa0 <xQueueReceive>
			switch (num) {
 8000a74:	7b7b      	ldrb	r3, [r7, #13]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	dc02      	bgt.n	8000a80 <ModeactTask+0x1ec>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	dc05      	bgt.n	8000a8a <ModeactTask+0x1f6>
 8000a7e:	e00a      	b.n	8000a96 <ModeactTask+0x202>
 8000a80:	3b03      	subs	r3, #3
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	f63f af0c 	bhi.w	80008a0 <ModeactTask+0xc>
 8000a88:	e002      	b.n	8000a90 <ModeactTask+0x1fc>
			case 1:
			case 2:
				ptr = SOGANG;
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <ModeactTask+0x208>)
 8000a8c:	61bb      	str	r3, [r7, #24]
				break;
 8000a8e:	e002      	b.n	8000a96 <ModeactTask+0x202>
			case 3:
			case 4:
				ptr = STUDID;
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <ModeactTask+0x20c>)
 8000a92:	61bb      	str	r3, [r7, #24]
				break;
 8000a94:	bf00      	nop
		if (flag == 0) {
 8000a96:	e703      	b.n	80008a0 <ModeactTask+0xc>
 8000a98:	20000e28 	.word	0x20000e28
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	200001c4 	.word	0x200001c4
 8000aa4:	20000e31 	.word	0x20000e31
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	20000e32 	.word	0x20000e32
 8000ab4:	20000e1c 	.word	0x20000e1c
 8000ab8:	20000e34 	.word	0x20000e34

08000abc <ModefiveTask>:
			}
		}
	}
}
void ModefiveTask(void *argument) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
	uint8_t (*ptr)[8];
	uint8_t flag = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	while (1) {
		uint8_t num;
		xQueueReceive(xFiveQueue, &num, portMAX_DELAY);
 8000ac8:	4b98      	ldr	r3, [pc, #608]	@ (8000d2c <ModefiveTask+0x270>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f107 010b 	add.w	r1, r7, #11
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 ffe3 	bl	8005aa0 <xQueueReceive>
		mode = 6;
 8000ada:	4b95      	ldr	r3, [pc, #596]	@ (8000d30 <ModefiveTask+0x274>)
 8000adc:	2206      	movs	r2, #6
 8000ade:	701a      	strb	r2, [r3, #0]
		switch (num) {
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	2b09      	cmp	r3, #9
 8000ae4:	d834      	bhi.n	8000b50 <ModefiveTask+0x94>
 8000ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8000aec <ModefiveTask+0x30>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b15 	.word	0x08000b15
 8000af0:	08000b1b 	.word	0x08000b1b
 8000af4:	08000b21 	.word	0x08000b21
 8000af8:	08000b27 	.word	0x08000b27
 8000afc:	08000b2d 	.word	0x08000b2d
 8000b00:	08000b33 	.word	0x08000b33
 8000b04:	08000b39 	.word	0x08000b39
 8000b08:	08000b3f 	.word	0x08000b3f
 8000b0c:	08000b45 	.word	0x08000b45
 8000b10:	08000b4b 	.word	0x08000b4b
		case 0:
			ptr = ZERO;
 8000b14:	4b87      	ldr	r3, [pc, #540]	@ (8000d34 <ModefiveTask+0x278>)
 8000b16:	617b      	str	r3, [r7, #20]
			break;
 8000b18:	e01a      	b.n	8000b50 <ModefiveTask+0x94>
		case 1:
			ptr = ONE;
 8000b1a:	4b87      	ldr	r3, [pc, #540]	@ (8000d38 <ModefiveTask+0x27c>)
 8000b1c:	617b      	str	r3, [r7, #20]
			break;
 8000b1e:	e017      	b.n	8000b50 <ModefiveTask+0x94>
		case 2:
			ptr = TWO;
 8000b20:	4b86      	ldr	r3, [pc, #536]	@ (8000d3c <ModefiveTask+0x280>)
 8000b22:	617b      	str	r3, [r7, #20]
			break;
 8000b24:	e014      	b.n	8000b50 <ModefiveTask+0x94>
		case 3:
			ptr = THREE;
 8000b26:	4b86      	ldr	r3, [pc, #536]	@ (8000d40 <ModefiveTask+0x284>)
 8000b28:	617b      	str	r3, [r7, #20]
			break;
 8000b2a:	e011      	b.n	8000b50 <ModefiveTask+0x94>
		case 4:
			ptr = FOUR;
 8000b2c:	4b85      	ldr	r3, [pc, #532]	@ (8000d44 <ModefiveTask+0x288>)
 8000b2e:	617b      	str	r3, [r7, #20]
			break;
 8000b30:	e00e      	b.n	8000b50 <ModefiveTask+0x94>
		case 5:
			ptr = FIVE;
 8000b32:	4b85      	ldr	r3, [pc, #532]	@ (8000d48 <ModefiveTask+0x28c>)
 8000b34:	617b      	str	r3, [r7, #20]
			break;
 8000b36:	e00b      	b.n	8000b50 <ModefiveTask+0x94>
		case 6:
			ptr = SIX;
 8000b38:	4b84      	ldr	r3, [pc, #528]	@ (8000d4c <ModefiveTask+0x290>)
 8000b3a:	617b      	str	r3, [r7, #20]
			break;
 8000b3c:	e008      	b.n	8000b50 <ModefiveTask+0x94>
		case 7:
			ptr = SEVEN;
 8000b3e:	4b84      	ldr	r3, [pc, #528]	@ (8000d50 <ModefiveTask+0x294>)
 8000b40:	617b      	str	r3, [r7, #20]
			break;
 8000b42:	e005      	b.n	8000b50 <ModefiveTask+0x94>
		case 8:
			ptr = EIGHT;
 8000b44:	4b83      	ldr	r3, [pc, #524]	@ (8000d54 <ModefiveTask+0x298>)
 8000b46:	617b      	str	r3, [r7, #20]
			break;
 8000b48:	e002      	b.n	8000b50 <ModefiveTask+0x94>
		case 9:
			ptr = NINE;
 8000b4a:	4b83      	ldr	r3, [pc, #524]	@ (8000d58 <ModefiveTask+0x29c>)
 8000b4c:	617b      	str	r3, [r7, #20]
			break;
 8000b4e:	bf00      	nop
		}
		if (flag == 0) {
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10e      	bne.n	8000b74 <ModefiveTask+0xb8>
			xTimerStart(xModifyTimer, 0);
 8000b56:	4b81      	ldr	r3, [pc, #516]	@ (8000d5c <ModefiveTask+0x2a0>)
 8000b58:	681c      	ldr	r4, [r3, #0]
 8000b5a:	f005 fe0f 	bl	800677c <xTaskGetTickCount>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	2300      	movs	r3, #0
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2300      	movs	r3, #0
 8000b66:	2101      	movs	r1, #1
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f006 fbf5 	bl	8007358 <xTimerGenericCommand>
			flag = 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	74fb      	strb	r3, [r7, #19]
 8000b72:	e00b      	b.n	8000b8c <ModefiveTask+0xd0>
		} else
			xTimerReset(xModifyTimer, 0);
 8000b74:	4b79      	ldr	r3, [pc, #484]	@ (8000d5c <ModefiveTask+0x2a0>)
 8000b76:	681c      	ldr	r4, [r3, #0]
 8000b78:	f005 fe00 	bl	800677c <xTaskGetTickCount>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	2102      	movs	r1, #2
 8000b86:	4620      	mov	r0, r4
 8000b88:	f006 fbe6 	bl	8007358 <xTimerGenericCommand>
		while (1) {
			for (uint8_t i = 0; i < 8; i++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	74bb      	strb	r3, [r7, #18]
 8000b90:	e092      	b.n	8000cb8 <ModefiveTask+0x1fc>
				uint16_t COL;
				switch (i) {
 8000b92:	7cbb      	ldrb	r3, [r7, #18]
 8000b94:	2b07      	cmp	r3, #7
 8000b96:	d833      	bhi.n	8000c00 <ModefiveTask+0x144>
 8000b98:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba0 <ModefiveTask+0xe4>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bc1 	.word	0x08000bc1
 8000ba4:	08000bc9 	.word	0x08000bc9
 8000ba8:	08000bd1 	.word	0x08000bd1
 8000bac:	08000bd9 	.word	0x08000bd9
 8000bb0:	08000be1 	.word	0x08000be1
 8000bb4:	08000be9 	.word	0x08000be9
 8000bb8:	08000bf1 	.word	0x08000bf1
 8000bbc:	08000bf9 	.word	0x08000bf9
				case 0:
					COL = GPIO_PIN_8;
 8000bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc4:	823b      	strh	r3, [r7, #16]
					break;
 8000bc6:	e01b      	b.n	8000c00 <ModefiveTask+0x144>
				case 1:
					COL = GPIO_PIN_9;
 8000bc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bcc:	823b      	strh	r3, [r7, #16]
					break;
 8000bce:	e017      	b.n	8000c00 <ModefiveTask+0x144>
				case 2:
					COL = GPIO_PIN_10;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd4:	823b      	strh	r3, [r7, #16]
					break;
 8000bd6:	e013      	b.n	8000c00 <ModefiveTask+0x144>
				case 3:
					COL = GPIO_PIN_11;
 8000bd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bdc:	823b      	strh	r3, [r7, #16]
					break;
 8000bde:	e00f      	b.n	8000c00 <ModefiveTask+0x144>
				case 4:
					COL = GPIO_PIN_12;
 8000be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be4:	823b      	strh	r3, [r7, #16]
					break;
 8000be6:	e00b      	b.n	8000c00 <ModefiveTask+0x144>
				case 5:
					COL = GPIO_PIN_13;
 8000be8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bec:	823b      	strh	r3, [r7, #16]
					break;
 8000bee:	e007      	b.n	8000c00 <ModefiveTask+0x144>
				case 6:
					COL = GPIO_PIN_14;
 8000bf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bf4:	823b      	strh	r3, [r7, #16]
					break;
 8000bf6:	e003      	b.n	8000c00 <ModefiveTask+0x144>
				case 7:
					COL = GPIO_PIN_15;
 8000bf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bfc:	823b      	strh	r3, [r7, #16]
					break;
 8000bfe:	bf00      	nop
				}
				HAL_GPIO_WritePin(GPIOE, COL, GPIO_PIN_SET);
 8000c00:	8a3b      	ldrh	r3, [r7, #16]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	4856      	ldr	r0, [pc, #344]	@ (8000d60 <ModefiveTask+0x2a4>)
 8000c08:	f001 fde2 	bl	80027d0 <HAL_GPIO_WritePin>
				for (uint8_t j = 0; j < 8; j++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e046      	b.n	8000ca0 <ModefiveTask+0x1e4>
					uint16_t ROW;
					switch (j) {
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d82b      	bhi.n	8000c70 <ModefiveTask+0x1b4>
 8000c18:	a201      	add	r2, pc, #4	@ (adr r2, 8000c20 <ModefiveTask+0x164>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c41 	.word	0x08000c41
 8000c24:	08000c47 	.word	0x08000c47
 8000c28:	08000c4d 	.word	0x08000c4d
 8000c2c:	08000c53 	.word	0x08000c53
 8000c30:	08000c59 	.word	0x08000c59
 8000c34:	08000c5f 	.word	0x08000c5f
 8000c38:	08000c65 	.word	0x08000c65
 8000c3c:	08000c6b 	.word	0x08000c6b
					case 0:
						ROW = GPIO_PIN_0;
 8000c40:	2301      	movs	r3, #1
 8000c42:	81bb      	strh	r3, [r7, #12]
						break;
 8000c44:	e014      	b.n	8000c70 <ModefiveTask+0x1b4>
					case 1:
						ROW = GPIO_PIN_1;
 8000c46:	2302      	movs	r3, #2
 8000c48:	81bb      	strh	r3, [r7, #12]
						break;
 8000c4a:	e011      	b.n	8000c70 <ModefiveTask+0x1b4>
					case 2:
						ROW = GPIO_PIN_2;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	81bb      	strh	r3, [r7, #12]
						break;
 8000c50:	e00e      	b.n	8000c70 <ModefiveTask+0x1b4>
					case 3:
						ROW = GPIO_PIN_3;
 8000c52:	2308      	movs	r3, #8
 8000c54:	81bb      	strh	r3, [r7, #12]
						break;
 8000c56:	e00b      	b.n	8000c70 <ModefiveTask+0x1b4>
					case 4:
						ROW = GPIO_PIN_4;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	81bb      	strh	r3, [r7, #12]
						break;
 8000c5c:	e008      	b.n	8000c70 <ModefiveTask+0x1b4>
					case 5:
						ROW = GPIO_PIN_5;
 8000c5e:	2320      	movs	r3, #32
 8000c60:	81bb      	strh	r3, [r7, #12]
						break;
 8000c62:	e005      	b.n	8000c70 <ModefiveTask+0x1b4>
					case 6:
						ROW = GPIO_PIN_6;
 8000c64:	2340      	movs	r3, #64	@ 0x40
 8000c66:	81bb      	strh	r3, [r7, #12]
						break;
 8000c68:	e002      	b.n	8000c70 <ModefiveTask+0x1b4>
					case 7:
						ROW = GPIO_PIN_7;
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	81bb      	strh	r3, [r7, #12]
						break;
 8000c6e:	bf00      	nop
					}
					if (ptr[j][i] == 1) {
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	441a      	add	r2, r3
 8000c78:	7cbb      	ldrb	r3, [r7, #18]
 8000c7a:	5cd3      	ldrb	r3, [r2, r3]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d106      	bne.n	8000c8e <ModefiveTask+0x1d2>
						HAL_GPIO_WritePin(GPIOD, ROW, GPIO_PIN_SET);
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	4837      	ldr	r0, [pc, #220]	@ (8000d64 <ModefiveTask+0x2a8>)
 8000c88:	f001 fda2 	bl	80027d0 <HAL_GPIO_WritePin>
 8000c8c:	e005      	b.n	8000c9a <ModefiveTask+0x1de>
					} else {
						HAL_GPIO_WritePin(GPIOD, ROW, GPIO_PIN_RESET);
 8000c8e:	89bb      	ldrh	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	4619      	mov	r1, r3
 8000c94:	4833      	ldr	r0, [pc, #204]	@ (8000d64 <ModefiveTask+0x2a8>)
 8000c96:	f001 fd9b 	bl	80027d0 <HAL_GPIO_WritePin>
				for (uint8_t j = 0; j < 8; j++) {
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	d9b5      	bls.n	8000c12 <ModefiveTask+0x156>
					}
				}
				HAL_GPIO_WritePin(GPIOE, COL, GPIO_PIN_RESET);
 8000ca6:	8a3b      	ldrh	r3, [r7, #16]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	482c      	ldr	r0, [pc, #176]	@ (8000d60 <ModefiveTask+0x2a4>)
 8000cae:	f001 fd8f 	bl	80027d0 <HAL_GPIO_WritePin>
			for (uint8_t i = 0; i < 8; i++) {
 8000cb2:	7cbb      	ldrb	r3, [r7, #18]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	74bb      	strb	r3, [r7, #18]
 8000cb8:	7cbb      	ldrb	r3, [r7, #18]
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	f67f af69 	bls.w	8000b92 <ModefiveTask+0xd6>
			}
			if (modifychk == 1) {
 8000cc0:	4b29      	ldr	r3, [pc, #164]	@ (8000d68 <ModefiveTask+0x2ac>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d004      	beq.n	8000cd2 <ModefiveTask+0x216>
				break;
			}
			if(mode == 7){
 8000cc8:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <ModefiveTask+0x274>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d002      	beq.n	8000cd6 <ModefiveTask+0x21a>
			for (uint8_t i = 0; i < 8; i++) {
 8000cd0:	e75c      	b.n	8000b8c <ModefiveTask+0xd0>
				break;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <ModefiveTask+0x21c>
				break;
 8000cd6:	bf00      	nop
			}
		}
		if (modifychk == 1) {
 8000cd8:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <ModefiveTask+0x2ac>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	f47f aef3 	bne.w	8000ac8 <ModefiveTask+0xc>
			if (dig < 6)
 8000ce2:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <ModefiveTask+0x2b0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d807      	bhi.n	8000cfa <ModefiveTask+0x23e>
				ReviseID(num, dig);
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	4a1f      	ldr	r2, [pc, #124]	@ (8000d6c <ModefiveTask+0x2b0>)
 8000cee:	7812      	ldrb	r2, [r2, #0]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc18 	bl	8000528 <ReviseID>
 8000cf8:	e00c      	b.n	8000d14 <ModefiveTask+0x258>
			else {
				ReviseID(num, dig);
 8000cfa:	7afb      	ldrb	r3, [r7, #11]
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <ModefiveTask+0x2b0>)
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc10 	bl	8000528 <ReviseID>
				mode = 0;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <ModefiveTask+0x274>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
				dig = 0;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <ModefiveTask+0x2b0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
			}
			dig++;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <ModefiveTask+0x2b0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <ModefiveTask+0x2b0>)
 8000d1e:	701a      	strb	r2, [r3, #0]
			flag = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	74fb      	strb	r3, [r7, #19]
			modifychk = 0;
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <ModefiveTask+0x2ac>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
	while (1) {
 8000d2a:	e6cd      	b.n	8000ac8 <ModefiveTask+0xc>
 8000d2c:	20000e2c 	.word	0x20000e2c
 8000d30:	20000e34 	.word	0x20000e34
 8000d34:	20000384 	.word	0x20000384
 8000d38:	200003c4 	.word	0x200003c4
 8000d3c:	20000404 	.word	0x20000404
 8000d40:	20000444 	.word	0x20000444
 8000d44:	20000484 	.word	0x20000484
 8000d48:	200004c4 	.word	0x200004c4
 8000d4c:	20000504 	.word	0x20000504
 8000d50:	20000544 	.word	0x20000544
 8000d54:	20000584 	.word	0x20000584
 8000d58:	200005c4 	.word	0x200005c4
 8000d5c:	20000e18 	.word	0x20000e18
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40020c00 	.word	0x40020c00
 8000d68:	20000e30 	.word	0x20000e30
 8000d6c:	20000000 	.word	0x20000000

08000d70 <ModeTask>:
		}

	}
}
void ModeTask(void *argument) {
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t num;
	while (1) {
		xQueueReceive(xSecQueue, &num, portMAX_DELAY);
 8000d78:	4b38      	ldr	r3, [pc, #224]	@ (8000e5c <ModeTask+0xec>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f107 010f 	add.w	r1, r7, #15
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	4618      	mov	r0, r3
 8000d86:	f004 fe8b 	bl	8005aa0 <xQueueReceive>
		secchk = 0;
 8000d8a:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <ModeTask+0xf0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]

		switch (num) {
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d8ef      	bhi.n	8000d78 <ModeTask+0x8>
 8000d98:	a201      	add	r2, pc, #4	@ (adr r2, 8000da0 <ModeTask+0x30>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000db5 	.word	0x08000db5
 8000da4:	08000df9 	.word	0x08000df9
 8000da8:	08000db5 	.word	0x08000db5
 8000dac:	08000df9 	.word	0x08000df9
 8000db0:	08000e3b 	.word	0x08000e3b
		case 1:
		case 3:
			mode = num;
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <ModeTask+0xf4>)
 8000db8:	701a      	strb	r2, [r3, #0]
			xTimerChangePeriod(xAutoReloadTimer, mainAUTO_RELOAD_TIMER_PERIOD,
 8000dba:	4b2b      	ldr	r3, [pc, #172]	@ (8000e68 <ModeTask+0xf8>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000dc8:	2104      	movs	r1, #4
 8000dca:	f006 fac5 	bl	8007358 <xTimerGenericCommand>
					0);
			xTimerStart(xAutoReloadTimer, 0);
 8000dce:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <ModeTask+0xf8>)
 8000dd0:	681c      	ldr	r4, [r3, #0]
 8000dd2:	f005 fcd3 	bl	800677c <xTaskGetTickCount>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	4620      	mov	r0, r4
 8000de2:	f006 fab9 	bl	8007358 <xTimerGenericCommand>
			xQueueSend(xOneQueue, &num, 0);
 8000de6:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <ModeTask+0xfc>)
 8000de8:	6818      	ldr	r0, [r3, #0]
 8000dea:	f107 010f 	add.w	r1, r7, #15
 8000dee:	2300      	movs	r3, #0
 8000df0:	2200      	movs	r2, #0
 8000df2:	f004 fc0f 	bl	8005614 <xQueueGenericSend>
			break;
 8000df6:	e02f      	b.n	8000e58 <ModeTask+0xe8>
		case 2:
		case 4:
			mode = num;
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <ModeTask+0xf4>)
 8000dfc:	701a      	strb	r2, [r3, #0]
			xTimerChangePeriod(xAutoReloadTimer,
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <ModeTask+0xf8>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	22fa      	movs	r2, #250	@ 0xfa
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	f006 faa4 	bl	8007358 <xTimerGenericCommand>
					mainAUTO_RELOAD_TIMER_PERIOD / 2, 0);
			xTimerStart(xAutoReloadTimer, 0);
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <ModeTask+0xf8>)
 8000e12:	681c      	ldr	r4, [r3, #0]
 8000e14:	f005 fcb2 	bl	800677c <xTaskGetTickCount>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2101      	movs	r1, #1
 8000e22:	4620      	mov	r0, r4
 8000e24:	f006 fa98 	bl	8007358 <xTimerGenericCommand>
			xQueueSend(xOneQueue, &num, 0);
 8000e28:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <ModeTask+0xfc>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	f107 010f 	add.w	r1, r7, #15
 8000e30:	2300      	movs	r3, #0
 8000e32:	2200      	movs	r2, #0
 8000e34:	f004 fbee 	bl	8005614 <xQueueGenericSend>
			break;
 8000e38:	e00e      	b.n	8000e58 <ModeTask+0xe8>
		case 5:
			mode = num;
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <ModeTask+0xf4>)
 8000e3e:	701a      	strb	r2, [r3, #0]
			num = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
			xQueueSend(xFiveQueue, &num, 0);
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <ModeTask+0x100>)
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	f107 010f 	add.w	r1, r7, #15
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f004 fbe0 	bl	8005614 <xQueueGenericSend>
			break;
 8000e54:	bf00      	nop
 8000e56:	e78f      	b.n	8000d78 <ModeTask+0x8>
		xQueueReceive(xSecQueue, &num, portMAX_DELAY);
 8000e58:	e78e      	b.n	8000d78 <ModeTask+0x8>
 8000e5a:	bf00      	nop
 8000e5c:	20000e24 	.word	0x20000e24
 8000e60:	20000e33 	.word	0x20000e33
 8000e64:	20000e34 	.word	0x20000e34
 8000e68:	20000e1c 	.word	0x20000e1c
 8000e6c:	20000e28 	.word	0x20000e28
 8000e70:	20000e2c 	.word	0x20000e2c

08000e74 <WriteNumTask>:
		}
	}
}
void WriteNumTask(void *argument) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	6078      	str	r0, [r7, #4]
	uint8_t (*ptr)[8];
	uint8_t flag = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	74fb      	strb	r3, [r7, #19]
	while (1) {
		uint8_t num;
		xQueueReceive(xQueue, &num, portMAX_DELAY);
 8000e80:	4b80      	ldr	r3, [pc, #512]	@ (8001084 <WriteNumTask+0x210>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f107 010b 	add.w	r1, r7, #11
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fe07 	bl	8005aa0 <xQueueReceive>
		mode = 8;
 8000e92:	4b7d      	ldr	r3, [pc, #500]	@ (8001088 <WriteNumTask+0x214>)
 8000e94:	2208      	movs	r2, #8
 8000e96:	701a      	strb	r2, [r3, #0]
		switch (num) {
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d81c      	bhi.n	8000eda <WriteNumTask+0x66>
 8000ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea8 <WriteNumTask+0x34>)
 8000ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea6:	bf00      	nop
 8000ea8:	08000ebd 	.word	0x08000ebd
 8000eac:	08000ec3 	.word	0x08000ec3
 8000eb0:	08000ec9 	.word	0x08000ec9
 8000eb4:	08000ecf 	.word	0x08000ecf
 8000eb8:	08000ed5 	.word	0x08000ed5
		case 1:
			ptr = ONE;
 8000ebc:	4b73      	ldr	r3, [pc, #460]	@ (800108c <WriteNumTask+0x218>)
 8000ebe:	617b      	str	r3, [r7, #20]
			break;
 8000ec0:	e00b      	b.n	8000eda <WriteNumTask+0x66>
		case 2:
			ptr = TWO;
 8000ec2:	4b73      	ldr	r3, [pc, #460]	@ (8001090 <WriteNumTask+0x21c>)
 8000ec4:	617b      	str	r3, [r7, #20]
			break;
 8000ec6:	e008      	b.n	8000eda <WriteNumTask+0x66>
		case 3:
			ptr = THREE;
 8000ec8:	4b72      	ldr	r3, [pc, #456]	@ (8001094 <WriteNumTask+0x220>)
 8000eca:	617b      	str	r3, [r7, #20]
			break;
 8000ecc:	e005      	b.n	8000eda <WriteNumTask+0x66>
		case 4:
			ptr = FOUR;
 8000ece:	4b72      	ldr	r3, [pc, #456]	@ (8001098 <WriteNumTask+0x224>)
 8000ed0:	617b      	str	r3, [r7, #20]
			break;
 8000ed2:	e002      	b.n	8000eda <WriteNumTask+0x66>
		case 5:
			ptr = FIVE;
 8000ed4:	4b71      	ldr	r3, [pc, #452]	@ (800109c <WriteNumTask+0x228>)
 8000ed6:	617b      	str	r3, [r7, #20]
			break;
 8000ed8:	bf00      	nop
		}
		if (flag == 0) {
 8000eda:	7cfb      	ldrb	r3, [r7, #19]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10e      	bne.n	8000efe <WriteNumTask+0x8a>
			xTimerStart(xOneShotTimer, 0);
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80010a0 <WriteNumTask+0x22c>)
 8000ee2:	681c      	ldr	r4, [r3, #0]
 8000ee4:	f005 fc4a 	bl	800677c <xTaskGetTickCount>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	2300      	movs	r3, #0
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f006 fa30 	bl	8007358 <xTimerGenericCommand>
			flag = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	74fb      	strb	r3, [r7, #19]
 8000efc:	e00b      	b.n	8000f16 <WriteNumTask+0xa2>
		} else
			xTimerReset(xOneShotTimer, 0);
 8000efe:	4b68      	ldr	r3, [pc, #416]	@ (80010a0 <WriteNumTask+0x22c>)
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	f005 fc3b 	bl	800677c <xTaskGetTickCount>
 8000f06:	4602      	mov	r2, r0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4620      	mov	r0, r4
 8000f12:	f006 fa21 	bl	8007358 <xTimerGenericCommand>
		while (1) {
			for (uint8_t i = 0; i < 8; i++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	74bb      	strb	r3, [r7, #18]
 8000f1a:	e091      	b.n	8001040 <WriteNumTask+0x1cc>
				uint16_t COL;
				switch (i) {
 8000f1c:	7cbb      	ldrb	r3, [r7, #18]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d832      	bhi.n	8000f88 <WriteNumTask+0x114>
 8000f22:	a201      	add	r2, pc, #4	@ (adr r2, 8000f28 <WriteNumTask+0xb4>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f49 	.word	0x08000f49
 8000f2c:	08000f51 	.word	0x08000f51
 8000f30:	08000f59 	.word	0x08000f59
 8000f34:	08000f61 	.word	0x08000f61
 8000f38:	08000f69 	.word	0x08000f69
 8000f3c:	08000f71 	.word	0x08000f71
 8000f40:	08000f79 	.word	0x08000f79
 8000f44:	08000f81 	.word	0x08000f81
				case 0:
					COL = GPIO_PIN_8;
 8000f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f4c:	823b      	strh	r3, [r7, #16]
					break;
 8000f4e:	e01b      	b.n	8000f88 <WriteNumTask+0x114>
				case 1:
					COL = GPIO_PIN_9;
 8000f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f54:	823b      	strh	r3, [r7, #16]
					break;
 8000f56:	e017      	b.n	8000f88 <WriteNumTask+0x114>
				case 2:
					COL = GPIO_PIN_10;
 8000f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5c:	823b      	strh	r3, [r7, #16]
					break;
 8000f5e:	e013      	b.n	8000f88 <WriteNumTask+0x114>
				case 3:
					COL = GPIO_PIN_11;
 8000f60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f64:	823b      	strh	r3, [r7, #16]
					break;
 8000f66:	e00f      	b.n	8000f88 <WriteNumTask+0x114>
				case 4:
					COL = GPIO_PIN_12;
 8000f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6c:	823b      	strh	r3, [r7, #16]
					break;
 8000f6e:	e00b      	b.n	8000f88 <WriteNumTask+0x114>
				case 5:
					COL = GPIO_PIN_13;
 8000f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f74:	823b      	strh	r3, [r7, #16]
					break;
 8000f76:	e007      	b.n	8000f88 <WriteNumTask+0x114>
				case 6:
					COL = GPIO_PIN_14;
 8000f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f7c:	823b      	strh	r3, [r7, #16]
					break;
 8000f7e:	e003      	b.n	8000f88 <WriteNumTask+0x114>
				case 7:
					COL = GPIO_PIN_15;
 8000f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f84:	823b      	strh	r3, [r7, #16]
					break;
 8000f86:	bf00      	nop
				}
				HAL_GPIO_WritePin(GPIOE, COL, GPIO_PIN_SET);
 8000f88:	8a3b      	ldrh	r3, [r7, #16]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4845      	ldr	r0, [pc, #276]	@ (80010a4 <WriteNumTask+0x230>)
 8000f90:	f001 fc1e 	bl	80027d0 <HAL_GPIO_WritePin>
				for (uint8_t j = 0; j < 8; j++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e046      	b.n	8001028 <WriteNumTask+0x1b4>
					uint16_t ROW;
					switch (j) {
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d82b      	bhi.n	8000ff8 <WriteNumTask+0x184>
 8000fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa8 <WriteNumTask+0x134>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fc9 	.word	0x08000fc9
 8000fac:	08000fcf 	.word	0x08000fcf
 8000fb0:	08000fd5 	.word	0x08000fd5
 8000fb4:	08000fdb 	.word	0x08000fdb
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	08000fe7 	.word	0x08000fe7
 8000fc0:	08000fed 	.word	0x08000fed
 8000fc4:	08000ff3 	.word	0x08000ff3
					case 0:
						ROW = GPIO_PIN_0;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	81bb      	strh	r3, [r7, #12]
						break;
 8000fcc:	e014      	b.n	8000ff8 <WriteNumTask+0x184>
					case 1:
						ROW = GPIO_PIN_1;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	81bb      	strh	r3, [r7, #12]
						break;
 8000fd2:	e011      	b.n	8000ff8 <WriteNumTask+0x184>
					case 2:
						ROW = GPIO_PIN_2;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	81bb      	strh	r3, [r7, #12]
						break;
 8000fd8:	e00e      	b.n	8000ff8 <WriteNumTask+0x184>
					case 3:
						ROW = GPIO_PIN_3;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	81bb      	strh	r3, [r7, #12]
						break;
 8000fde:	e00b      	b.n	8000ff8 <WriteNumTask+0x184>
					case 4:
						ROW = GPIO_PIN_4;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	81bb      	strh	r3, [r7, #12]
						break;
 8000fe4:	e008      	b.n	8000ff8 <WriteNumTask+0x184>
					case 5:
						ROW = GPIO_PIN_5;
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	81bb      	strh	r3, [r7, #12]
						break;
 8000fea:	e005      	b.n	8000ff8 <WriteNumTask+0x184>
					case 6:
						ROW = GPIO_PIN_6;
 8000fec:	2340      	movs	r3, #64	@ 0x40
 8000fee:	81bb      	strh	r3, [r7, #12]
						break;
 8000ff0:	e002      	b.n	8000ff8 <WriteNumTask+0x184>
					case 7:
						ROW = GPIO_PIN_7;
 8000ff2:	2380      	movs	r3, #128	@ 0x80
 8000ff4:	81bb      	strh	r3, [r7, #12]
						break;
 8000ff6:	bf00      	nop
					}
					if (ptr[j][i] == 1) {
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	441a      	add	r2, r3
 8001000:	7cbb      	ldrb	r3, [r7, #18]
 8001002:	5cd3      	ldrb	r3, [r2, r3]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d106      	bne.n	8001016 <WriteNumTask+0x1a2>
						HAL_GPIO_WritePin(GPIOD, ROW, GPIO_PIN_SET);
 8001008:	89bb      	ldrh	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	4826      	ldr	r0, [pc, #152]	@ (80010a8 <WriteNumTask+0x234>)
 8001010:	f001 fbde 	bl	80027d0 <HAL_GPIO_WritePin>
 8001014:	e005      	b.n	8001022 <WriteNumTask+0x1ae>
					} else {
						HAL_GPIO_WritePin(GPIOD, ROW, GPIO_PIN_RESET);
 8001016:	89bb      	ldrh	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	4619      	mov	r1, r3
 800101c:	4822      	ldr	r0, [pc, #136]	@ (80010a8 <WriteNumTask+0x234>)
 800101e:	f001 fbd7 	bl	80027d0 <HAL_GPIO_WritePin>
				for (uint8_t j = 0; j < 8; j++) {
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9b5      	bls.n	8000f9a <WriteNumTask+0x126>
					}
				}
				HAL_GPIO_WritePin(GPIOE, COL, GPIO_PIN_RESET);
 800102e:	8a3b      	ldrh	r3, [r7, #16]
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	481b      	ldr	r0, [pc, #108]	@ (80010a4 <WriteNumTask+0x230>)
 8001036:	f001 fbcb 	bl	80027d0 <HAL_GPIO_WritePin>
			for (uint8_t i = 0; i < 8; i++) {
 800103a:	7cbb      	ldrb	r3, [r7, #18]
 800103c:	3301      	adds	r3, #1
 800103e:	74bb      	strb	r3, [r7, #18]
 8001040:	7cbb      	ldrb	r3, [r7, #18]
 8001042:	2b07      	cmp	r3, #7
 8001044:	f67f af6a 	bls.w	8000f1c <WriteNumTask+0xa8>
			}
			if (secchk == 1) {
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <WriteNumTask+0x238>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d103      	bne.n	8001058 <WriteNumTask+0x1e4>
				mode = 10;
 8001050:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <WriteNumTask+0x214>)
 8001052:	220a      	movs	r2, #10
 8001054:	701a      	strb	r2, [r3, #0]
				break;
 8001056:	e005      	b.n	8001064 <WriteNumTask+0x1f0>
			}
			if (mode == 9) {
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <WriteNumTask+0x214>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b09      	cmp	r3, #9
 800105e:	d000      	beq.n	8001062 <WriteNumTask+0x1ee>
			for (uint8_t i = 0; i < 8; i++) {
 8001060:	e759      	b.n	8000f16 <WriteNumTask+0xa2>
				break;
 8001062:	bf00      	nop
			}
		}
		if (secchk == 1) {
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <WriteNumTask+0x238>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	f47f af09 	bne.w	8000e80 <WriteNumTask+0xc>
			flag = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	74fb      	strb	r3, [r7, #19]
			xQueueSend(xSecQueue, &num, 0);
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <WriteNumTask+0x23c>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f107 010b 	add.w	r1, r7, #11
 800107a:	2300      	movs	r3, #0
 800107c:	2200      	movs	r2, #0
 800107e:	f004 fac9 	bl	8005614 <xQueueGenericSend>
	while (1) {
 8001082:	e6fd      	b.n	8000e80 <WriteNumTask+0xc>
 8001084:	20000e20 	.word	0x20000e20
 8001088:	20000e34 	.word	0x20000e34
 800108c:	200003c4 	.word	0x200003c4
 8001090:	20000404 	.word	0x20000404
 8001094:	20000444 	.word	0x20000444
 8001098:	20000484 	.word	0x20000484
 800109c:	200004c4 	.word	0x200004c4
 80010a0:	20000e14 	.word	0x20000e14
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	20000e33 	.word	0x20000e33
 80010b0:	20000e24 	.word	0x20000e24

080010b4 <SwitchTask>:
		}
	}
}
void SwitchTask(void *argument) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t scounter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73bb      	strb	r3, [r7, #14]
	uint8_t modefive = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]
	uint8_t cur_dig = 10;
 80010c4:	230a      	movs	r3, #10
 80010c6:	73fb      	strb	r3, [r7, #15]
	while (1) {
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 80010c8:	4b20      	ldr	r3, [pc, #128]	@ (800114c <SwitchTask+0x98>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 fdcd 	bl	8005c70 <xQueueSemaphoreTake>
		if (mode == 5 || mode == 7) {
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <SwitchTask+0x9c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b05      	cmp	r3, #5
 80010dc:	d003      	beq.n	80010e6 <SwitchTask+0x32>
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <SwitchTask+0x9c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b07      	cmp	r3, #7
 80010e4:	d11d      	bne.n	8001122 <SwitchTask+0x6e>
			modefive++;
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	737b      	strb	r3, [r7, #13]
			if (modefive > 9 || cur_dig != dig)
 80010ee:	7b7b      	ldrb	r3, [r7, #13]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d804      	bhi.n	80010fe <SwitchTask+0x4a>
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <SwitchTask+0xa0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d001      	beq.n	8001102 <SwitchTask+0x4e>
				modefive = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	737b      	strb	r3, [r7, #13]
			if (modifychk == 0)
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <SwitchTask+0xa4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d107      	bne.n	800111a <SwitchTask+0x66>
				xQueueSend(xFiveQueue, &modefive, 0);
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <SwitchTask+0xa8>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f107 010d 	add.w	r1, r7, #13
 8001112:	2300      	movs	r3, #0
 8001114:	2200      	movs	r2, #0
 8001116:	f004 fa7d 	bl	8005614 <xQueueGenericSend>
			cur_dig = dig;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <SwitchTask+0xa0>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e013      	b.n	800114a <SwitchTask+0x96>
		} else {
			secchk = 0;
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <SwitchTask+0xac>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
			scounter++;
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	3301      	adds	r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73bb      	strb	r3, [r7, #14]
			if (scounter > 5)
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d901      	bls.n	800113a <SwitchTask+0x86>
				scounter = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	73bb      	strb	r3, [r7, #14]
			xQueueSend(xQueue, &scounter, 0);
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <SwitchTask+0xb0>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f107 010e 	add.w	r1, r7, #14
 8001142:	2300      	movs	r3, #0
 8001144:	2200      	movs	r2, #0
 8001146:	f004 fa65 	bl	8005614 <xQueueGenericSend>
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 800114a:	e7bd      	b.n	80010c8 <SwitchTask+0x14>
 800114c:	20000e10 	.word	0x20000e10
 8001150:	20000e34 	.word	0x20000e34
 8001154:	20000000 	.word	0x20000000
 8001158:	20000e30 	.word	0x20000e30
 800115c:	20000e2c 	.word	0x20000e2c
 8001160:	20000e33 	.word	0x20000e33
 8001164:	20000e20 	.word	0x20000e20

08001168 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	@ 0x50
 800116c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	@ 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f007 f830 	bl	80081dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800118c:	f001 fc8c 	bl	8002aa8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <SystemClock_Config+0xc8>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a26      	ldr	r2, [pc, #152]	@ (8001230 <SystemClock_Config+0xc8>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <SystemClock_Config+0xc8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <SystemClock_Config+0xcc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011b0:	4a20      	ldr	r2, [pc, #128]	@ (8001234 <SystemClock_Config+0xcc>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <SystemClock_Config+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80011dc:	2348      	movs	r3, #72	@ 0x48
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80011e4:	2303      	movs	r3, #3
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fc6b 	bl	8002ac8 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
		Error_Handler();
 80011f8:	f000 fa1a 	bl	8001630 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fef9 	bl	8003010 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xc0>
		Error_Handler();
 8001224:	f000 fa04 	bl	8001630 <Error_Handler>
	}
}
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	@ 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <MX_ETH_Init+0x84>)
 800123e:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <MX_ETH_Init+0x88>)
 8001240:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <MX_ETH_Init+0x8c>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <MX_ETH_Init+0x8c>)
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <MX_ETH_Init+0x8c>)
 8001250:	22e1      	movs	r2, #225	@ 0xe1
 8001252:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_ETH_Init+0x8c>)
 8001256:	2200      	movs	r2, #0
 8001258:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_ETH_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_ETH_Init+0x8c>)
 8001262:	2200      	movs	r2, #0
 8001264:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_ETH_Init+0x84>)
 8001268:	4a16      	ldr	r2, [pc, #88]	@ (80012c4 <MX_ETH_Init+0x8c>)
 800126a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <MX_ETH_Init+0x84>)
 800126e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001272:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_ETH_Init+0x84>)
 8001276:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <MX_ETH_Init+0x90>)
 8001278:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_ETH_Init+0x84>)
 800127c:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_ETH_Init+0x94>)
 800127e:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_ETH_Init+0x84>)
 8001282:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001286:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_ETH_Init+0x84>)
 800128a:	f000 fda7 	bl	8001ddc <HAL_ETH_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ETH_Init+0x60>
		Error_Handler();
 8001294:	f000 f9cc 	bl	8001630 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001298:	2238      	movs	r2, #56	@ 0x38
 800129a:	2100      	movs	r1, #0
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_ETH_Init+0x98>)
 800129e:	f006 ff9d 	bl	80081dc <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_ETH_Init+0x98>)
 80012a4:	2221      	movs	r2, #33	@ 0x21
 80012a6:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_ETH_Init+0x98>)
 80012aa:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80012ae:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <MX_ETH_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200007f8 	.word	0x200007f8
 80012c0:	40028000 	.word	0x40028000
 80012c4:	20000e38 	.word	0x20000e38
 80012c8:	20000704 	.word	0x20000704
 80012cc:	20000664 	.word	0x20000664
 80012d0:	200007c0 	.word	0x200007c0

080012d4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <MX_USART3_UART_Init+0x58>)
 80012da:	4a15      	ldr	r2, [pc, #84]	@ (8001330 <MX_USART3_UART_Init+0x5c>)
 80012dc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <MX_USART3_UART_Init+0x58>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_USART3_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <MX_USART3_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_USART3_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_USART3_UART_Init+0x58>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <MX_USART3_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_USART3_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <MX_USART3_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_USART3_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_USART3_UART_Init+0x58>)
 8001318:	f002 ff96 	bl	8004248 <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001322:	f000 f985 	bl	8001630 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200008a8 	.word	0x200008a8
 8001330:	40004800 	.word	0x40004800

08001334 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001338:	4b14      	ldr	r3, [pc, #80]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800133e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001342:	2206      	movs	r2, #6
 8001344:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001348:	2202      	movs	r2, #2
 800134a:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001354:	2202      	movs	r2, #2
 8001356:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135a:	2201      	movs	r2, #1
 800135c:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	2201      	movs	r2, #1
 800136e:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001378:	f001 fa5c 	bl	8002834 <HAL_PCD_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001382:	f000 f955 	bl	8001630 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000930 	.word	0x20000930

08001390 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b65      	ldr	r3, [pc, #404]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a64      	ldr	r2, [pc, #400]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b62      	ldr	r3, [pc, #392]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	61bb      	str	r3, [r7, #24]
 80013bc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b5f      	ldr	r3, [pc, #380]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a5e      	ldr	r2, [pc, #376]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b5c      	ldr	r3, [pc, #368]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b59      	ldr	r3, [pc, #356]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a58      	ldr	r2, [pc, #352]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b56      	ldr	r3, [pc, #344]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b53      	ldr	r3, [pc, #332]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a52      	ldr	r2, [pc, #328]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b50      	ldr	r3, [pc, #320]	@ (800153c <MX_GPIO_Init+0x1ac>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	4b4d      	ldr	r3, [pc, #308]	@ (800153c <MX_GPIO_Init+0x1ac>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a4c      	ldr	r2, [pc, #304]	@ (800153c <MX_GPIO_Init+0x1ac>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b4a      	ldr	r3, [pc, #296]	@ (800153c <MX_GPIO_Init+0x1ac>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	4b47      	ldr	r3, [pc, #284]	@ (800153c <MX_GPIO_Init+0x1ac>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a46      	ldr	r2, [pc, #280]	@ (800153c <MX_GPIO_Init+0x1ac>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b44      	ldr	r3, [pc, #272]	@ (800153c <MX_GPIO_Init+0x1ac>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001436:	4b41      	ldr	r3, [pc, #260]	@ (800153c <MX_GPIO_Init+0x1ac>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a40      	ldr	r2, [pc, #256]	@ (800153c <MX_GPIO_Init+0x1ac>)
 800143c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b3e      	ldr	r3, [pc, #248]	@ (800153c <MX_GPIO_Init+0x1ac>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001454:	483a      	ldr	r0, [pc, #232]	@ (8001540 <MX_GPIO_Init+0x1b0>)
 8001456:	f001 f9bb 	bl	80027d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001460:	4838      	ldr	r0, [pc, #224]	@ (8001544 <MX_GPIO_Init+0x1b4>)
 8001462:	f001 f9b5 	bl	80027d0 <HAL_GPIO_WritePin>
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001466:	2200      	movs	r2, #0
 8001468:	2140      	movs	r1, #64	@ 0x40
 800146a:	4837      	ldr	r0, [pc, #220]	@ (8001548 <MX_GPIO_Init+0x1b8>)
 800146c:	f001 f9b0 	bl	80027d0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001470:	2200      	movs	r2, #0
 8001472:	21ff      	movs	r1, #255	@ 0xff
 8001474:	4835      	ldr	r0, [pc, #212]	@ (800154c <MX_GPIO_Init+0x1bc>)
 8001476:	f001 f9ab 	bl	80027d0 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001480:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001484:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	482f      	ldr	r0, [pc, #188]	@ (8001550 <MX_GPIO_Init+0x1c0>)
 8001492:	f000 fff1 	bl	8002478 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001496:	f244 0381 	movw	r3, #16513	@ 0x4081
 800149a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4824      	ldr	r0, [pc, #144]	@ (8001540 <MX_GPIO_Init+0x1b0>)
 80014b0:	f000 ffe2 	bl	8002478 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE8 PE9 PE10 PE11
	 PE12 PE13 PE14 PE15 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 80014b4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80014b8:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	481d      	ldr	r0, [pc, #116]	@ (8001544 <MX_GPIO_Init+0x1b4>)
 80014ce:	f000 ffd3 	bl	8002478 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014d2:	2340      	movs	r3, #64	@ 0x40
 80014d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4817      	ldr	r0, [pc, #92]	@ (8001548 <MX_GPIO_Init+0x1b8>)
 80014ea:	f000 ffc5 	bl	8002478 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014ee:	2380      	movs	r3, #128	@ 0x80
 80014f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4811      	ldr	r0, [pc, #68]	@ (8001548 <MX_GPIO_Init+0x1b8>)
 8001502:	f000 ffb9 	bl	8002478 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 PD5 PD6 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8001506:	23ff      	movs	r3, #255	@ 0xff
 8001508:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	@ (800154c <MX_GPIO_Init+0x1bc>)
 800151e:	f000 ffab 	bl	8002478 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2105      	movs	r1, #5
 8001526:	2028      	movs	r0, #40	@ 0x28
 8001528:	f000 fc2e 	bl	8001d88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800152c:	2028      	movs	r0, #40	@ 0x28
 800152e:	f000 fc47 	bl	8001dc0 <HAL_NVIC_EnableIRQ>
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	@ 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400
 8001544:	40021000 	.word	0x40021000
 8001548:	40021800 	.word	0x40021800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40020800 	.word	0x40020800

08001554 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
	static uint32_t pre_itr_t = 0;
	uint32_t cur_itr_t = HAL_GetTick();
 800155e:	f000 fb2b 	bl	8001bb8 <HAL_GetTick>
 8001562:	60f8      	str	r0, [r7, #12]
	if ((cur_itr_t - pre_itr_t > 80)) {
 8001564:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b50      	cmp	r3, #80	@ 0x50
 800156e:	d93b      	bls.n	80015e8 <HAL_GPIO_EXTI_Callback+0x94>
		shift_count = 0;
 8001570:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <HAL_GPIO_EXTI_Callback+0xa8>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
		moving_point = 0;
 8001576:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <HAL_GPIO_EXTI_Callback+0xac>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
		switch (mode) {
 800157c:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_GPIO_EXTI_Callback+0xb0>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b08      	cmp	r3, #8
 8001582:	d830      	bhi.n	80015e6 <HAL_GPIO_EXTI_Callback+0x92>
 8001584:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <HAL_GPIO_EXTI_Callback+0x38>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	080015b1 	.word	0x080015b1
 8001590:	080015e7 	.word	0x080015e7
 8001594:	080015e7 	.word	0x080015e7
 8001598:	080015e7 	.word	0x080015e7
 800159c:	080015e7 	.word	0x080015e7
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015bf 	.word	0x080015bf
 80015a8:	080015e7 	.word	0x080015e7
 80015ac:	080015d3 	.word	0x080015d3
		case 0:
		case 5:
			xSemaphoreGiveFromISR(xCountingSemaphore, NULL);
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 f9d9 	bl	800596e <xQueueGiveFromISR>
			break;
 80015bc:	e014      	b.n	80015e8 <HAL_GPIO_EXTI_Callback+0x94>
		case 6:
			mode = 7;
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_GPIO_EXTI_Callback+0xb0>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveFromISR(xCountingSemaphore, NULL);
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 f9cf 	bl	800596e <xQueueGiveFromISR>
			break;
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_EXTI_Callback+0x94>
		case 8:
			mode = 9;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_GPIO_EXTI_Callback+0xb0>)
 80015d4:	2209      	movs	r2, #9
 80015d6:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveFromISR(xCountingSemaphore, NULL);
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_GPIO_EXTI_Callback+0xb4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 f9c5 	bl	800596e <xQueueGiveFromISR>
			break;
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_EXTI_Callback+0x94>
		default:
			break;
 80015e6:	bf00      	nop
		}
	}
	pre_itr_t = cur_itr_t;
 80015e8:	4a03      	ldr	r2, [pc, #12]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000e40 	.word	0x20000e40
 80015fc:	20000e32 	.word	0x20000e32
 8001600:	20000e31 	.word	0x20000e31
 8001604:	20000e34 	.word	0x20000e34
 8001608:	20000e10 	.word	0x20000e10

0800160c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800161e:	f000 fab7 	bl	8001b90 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40000800 	.word	0x40000800

08001630 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a10      	ldr	r2, [pc, #64]	@ (8001688 <HAL_MspInit+0x4c>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	210f      	movs	r1, #15
 8001676:	f06f 0001 	mvn.w	r0, #1
 800167a:	f000 fb85 	bl	8001d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	@ 0x38
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	@ (80017e4 <HAL_ETH_MspInit+0x158>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	f040 8096 	bne.w	80017dc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80016b0:	4b4d      	ldr	r3, [pc, #308]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	4a4c      	ldr	r2, [pc, #304]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80016bc:	4b4a      	ldr	r3, [pc, #296]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	623b      	str	r3, [r7, #32]
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016cc:	4a46      	ldr	r2, [pc, #280]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d4:	4b44      	ldr	r3, [pc, #272]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e4:	4a40      	ldr	r2, [pc, #256]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ec:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f8:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fc:	4a3a      	ldr	r2, [pc, #232]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6313      	str	r3, [r2, #48]	@ 0x30
 8001704:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	4a34      	ldr	r2, [pc, #208]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6313      	str	r3, [r2, #48]	@ 0x30
 800171c:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	4a2e      	ldr	r2, [pc, #184]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	6313      	str	r3, [r2, #48]	@ 0x30
 8001734:	4b2c      	ldr	r3, [pc, #176]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001740:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 8001746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174a:	6313      	str	r3, [r2, #48]	@ 0x30
 800174c:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <HAL_ETH_MspInit+0x15c>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001758:	2332      	movs	r3, #50	@ 0x32
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001768:	230b      	movs	r3, #11
 800176a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	481e      	ldr	r0, [pc, #120]	@ (80017ec <HAL_ETH_MspInit+0x160>)
 8001774:	f000 fe80 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001778:	2386      	movs	r3, #134	@ 0x86
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001788:	230b      	movs	r3, #11
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4817      	ldr	r0, [pc, #92]	@ (80017f0 <HAL_ETH_MspInit+0x164>)
 8001794:	f000 fe70 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001798:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017aa:	230b      	movs	r3, #11
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	480f      	ldr	r0, [pc, #60]	@ (80017f4 <HAL_ETH_MspInit+0x168>)
 80017b6:	f000 fe5f 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017ba:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017cc:	230b      	movs	r3, #11
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <HAL_ETH_MspInit+0x16c>)
 80017d8:	f000 fe4e 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80017dc:	bf00      	nop
 80017de:	3738      	adds	r7, #56	@ 0x38
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40028000 	.word	0x40028000
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40021800 	.word	0x40021800

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0aa      	sub	sp, #168	@ 0xa8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2284      	movs	r2, #132	@ 0x84
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f006 fcdd 	bl	80081dc <memset>
  if(huart->Instance==USART3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a22      	ldr	r2, [pc, #136]	@ (80018b0 <HAL_UART_MspInit+0xb4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d13c      	bne.n	80018a6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800182c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001830:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001832:	2300      	movs	r3, #0
 8001834:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f001 fe40 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001846:	f7ff fef3 	bl	8001630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800184a:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <HAL_UART_MspInit+0xb8>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	4a19      	ldr	r2, [pc, #100]	@ (80018b4 <HAL_UART_MspInit+0xb8>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_UART_MspInit+0xb8>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <HAL_UART_MspInit+0xb8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <HAL_UART_MspInit+0xb8>)
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_UART_MspInit+0xb8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800187a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800187e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001888:	2301      	movs	r3, #1
 800188a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001894:	2307      	movs	r3, #7
 8001896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_UART_MspInit+0xbc>)
 80018a2:	f000 fde9 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80018a6:	bf00      	nop
 80018a8:	37a8      	adds	r7, #168	@ 0xa8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40004800 	.word	0x40004800
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020c00 	.word	0x40020c00

080018bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ac      	sub	sp, #176	@ 0xb0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	2284      	movs	r2, #132	@ 0x84
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f006 fc7d 	bl	80081dc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ea:	d159      	bne.n	80019a0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80018ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fddf 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001908:	f7ff fe92 	bl	8001630 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	@ 0x30
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001924:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001928:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800193e:	230a      	movs	r3, #10
 8001940:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001948:	4619      	mov	r1, r3
 800194a:	4818      	ldr	r0, [pc, #96]	@ (80019ac <HAL_PCD_MspInit+0xf0>)
 800194c:	f000 fd94 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001968:	4619      	mov	r1, r3
 800196a:	4810      	ldr	r0, [pc, #64]	@ (80019ac <HAL_PCD_MspInit+0xf0>)
 800196c:	f000 fd84 	bl	8002478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 8001972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001974:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 8001976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800197a:	6353      	str	r3, [r2, #52]	@ 0x34
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 800197e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 800198e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001992:	6453      	str	r3, [r2, #68]	@ 0x44
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <HAL_PCD_MspInit+0xec>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80019a0:	bf00      	nop
 80019a2:	37b0      	adds	r7, #176	@ 0xb0
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08e      	sub	sp, #56	@ 0x38
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80019c0:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <HAL_InitTick+0xe0>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	4a32      	ldr	r2, [pc, #200]	@ (8001a90 <HAL_InitTick+0xe0>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80019cc:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <HAL_InitTick+0xe0>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d8:	f107 0210 	add.w	r2, r7, #16
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4611      	mov	r1, r2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 fd3a 	bl	800345c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f2:	f001 fd0b 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 80019f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80019f8:	e004      	b.n	8001a04 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019fa:	f001 fd07 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 80019fe:	4603      	mov	r3, r0
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a06:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <HAL_InitTick+0xe4>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9b      	lsrs	r3, r3, #18
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a14:	4a21      	ldr	r2, [pc, #132]	@ (8001a9c <HAL_InitTick+0xec>)
 8001a16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a1e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a24:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001a38:	4817      	ldr	r0, [pc, #92]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a3a:	f002 f931 	bl	8003ca0 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d11b      	bne.n	8001a84 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001a4c:	4812      	ldr	r0, [pc, #72]	@ (8001a98 <HAL_InitTick+0xe8>)
 8001a4e:	f002 f989 	bl	8003d64 <HAL_TIM_Base_Start_IT>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a60:	201e      	movs	r0, #30
 8001a62:	f000 f9ad 	bl	8001dc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d808      	bhi.n	8001a7e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	201e      	movs	r0, #30
 8001a72:	f000 f989 	bl	8001d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <HAL_InitTick+0xf0>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	e002      	b.n	8001a84 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3738      	adds	r7, #56	@ 0x38
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	431bde83 	.word	0x431bde83
 8001a98:	20000e44 	.word	0x20000e44
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	20000608 	.word	0x20000608

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <NMI_Handler+0x4>

08001aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <MemManage_Handler+0x4>

08001abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <TIM4_IRQHandler+0x10>)
 8001ae2:	f002 f9b7 	bl	8003e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000e44 	.word	0x20000e44

08001af0 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI15_10_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001af4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001af8:	f000 fe84 	bl	8002804 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f006 fba1 	bl	8008298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7fe fcd3 	bl	8000500 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 8001b68:	08008464 	.word	0x08008464
  ldr r2, =_sbss
 8001b6c:	200007a4 	.word	0x200007a4
  ldr r4, =_ebss
 8001b70:	200059b0 	.word	0x200059b0

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>

08001b76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	f000 f8f9 	bl	8001d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b80:	200f      	movs	r0, #15
 8001b82:	f7ff ff15 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b86:	f7ff fd59 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_IncTick+0x20>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_IncTick+0x24>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <HAL_IncTick+0x24>)
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000060c 	.word	0x2000060c
 8001bb4:	20000e90 	.word	0x20000e90

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000e90 	.word	0x20000e90

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff ffee 	bl	8001bb8 <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffde 	bl	8001bb8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000060c 	.word	0x2000060c

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <__NVIC_SetPriorityGrouping+0x40>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <__NVIC_SetPriorityGrouping+0x40>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00
 8001c5c:	05fa0000 	.word	0x05fa0000

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	@ (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	@ (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ff4c 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9a:	f7ff ff61 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	6978      	ldr	r0, [r7, #20]
 8001da6:	f7ff ffb1 	bl	8001d0c <NVIC_EncodePriority>
 8001daa:	4602      	mov	r2, r0
 8001dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff80 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff54 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e086      	b.n	8001efc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2223      	movs	r2, #35	@ 0x23
 8001dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff fc43 	bl	800168c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b3f      	ldr	r3, [pc, #252]	@ (8001f04 <HAL_ETH_Init+0x128>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f04 <HAL_ETH_Init+0x128>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b3c      	ldr	r3, [pc, #240]	@ (8001f04 <HAL_ETH_Init+0x128>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a39      	ldr	r2, [pc, #228]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e28:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e2a:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e38:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <HAL_ETH_Init+0x12c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e54:	f7ff feb0 	bl	8001bb8 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e5a:	e011      	b.n	8001e80 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e5c:	f7ff feac 	bl	8001bb8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e6a:	d909      	bls.n	8001e80 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2204      	movs	r2, #4
 8001e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	22e0      	movs	r2, #224	@ 0xe0
 8001e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e03d      	b.n	8001efc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e4      	bne.n	8001e5c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f97a 	bl	800218c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fa25 	bl	80022e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fa7b 	bl	800239a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2100      	movs	r1, #0
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f9e3 	bl	8002278 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <HAL_ETH_Init+0x130>)
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001ee6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	00020060 	.word	0x00020060

08001f10 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <ETH_SetMACConfig+0x164>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	7b9b      	ldrb	r3, [r3, #14]
 8001f2e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	7c12      	ldrb	r2, [r2, #16]
 8001f34:	2a00      	cmp	r2, #0
 8001f36:	d102      	bne.n	8001f3e <ETH_SetMACConfig+0x2e>
 8001f38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f3c:	e000      	b.n	8001f40 <ETH_SetMACConfig+0x30>
 8001f3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	7c52      	ldrb	r2, [r2, #17]
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d102      	bne.n	8001f50 <ETH_SetMACConfig+0x40>
 8001f4a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f4e:	e000      	b.n	8001f52 <ETH_SetMACConfig+0x42>
 8001f50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	7fdb      	ldrb	r3, [r3, #31]
 8001f5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	7f92      	ldrb	r2, [r2, #30]
 8001f6c:	2a00      	cmp	r2, #0
 8001f6e:	d102      	bne.n	8001f76 <ETH_SetMACConfig+0x66>
 8001f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f74:	e000      	b.n	8001f78 <ETH_SetMACConfig+0x68>
 8001f76:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	7f1b      	ldrb	r3, [r3, #28]
 8001f7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d102      	bne.n	8001fa0 <ETH_SetMACConfig+0x90>
 8001f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9e:	e000      	b.n	8001fa2 <ETH_SetMACConfig+0x92>
 8001fa0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7bdb      	ldrb	r3, [r3, #15]
 8001fa8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001faa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fb8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7ff fdfc 	bl	8001bd0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d101      	bne.n	8002006 <ETH_SetMACConfig+0xf6>
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	e000      	b.n	8002008 <ETH_SetMACConfig+0xf8>
 8002006:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002008:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800200e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002016:	2a01      	cmp	r2, #1
 8002018:	d101      	bne.n	800201e <ETH_SetMACConfig+0x10e>
 800201a:	2208      	movs	r2, #8
 800201c:	e000      	b.n	8002020 <ETH_SetMACConfig+0x110>
 800201e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002020:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002028:	2a01      	cmp	r2, #1
 800202a:	d101      	bne.n	8002030 <ETH_SetMACConfig+0x120>
 800202c:	2204      	movs	r2, #4
 800202e:	e000      	b.n	8002032 <ETH_SetMACConfig+0x122>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002032:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800203a:	2a01      	cmp	r2, #1
 800203c:	d101      	bne.n	8002042 <ETH_SetMACConfig+0x132>
 800203e:	2202      	movs	r2, #2
 8002040:	e000      	b.n	8002044 <ETH_SetMACConfig+0x134>
 8002042:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002044:	4313      	orrs	r3, r2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff fdb7 	bl	8001bd0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	fd20810f 	.word	0xfd20810f

08002078 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4b3d      	ldr	r3, [pc, #244]	@ (8002188 <ETH_SetDMAConfig+0x110>)
 8002092:	4013      	ands	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <ETH_SetDMAConfig+0x2c>
 800209e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020a2:	e000      	b.n	80020a6 <ETH_SetDMAConfig+0x2e>
 80020a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7b5b      	ldrb	r3, [r3, #13]
 80020aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	7f52      	ldrb	r2, [r2, #29]
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d102      	bne.n	80020bc <ETH_SetDMAConfig+0x44>
 80020b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020ba:	e000      	b.n	80020be <ETH_SetDMAConfig+0x46>
 80020bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	7b9b      	ldrb	r3, [r3, #14]
 80020c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7f1b      	ldrb	r3, [r3, #28]
 80020d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	7f9b      	ldrb	r3, [r3, #30]
 80020da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ec:	4313      	orrs	r3, r2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff fd5e 	bl	8001bd0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800212c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002132:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002138:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002140:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002142:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800214a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002150:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800215a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800215e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800216c:	2001      	movs	r0, #1
 800216e:	f7ff fd2f 	bl	8001bd0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	f8de3f23 	.word	0xf8de3f23

0800218c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0a6      	sub	sp, #152	@ 0x98
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80021bc:	2301      	movs	r3, #1
 80021be:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021ce:	2300      	movs	r3, #0
 80021d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002206:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800220a:	4619      	mov	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fe7f 	bl	8001f10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002216:	2301      	movs	r3, #1
 8002218:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800221a:	2301      	movs	r3, #1
 800221c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002220:	2301      	movs	r3, #1
 8002222:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800223e:	2301      	movs	r3, #1
 8002240:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002246:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002248:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800224c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800224e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002252:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800225a:	2300      	movs	r3, #0
 800225c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff05 	bl	8002078 <ETH_SetDMAConfig>
}
 800226e:	bf00      	nop
 8002270:	3798      	adds	r7, #152	@ 0x98
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3305      	adds	r3, #5
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	3204      	adds	r2, #4
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <ETH_MACAddressConfig+0x68>)
 800229a:	4413      	add	r3, r2
 800229c:	461a      	mov	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3303      	adds	r3, #3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	061a      	lsls	r2, r3, #24
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3302      	adds	r3, #2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3301      	adds	r3, #1
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	4313      	orrs	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <ETH_MACAddressConfig+0x6c>)
 80022ca:	4413      	add	r3, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	6013      	str	r3, [r2, #0]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40028040 	.word	0x40028040
 80022e4:	40028044 	.word	0x40028044

080022e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e03e      	b.n	8002374 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	3206      	adds	r2, #6
 8002328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d80c      	bhi.n	8002358 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	461a      	mov	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	e004      	b.n	8002362 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3301      	adds	r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d9bd      	bls.n	80022f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800238c:	611a      	str	r2, [r3, #16]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e048      	b.n	800243a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6919      	ldr	r1, [r3, #16]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2200      	movs	r2, #0
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80023e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	3212      	adds	r2, #18
 8002406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d80c      	bhi.n	800242a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6919      	ldr	r1, [r3, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	e004      	b.n	8002434 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d9b3      	bls.n	80023a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246a:	60da      	str	r2, [r3, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e175      	b.n	8002784 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8164 	bne.w	800277e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x56>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80be 	beq.w	800277e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	4b66      	ldr	r3, [pc, #408]	@ (800279c <HAL_GPIO_Init+0x324>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a65      	ldr	r2, [pc, #404]	@ (800279c <HAL_GPIO_Init+0x324>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b63      	ldr	r3, [pc, #396]	@ (800279c <HAL_GPIO_Init+0x324>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800261a:	4a61      	ldr	r2, [pc, #388]	@ (80027a0 <HAL_GPIO_Init+0x328>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <HAL_GPIO_Init+0x32c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d037      	beq.n	80026b6 <HAL_GPIO_Init+0x23e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a57      	ldr	r2, [pc, #348]	@ (80027a8 <HAL_GPIO_Init+0x330>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_GPIO_Init+0x23a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a56      	ldr	r2, [pc, #344]	@ (80027ac <HAL_GPIO_Init+0x334>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x236>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a55      	ldr	r2, [pc, #340]	@ (80027b0 <HAL_GPIO_Init+0x338>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x232>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a54      	ldr	r2, [pc, #336]	@ (80027b4 <HAL_GPIO_Init+0x33c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x22e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a53      	ldr	r2, [pc, #332]	@ (80027b8 <HAL_GPIO_Init+0x340>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x22a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	@ (80027bc <HAL_GPIO_Init+0x344>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x226>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a51      	ldr	r2, [pc, #324]	@ (80027c0 <HAL_GPIO_Init+0x348>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x222>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a50      	ldr	r2, [pc, #320]	@ (80027c4 <HAL_GPIO_Init+0x34c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x21e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4f      	ldr	r2, [pc, #316]	@ (80027c8 <HAL_GPIO_Init+0x350>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x21a>
 800268e:	2309      	movs	r3, #9
 8002690:	e012      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 8002692:	230a      	movs	r3, #10
 8002694:	e010      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 8002696:	2308      	movs	r3, #8
 8002698:	e00e      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 800269a:	2307      	movs	r3, #7
 800269c:	e00c      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00a      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x240>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026c8:	4935      	ldr	r1, [pc, #212]	@ (80027a0 <HAL_GPIO_Init+0x328>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <HAL_GPIO_Init+0x354>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fa:	4a34      	ldr	r2, [pc, #208]	@ (80027cc <HAL_GPIO_Init+0x354>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b32      	ldr	r3, [pc, #200]	@ (80027cc <HAL_GPIO_Init+0x354>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002724:	4a29      	ldr	r2, [pc, #164]	@ (80027cc <HAL_GPIO_Init+0x354>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272a:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_GPIO_Init+0x354>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274e:	4a1f      	ldr	r2, [pc, #124]	@ (80027cc <HAL_GPIO_Init+0x354>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_GPIO_Init+0x354>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002778:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <HAL_GPIO_Init+0x354>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f ae86 	bls.w	8002498 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	@ 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021800 	.word	0x40021800
 80027c0:	40021c00 	.word	0x40021c00
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022400 	.word	0x40022400
 80027cc:	40013c00 	.word	0x40013c00

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281a:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fe96 	bl	8001554 <HAL_GPIO_EXTI_Callback>
  }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e108      	b.n	8002a58 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff f82b 	bl	80018bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002874:	d102      	bne.n	800287c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f002 f9b7 	bl	8004bf4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7c1a      	ldrb	r2, [r3, #16]
 800288e:	f88d 2000 	strb.w	r2, [sp]
 8002892:	3304      	adds	r3, #4
 8002894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002896:	f002 f953 	bl	8004b40 <USB_CoreInit>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0d5      	b.n	8002a58 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 f9af 	bl	8004c16 <USB_SetCurrentMode>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0c6      	b.n	8002a58 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	e04a      	b.n	8002966 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3315      	adds	r3, #21
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3314      	adds	r3, #20
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	b298      	uxth	r0, r3
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	332e      	adds	r3, #46	@ 0x2e
 800290c:	4602      	mov	r2, r0
 800290e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3318      	adds	r3, #24
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	331c      	adds	r3, #28
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	3320      	adds	r3, #32
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3324      	adds	r3, #36	@ 0x24
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	3301      	adds	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	791b      	ldrb	r3, [r3, #4]
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	429a      	cmp	r2, r3
 800296e:	d3af      	bcc.n	80028d0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e044      	b.n	8002a00 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	3301      	adds	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	791b      	ldrb	r3, [r3, #4]
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d3b5      	bcc.n	8002976 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7c1a      	ldrb	r2, [r3, #16]
 8002a12:	f88d 2000 	strb.w	r2, [sp]
 8002a16:	3304      	adds	r3, #4
 8002a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a1a:	f002 f949 	bl	8004cb0 <USB_DevInit>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e013      	b.n	8002a58 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7b1b      	ldrb	r3, [r3, #12]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d102      	bne.n	8002a4c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f80a 	bl	8002a60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fb04 	bl	800505e <USB_DevDisconnect>

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a8e:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	10000003 	.word	0x10000003

08002aa8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aac:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab6:	6013      	str	r3, [r2, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40007000 	.word	0x40007000

08002ac8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e291      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8087 	beq.w	8002bfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aec:	4b96      	ldr	r3, [pc, #600]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d00c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af8:	4b93      	ldr	r3, [pc, #588]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d112      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62>
 8002b04:	4b90      	ldr	r3, [pc, #576]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b10:	d10b      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b12:	4b8d      	ldr	r3, [pc, #564]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d06c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x130>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d168      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e26b      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x7a>
 8002b34:	4b84      	ldr	r3, [pc, #528]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a83      	ldr	r2, [pc, #524]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e02e      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x9c>
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b7c      	ldr	r3, [pc, #496]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0xc0>
 8002b6e:	4b76      	ldr	r3, [pc, #472]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a75      	ldr	r2, [pc, #468]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b73      	ldr	r3, [pc, #460]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a72      	ldr	r2, [pc, #456]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd8>
 8002b88:	4b6f      	ldr	r3, [pc, #444]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b6c      	ldr	r3, [pc, #432]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a6b      	ldr	r2, [pc, #428]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f806 	bl	8001bb8 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7ff f802 	bl	8001bb8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	@ 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e21f      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b61      	ldr	r3, [pc, #388]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xe8>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fff2 	bl	8001bb8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7fe ffee 	bl	8001bb8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	@ 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e20b      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	4b57      	ldr	r3, [pc, #348]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x110>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d069      	beq.n	8002cda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c06:	4b50      	ldr	r3, [pc, #320]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b4d      	ldr	r3, [pc, #308]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d11c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x190>
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	4b47      	ldr	r3, [pc, #284]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x17a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1df      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b41      	ldr	r3, [pc, #260]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	493d      	ldr	r1, [pc, #244]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	e040      	b.n	8002cda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d023      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a38      	ldr	r2, [pc, #224]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe ffa4 	bl	8001bb8 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c74:	f7fe ffa0 	bl	8001bb8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1bd      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b30      	ldr	r3, [pc, #192]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4929      	ldr	r1, [pc, #164]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
 8002ca6:	e018      	b.n	8002cda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca8:	4b27      	ldr	r3, [pc, #156]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a26      	ldr	r2, [pc, #152]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe ff80 	bl	8001bb8 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe ff7c 	bl	8001bb8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e199      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d038      	beq.n	8002d58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d019      	beq.n	8002d22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf2:	4a15      	ldr	r2, [pc, #84]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7fe ff5d 	bl	8001bb8 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe ff59 	bl	8001bb8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e176      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d14:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x23a>
 8002d20:	e01a      	b.n	8002d58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d22:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002d24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <HAL_RCC_OscConfig+0x280>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2e:	f7fe ff43 	bl	8001bb8 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d36:	f7fe ff3f 	bl	8001bb8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d903      	bls.n	8002d4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e15c      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
 8002d48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	4b91      	ldr	r3, [pc, #580]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ee      	bne.n	8002d36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a4 	beq.w	8002eae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b8b      	ldr	r3, [pc, #556]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	4b88      	ldr	r3, [pc, #544]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	4a87      	ldr	r2, [pc, #540]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7e:	4b85      	ldr	r3, [pc, #532]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8e:	4b82      	ldr	r3, [pc, #520]	@ (8002f98 <HAL_RCC_OscConfig+0x4d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f98 <HAL_RCC_OscConfig+0x4d0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f98 <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe ff07 	bl	8001bb8 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe ff03 	bl	8001bb8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	@ 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e120      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc0:	4b75      	ldr	r3, [pc, #468]	@ (8002f98 <HAL_RCC_OscConfig+0x4d0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x31a>
 8002dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd8:	4a6e      	ldr	r2, [pc, #440]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de0:	e02d      	b.n	8002e3e <HAL_RCC_OscConfig+0x376>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x33c>
 8002dea:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	4a69      	ldr	r2, [pc, #420]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df6:	4b67      	ldr	r3, [pc, #412]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	4a66      	ldr	r2, [pc, #408]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e02:	e01c      	b.n	8002e3e <HAL_RCC_OscConfig+0x376>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x35e>
 8002e0c:	4b61      	ldr	r3, [pc, #388]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e10:	4a60      	ldr	r2, [pc, #384]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e18:	4b5e      	ldr	r3, [pc, #376]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e24:	e00b      	b.n	8002e3e <HAL_RCC_OscConfig+0x376>
 8002e26:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	4a5a      	ldr	r2, [pc, #360]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e32:	4b58      	ldr	r3, [pc, #352]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	4a57      	ldr	r2, [pc, #348]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe feb7 	bl	8001bb8 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe feb3 	bl	8001bb8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0ce      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b4b      	ldr	r3, [pc, #300]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCC_OscConfig+0x386>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fea1 	bl	8001bb8 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fe9d 	bl	8001bb8 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0b8      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	4b40      	ldr	r3, [pc, #256]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	4a3b      	ldr	r2, [pc, #236]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80a4 	beq.w	8003000 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb8:	4b36      	ldr	r3, [pc, #216]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d06b      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d149      	bne.n	8002f60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a30      	ldr	r2, [pc, #192]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fe6e 	bl	8001bb8 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe fe6a 	bl	8001bb8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e087      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	4b28      	ldr	r3, [pc, #160]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	019b      	lsls	r3, r3, #6
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	3b01      	subs	r3, #1
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	4313      	orrs	r3, r2
 8002f24:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b19      	ldr	r3, [pc, #100]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fe3e 	bl	8001bb8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe fe3a 	bl	8001bb8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e057      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x478>
 8002f5e:	e04f      	b.n	8003000 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0b      	ldr	r2, [pc, #44]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fe24 	bl	8001bb8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fe20 	bl	8001bb8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e03d      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b03      	ldr	r3, [pc, #12]	@ (8002f94 <HAL_RCC_OscConfig+0x4cc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4ac>
 8002f92:	e035      	b.n	8003000 <HAL_RCC_OscConfig+0x538>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x544>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d028      	beq.n	8002ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d121      	bne.n	8002ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11a      	bne.n	8002ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0d0      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b6a      	ldr	r3, [pc, #424]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d910      	bls.n	8003058 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b67      	ldr	r3, [pc, #412]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 020f 	bic.w	r2, r3, #15
 800303e:	4965      	ldr	r1, [pc, #404]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b63      	ldr	r3, [pc, #396]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0b8      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003070:	4b59      	ldr	r3, [pc, #356]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a58      	ldr	r2, [pc, #352]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800307a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003088:	4b53      	ldr	r3, [pc, #332]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a52      	ldr	r2, [pc, #328]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 800308e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003092:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b50      	ldr	r3, [pc, #320]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	494d      	ldr	r1, [pc, #308]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d040      	beq.n	8003134 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b47      	ldr	r3, [pc, #284]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d115      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b41      	ldr	r3, [pc, #260]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e073      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3d      	ldr	r3, [pc, #244]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06b      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b39      	ldr	r3, [pc, #228]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4936      	ldr	r1, [pc, #216]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe fd58 	bl	8001bb8 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7fe fd54 	bl	8001bb8 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e053      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d210      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 020f 	bic.w	r2, r3, #15
 800314a:	4922      	ldr	r1, [pc, #136]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e032      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4916      	ldr	r1, [pc, #88]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800318e:	4b12      	ldr	r3, [pc, #72]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	490e      	ldr	r1, [pc, #56]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031a2:	f000 f821 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	490a      	ldr	r1, [pc, #40]	@ (80031dc <HAL_RCC_ClockConfig+0x1cc>)
 80031b4:	5ccb      	ldrb	r3, [r1, r3]
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	4a09      	ldr	r2, [pc, #36]	@ (80031e0 <HAL_RCC_ClockConfig+0x1d0>)
 80031bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031be:	4b09      	ldr	r3, [pc, #36]	@ (80031e4 <HAL_RCC_ClockConfig+0x1d4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fbf4 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00
 80031d8:	40023800 	.word	0x40023800
 80031dc:	0800843c 	.word	0x0800843c
 80031e0:	20000604 	.word	0x20000604
 80031e4:	20000608 	.word	0x20000608

080031e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b094      	sub	sp, #80	@ 0x50
 80031ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f4:	2300      	movs	r3, #0
 80031f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031f8:	2300      	movs	r3, #0
 80031fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003200:	4b79      	ldr	r3, [pc, #484]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	d00d      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x40>
 800320c:	2b08      	cmp	r3, #8
 800320e:	f200 80e1 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x34>
 8003216:	2b04      	cmp	r3, #4
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x3a>
 800321a:	e0db      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b73      	ldr	r3, [pc, #460]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x204>)
 800321e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003220:	e0db      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003222:	4b73      	ldr	r3, [pc, #460]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003226:	e0d8      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003228:	4b6f      	ldr	r3, [pc, #444]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003230:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003232:	4b6d      	ldr	r3, [pc, #436]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323e:	4b6a      	ldr	r3, [pc, #424]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	2200      	movs	r2, #0
 8003246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003248:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003250:	633b      	str	r3, [r7, #48]	@ 0x30
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	@ 0x34
 8003256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800325a:	4622      	mov	r2, r4
 800325c:	462b      	mov	r3, r5
 800325e:	f04f 0000 	mov.w	r0, #0
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	0159      	lsls	r1, r3, #5
 8003268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800326c:	0150      	lsls	r0, r2, #5
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4621      	mov	r1, r4
 8003274:	1a51      	subs	r1, r2, r1
 8003276:	6139      	str	r1, [r7, #16]
 8003278:	4629      	mov	r1, r5
 800327a:	eb63 0301 	sbc.w	r3, r3, r1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800328c:	4659      	mov	r1, fp
 800328e:	018b      	lsls	r3, r1, #6
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003296:	4651      	mov	r1, sl
 8003298:	018a      	lsls	r2, r1, #6
 800329a:	4651      	mov	r1, sl
 800329c:	ebb2 0801 	subs.w	r8, r2, r1
 80032a0:	4659      	mov	r1, fp
 80032a2:	eb63 0901 	sbc.w	r9, r3, r1
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ba:	4690      	mov	r8, r2
 80032bc:	4699      	mov	r9, r3
 80032be:	4623      	mov	r3, r4
 80032c0:	eb18 0303 	adds.w	r3, r8, r3
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	462b      	mov	r3, r5
 80032c8:	eb49 0303 	adc.w	r3, r9, r3
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032da:	4629      	mov	r1, r5
 80032dc:	024b      	lsls	r3, r1, #9
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032e4:	4621      	mov	r1, r4
 80032e6:	024a      	lsls	r2, r1, #9
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ee:	2200      	movs	r2, #0
 80032f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032f8:	f7fc ff8a 	bl	8000210 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003304:	e058      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003306:	4b38      	ldr	r3, [pc, #224]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	2200      	movs	r2, #0
 800330e:	4618      	mov	r0, r3
 8003310:	4611      	mov	r1, r2
 8003312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
 800331c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	0159      	lsls	r1, r3, #5
 800332e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003332:	0150      	lsls	r0, r2, #5
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4641      	mov	r1, r8
 800333a:	ebb2 0a01 	subs.w	sl, r2, r1
 800333e:	4649      	mov	r1, r9
 8003340:	eb63 0b01 	sbc.w	fp, r3, r1
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003358:	ebb2 040a 	subs.w	r4, r2, sl
 800335c:	eb63 050b 	sbc.w	r5, r3, fp
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	00eb      	lsls	r3, r5, #3
 800336a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336e:	00e2      	lsls	r2, r4, #3
 8003370:	4614      	mov	r4, r2
 8003372:	461d      	mov	r5, r3
 8003374:	4643      	mov	r3, r8
 8003376:	18e3      	adds	r3, r4, r3
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	464b      	mov	r3, r9
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800338e:	4629      	mov	r1, r5
 8003390:	028b      	lsls	r3, r1, #10
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003398:	4621      	mov	r1, r4
 800339a:	028a      	lsls	r2, r1, #10
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	61fa      	str	r2, [r7, #28]
 80033a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ac:	f7fc ff30 	bl	8000210 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	3301      	adds	r3, #1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x204>)
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3750      	adds	r7, #80	@ 0x50
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f8:	4b03      	ldr	r3, [pc, #12]	@ (8003408 <HAL_RCC_GetHCLKFreq+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000604 	.word	0x20000604

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff0 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0a9b      	lsrs	r3, r3, #10
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	0800844c 	.word	0x0800844c

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffdc 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0b5b      	lsrs	r3, r3, #13
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	0800844c 	.word	0x0800844c

0800345c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	220f      	movs	r2, #15
 800346a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800346c:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0203 	and.w	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003478:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003490:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800349e:	4b07      	ldr	r3, [pc, #28]	@ (80034bc <HAL_RCC_GetClockConfig+0x60>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 020f 	and.w	r2, r3, #15
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	601a      	str	r2, [r3, #0]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40023c00 	.word	0x40023c00

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d012      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034e8:	4b69      	ldr	r3, [pc, #420]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a68      	ldr	r2, [pc, #416]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80034f2:	6093      	str	r3, [r2, #8]
 80034f4:	4b66      	ldr	r3, [pc, #408]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fc:	4964      	ldr	r1, [pc, #400]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d017      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800351a:	4b5d      	ldr	r3, [pc, #372]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003520:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003528:	4959      	ldr	r1, [pc, #356]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003538:	d101      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003546:	2301      	movs	r3, #1
 8003548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003556:	4b4e      	ldr	r3, [pc, #312]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800355c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	494a      	ldr	r1, [pc, #296]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 808b 	beq.w	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	4a39      	ldr	r2, [pc, #228]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b0:	4b37      	ldr	r3, [pc, #220]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035bc:	4b35      	ldr	r3, [pc, #212]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a34      	ldr	r2, [pc, #208]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fe faf6 	bl	8001bb8 <HAL_GetTick>
 80035cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d0:	f7fe faf2 	bl	8001bb8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	@ 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e357      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ee:	4b28      	ldr	r3, [pc, #160]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d035      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d02e      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800360c:	4b20      	ldr	r3, [pc, #128]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003614:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003616:	4b1e      	ldr	r3, [pc, #120]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361a:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003620:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003622:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003626:	4a1a      	ldr	r2, [pc, #104]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800362e:	4a18      	ldr	r2, [pc, #96]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003634:	4b16      	ldr	r3, [pc, #88]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d114      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe faba 	bl	8001bb8 <HAL_GetTick>
 8003644:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7fe fab6 	bl	8001bb8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e319      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ee      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003676:	d111      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003686:	400b      	ands	r3, r1
 8003688:	4901      	ldr	r1, [pc, #4]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
 800368e:	e00b      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003690:	40023800 	.word	0x40023800
 8003694:	40007000 	.word	0x40007000
 8003698:	0ffffcff 	.word	0x0ffffcff
 800369c:	4baa      	ldr	r3, [pc, #680]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4aa9      	ldr	r2, [pc, #676]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80036a6:	6093      	str	r3, [r2, #8]
 80036a8:	4ba7      	ldr	r3, [pc, #668]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	49a4      	ldr	r1, [pc, #656]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d010      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036c6:	4ba0      	ldr	r3, [pc, #640]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036cc:	4a9e      	ldr	r2, [pc, #632]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80036d6:	4b9c      	ldr	r3, [pc, #624]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	4999      	ldr	r1, [pc, #612]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f4:	4b94      	ldr	r3, [pc, #592]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003702:	4991      	ldr	r1, [pc, #580]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003716:	4b8c      	ldr	r3, [pc, #560]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003724:	4988      	ldr	r1, [pc, #544]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003738:	4b83      	ldr	r3, [pc, #524]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003746:	4980      	ldr	r1, [pc, #512]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800375a:	4b7b      	ldr	r3, [pc, #492]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003760:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	4977      	ldr	r1, [pc, #476]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377c:	4b72      	ldr	r3, [pc, #456]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	496f      	ldr	r1, [pc, #444]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800379e:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	f023 020c 	bic.w	r2, r3, #12
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ac:	4966      	ldr	r1, [pc, #408]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c0:	4b61      	ldr	r3, [pc, #388]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ce:	495e      	ldr	r1, [pc, #376]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e2:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f0:	4955      	ldr	r1, [pc, #340]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003804:	4b50      	ldr	r3, [pc, #320]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003812:	494d      	ldr	r1, [pc, #308]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003826:	4b48      	ldr	r3, [pc, #288]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	4944      	ldr	r1, [pc, #272]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003848:	4b3f      	ldr	r3, [pc, #252]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003856:	493c      	ldr	r1, [pc, #240]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800386a:	4b37      	ldr	r3, [pc, #220]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003870:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003878:	4933      	ldr	r1, [pc, #204]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800388c:	4b2e      	ldr	r3, [pc, #184]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003892:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800389a:	492b      	ldr	r1, [pc, #172]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d011      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ae:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038bc:	4922      	ldr	r1, [pc, #136]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038cc:	d101      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ee:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fc:	4912      	ldr	r1, [pc, #72]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003910:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003920:	4909      	ldr	r1, [pc, #36]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d006      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80d9 	beq.w	8003aee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800393c:	4b02      	ldr	r3, [pc, #8]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a01      	ldr	r2, [pc, #4]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003946:	e001      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003948:	40023800 	.word	0x40023800
 800394c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394e:	f7fe f933 	bl	8001bb8 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003956:	f7fe f92f 	bl	8001bb8 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	@ 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e194      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003968:	4b6c      	ldr	r3, [pc, #432]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f0      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d021      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11d      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003988:	4b64      	ldr	r3, [pc, #400]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398e:	0c1b      	lsrs	r3, r3, #16
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003996:	4b61      	ldr	r3, [pc, #388]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399c:	0e1b      	lsrs	r3, r3, #24
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	019a      	lsls	r2, r3, #6
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	431a      	orrs	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	071b      	lsls	r3, r3, #28
 80039bc:	4957      	ldr	r1, [pc, #348]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02e      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ee:	d129      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039f0:	4b4a      	ldr	r3, [pc, #296]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039fe:	4b47      	ldr	r3, [pc, #284]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a04:	0f1b      	lsrs	r3, r3, #28
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	019a      	lsls	r2, r3, #6
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	071b      	lsls	r3, r3, #28
 8003a24:	493d      	ldr	r1, [pc, #244]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a32:	f023 021f 	bic.w	r2, r3, #31
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	4937      	ldr	r1, [pc, #220]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01d      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a50:	4b32      	ldr	r3, [pc, #200]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a56:	0e1b      	lsrs	r3, r3, #24
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a64:	0f1b      	lsrs	r3, r3, #28
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	019a      	lsls	r2, r3, #6
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	071b      	lsls	r3, r3, #28
 8003a84:	4925      	ldr	r1, [pc, #148]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d011      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	019a      	lsls	r2, r3, #6
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	071b      	lsls	r3, r3, #28
 8003ab4:	4919      	ldr	r1, [pc, #100]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003abc:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fe f876 	bl	8001bb8 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ad0:	f7fe f872 	bl	8001bb8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	@ 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0d7      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	f040 80cd 	bne.w	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b02:	f7fe f859 	bl	8001bb8 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b0a:	f7fe f855 	bl	8001bb8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	@ 0x64
 8003b16:	d903      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0ba      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b20:	4b5e      	ldr	r3, [pc, #376]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b2c:	d0ed      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02e      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d12a      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b56:	4b51      	ldr	r3, [pc, #324]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b64:	4b4d      	ldr	r3, [pc, #308]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6a:	0f1b      	lsrs	r3, r3, #28
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	019a      	lsls	r2, r3, #6
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	061b      	lsls	r3, r3, #24
 8003b84:	431a      	orrs	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	071b      	lsls	r3, r3, #28
 8003b8a:	4944      	ldr	r1, [pc, #272]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b92:	4b42      	ldr	r3, [pc, #264]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b98:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	493d      	ldr	r1, [pc, #244]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d022      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bc0:	d11d      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bc2:	4b36      	ldr	r3, [pc, #216]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc8:	0e1b      	lsrs	r3, r3, #24
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd0:	4b32      	ldr	r3, [pc, #200]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd6:	0f1b      	lsrs	r3, r3, #28
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	019a      	lsls	r2, r3, #6
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	431a      	orrs	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	061b      	lsls	r3, r3, #24
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	071b      	lsls	r3, r3, #28
 8003bf6:	4929      	ldr	r1, [pc, #164]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d028      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c0a:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	0e1b      	lsrs	r3, r3, #24
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c18:	4b20      	ldr	r3, [pc, #128]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	019a      	lsls	r2, r3, #6
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	4917      	ldr	r1, [pc, #92]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4911      	ldr	r1, [pc, #68]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0e      	ldr	r2, [pc, #56]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c68:	f7fd ffa6 	bl	8001bb8 <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c70:	f7fd ffa2 	bl	8001bb8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e007      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c82:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c8e:	d1ef      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e049      	b.n	8003d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f841 	bl	8003d4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 f9e8 	bl	80040b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d001      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e054      	b.n	8003e26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da6:	d01d      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	@ (8003e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	@ (8003e44 <HAL_TIM_Base_Start_IT+0xe0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xe4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	@ (8003e4c <HAL_TIM_Base_Start_IT+0xe8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d115      	bne.n	8003e10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	4b19      	ldr	r3, [pc, #100]	@ (8003e50 <HAL_TIM_Base_Start_IT+0xec>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d015      	beq.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfc:	d011      	beq.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	e008      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e000      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40001800 	.word	0x40001800
 8003e50:	00010007 	.word	0x00010007

08003e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d020      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0202 	mvn.w	r2, #2
 8003e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f8e9 	bl	8004076 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8db 	bl	8004062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8ec 	bl	800408a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d020      	beq.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0204 	mvn.w	r2, #4
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8c3 	bl	8004076 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8b5 	bl	8004062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8c6 	bl	800408a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d020      	beq.n	8003f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0208 	mvn.w	r2, #8
 8003f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2204      	movs	r2, #4
 8003f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f89d 	bl	8004076 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f88f 	bl	8004062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8a0 	bl	800408a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0210 	mvn.w	r2, #16
 8003f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2208      	movs	r2, #8
 8003f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f877 	bl	8004076 <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f869 	bl	8004062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f87a 	bl	800408a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0201 	mvn.w	r2, #1
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fb26 	bl	800160c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f919 	bl	8004220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00c      	beq.n	8004012 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d007      	beq.n	8004012 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800400a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f911 	bl	8004234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00c      	beq.n	8004036 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800402e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f834 	bl	800409e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0220 	mvn.w	r2, #32
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f8d9 	bl	800420c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a46      	ldr	r2, [pc, #280]	@ (80041e0 <TIM_Base_SetConfig+0x12c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d2:	d00f      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a43      	ldr	r2, [pc, #268]	@ (80041e4 <TIM_Base_SetConfig+0x130>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00b      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a42      	ldr	r2, [pc, #264]	@ (80041e8 <TIM_Base_SetConfig+0x134>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a41      	ldr	r2, [pc, #260]	@ (80041ec <TIM_Base_SetConfig+0x138>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a40      	ldr	r2, [pc, #256]	@ (80041f0 <TIM_Base_SetConfig+0x13c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d108      	bne.n	8004106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a35      	ldr	r2, [pc, #212]	@ (80041e0 <TIM_Base_SetConfig+0x12c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d02b      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004114:	d027      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a32      	ldr	r2, [pc, #200]	@ (80041e4 <TIM_Base_SetConfig+0x130>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d023      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a31      	ldr	r2, [pc, #196]	@ (80041e8 <TIM_Base_SetConfig+0x134>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a30      	ldr	r2, [pc, #192]	@ (80041ec <TIM_Base_SetConfig+0x138>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01b      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2f      	ldr	r2, [pc, #188]	@ (80041f0 <TIM_Base_SetConfig+0x13c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d017      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2e      	ldr	r2, [pc, #184]	@ (80041f4 <TIM_Base_SetConfig+0x140>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2d      	ldr	r2, [pc, #180]	@ (80041f8 <TIM_Base_SetConfig+0x144>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00f      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2c      	ldr	r2, [pc, #176]	@ (80041fc <TIM_Base_SetConfig+0x148>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2b      	ldr	r2, [pc, #172]	@ (8004200 <TIM_Base_SetConfig+0x14c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2a      	ldr	r2, [pc, #168]	@ (8004204 <TIM_Base_SetConfig+0x150>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a29      	ldr	r2, [pc, #164]	@ (8004208 <TIM_Base_SetConfig+0x154>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a10      	ldr	r2, [pc, #64]	@ (80041e0 <TIM_Base_SetConfig+0x12c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0xf8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a12      	ldr	r2, [pc, #72]	@ (80041f0 <TIM_Base_SetConfig+0x13c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f023 0201 	bic.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	611a      	str	r2, [r3, #16]
  }
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40010400 	.word	0x40010400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800
 8004200:	40001800 	.word	0x40001800
 8004204:	40001c00 	.word	0x40001c00
 8004208:	40002000 	.word	0x40002000

0800420c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e040      	b.n	80042dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd fac6 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	@ 0x24
 8004274:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa8c 	bl	80047ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f825 	bl	80042e4 <UART_SetConfig>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e01b      	b.n	80042dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb0b 	bl	80048f0 <UART_CheckIdleState>
 80042da:	4603      	mov	r3, r0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4ba6      	ldr	r3, [pc, #664]	@ (80045a8 <UART_SetConfig+0x2c4>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	430b      	orrs	r3, r1
 800431a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a94      	ldr	r2, [pc, #592]	@ (80045ac <UART_SetConfig+0x2c8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d120      	bne.n	80043a2 <UART_SetConfig+0xbe>
 8004360:	4b93      	ldr	r3, [pc, #588]	@ (80045b0 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b03      	cmp	r3, #3
 800436c:	d816      	bhi.n	800439c <UART_SetConfig+0xb8>
 800436e:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <UART_SetConfig+0x90>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	08004391 	.word	0x08004391
 800437c:	0800438b 	.word	0x0800438b
 8004380:	08004397 	.word	0x08004397
 8004384:	2301      	movs	r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e150      	b.n	800462c <UART_SetConfig+0x348>
 800438a:	2302      	movs	r3, #2
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e14d      	b.n	800462c <UART_SetConfig+0x348>
 8004390:	2304      	movs	r3, #4
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e14a      	b.n	800462c <UART_SetConfig+0x348>
 8004396:	2308      	movs	r3, #8
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e147      	b.n	800462c <UART_SetConfig+0x348>
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e144      	b.n	800462c <UART_SetConfig+0x348>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a83      	ldr	r2, [pc, #524]	@ (80045b4 <UART_SetConfig+0x2d0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d132      	bne.n	8004412 <UART_SetConfig+0x12e>
 80043ac:	4b80      	ldr	r3, [pc, #512]	@ (80045b0 <UART_SetConfig+0x2cc>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d828      	bhi.n	800440c <UART_SetConfig+0x128>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <UART_SetConfig+0xdc>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	08004401 	.word	0x08004401
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	080043fb 	.word	0x080043fb
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	0800440d 	.word	0x0800440d
 80043f0:	08004407 	.word	0x08004407
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e118      	b.n	800462c <UART_SetConfig+0x348>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e115      	b.n	800462c <UART_SetConfig+0x348>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e112      	b.n	800462c <UART_SetConfig+0x348>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e10f      	b.n	800462c <UART_SetConfig+0x348>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e10c      	b.n	800462c <UART_SetConfig+0x348>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a68      	ldr	r2, [pc, #416]	@ (80045b8 <UART_SetConfig+0x2d4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d120      	bne.n	800445e <UART_SetConfig+0x17a>
 800441c:	4b64      	ldr	r3, [pc, #400]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004426:	2b30      	cmp	r3, #48	@ 0x30
 8004428:	d013      	beq.n	8004452 <UART_SetConfig+0x16e>
 800442a:	2b30      	cmp	r3, #48	@ 0x30
 800442c:	d814      	bhi.n	8004458 <UART_SetConfig+0x174>
 800442e:	2b20      	cmp	r3, #32
 8004430:	d009      	beq.n	8004446 <UART_SetConfig+0x162>
 8004432:	2b20      	cmp	r3, #32
 8004434:	d810      	bhi.n	8004458 <UART_SetConfig+0x174>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <UART_SetConfig+0x15c>
 800443a:	2b10      	cmp	r3, #16
 800443c:	d006      	beq.n	800444c <UART_SetConfig+0x168>
 800443e:	e00b      	b.n	8004458 <UART_SetConfig+0x174>
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e0f2      	b.n	800462c <UART_SetConfig+0x348>
 8004446:	2302      	movs	r3, #2
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e0ef      	b.n	800462c <UART_SetConfig+0x348>
 800444c:	2304      	movs	r3, #4
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e0ec      	b.n	800462c <UART_SetConfig+0x348>
 8004452:	2308      	movs	r3, #8
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e0e9      	b.n	800462c <UART_SetConfig+0x348>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e0e6      	b.n	800462c <UART_SetConfig+0x348>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a56      	ldr	r2, [pc, #344]	@ (80045bc <UART_SetConfig+0x2d8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d120      	bne.n	80044aa <UART_SetConfig+0x1c6>
 8004468:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004472:	2bc0      	cmp	r3, #192	@ 0xc0
 8004474:	d013      	beq.n	800449e <UART_SetConfig+0x1ba>
 8004476:	2bc0      	cmp	r3, #192	@ 0xc0
 8004478:	d814      	bhi.n	80044a4 <UART_SetConfig+0x1c0>
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d009      	beq.n	8004492 <UART_SetConfig+0x1ae>
 800447e:	2b80      	cmp	r3, #128	@ 0x80
 8004480:	d810      	bhi.n	80044a4 <UART_SetConfig+0x1c0>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <UART_SetConfig+0x1a8>
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d006      	beq.n	8004498 <UART_SetConfig+0x1b4>
 800448a:	e00b      	b.n	80044a4 <UART_SetConfig+0x1c0>
 800448c:	2300      	movs	r3, #0
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e0cc      	b.n	800462c <UART_SetConfig+0x348>
 8004492:	2302      	movs	r3, #2
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e0c9      	b.n	800462c <UART_SetConfig+0x348>
 8004498:	2304      	movs	r3, #4
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e0c6      	b.n	800462c <UART_SetConfig+0x348>
 800449e:	2308      	movs	r3, #8
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e0c3      	b.n	800462c <UART_SetConfig+0x348>
 80044a4:	2310      	movs	r3, #16
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e0c0      	b.n	800462c <UART_SetConfig+0x348>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a44      	ldr	r2, [pc, #272]	@ (80045c0 <UART_SetConfig+0x2dc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d125      	bne.n	8004500 <UART_SetConfig+0x21c>
 80044b4:	4b3e      	ldr	r3, [pc, #248]	@ (80045b0 <UART_SetConfig+0x2cc>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c2:	d017      	beq.n	80044f4 <UART_SetConfig+0x210>
 80044c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c8:	d817      	bhi.n	80044fa <UART_SetConfig+0x216>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d00b      	beq.n	80044e8 <UART_SetConfig+0x204>
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d4:	d811      	bhi.n	80044fa <UART_SetConfig+0x216>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <UART_SetConfig+0x1fe>
 80044da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044de:	d006      	beq.n	80044ee <UART_SetConfig+0x20a>
 80044e0:	e00b      	b.n	80044fa <UART_SetConfig+0x216>
 80044e2:	2300      	movs	r3, #0
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e0a1      	b.n	800462c <UART_SetConfig+0x348>
 80044e8:	2302      	movs	r3, #2
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e09e      	b.n	800462c <UART_SetConfig+0x348>
 80044ee:	2304      	movs	r3, #4
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e09b      	b.n	800462c <UART_SetConfig+0x348>
 80044f4:	2308      	movs	r3, #8
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e098      	b.n	800462c <UART_SetConfig+0x348>
 80044fa:	2310      	movs	r3, #16
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e095      	b.n	800462c <UART_SetConfig+0x348>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2f      	ldr	r2, [pc, #188]	@ (80045c4 <UART_SetConfig+0x2e0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d125      	bne.n	8004556 <UART_SetConfig+0x272>
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004518:	d017      	beq.n	800454a <UART_SetConfig+0x266>
 800451a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800451e:	d817      	bhi.n	8004550 <UART_SetConfig+0x26c>
 8004520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004524:	d00b      	beq.n	800453e <UART_SetConfig+0x25a>
 8004526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452a:	d811      	bhi.n	8004550 <UART_SetConfig+0x26c>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <UART_SetConfig+0x254>
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004534:	d006      	beq.n	8004544 <UART_SetConfig+0x260>
 8004536:	e00b      	b.n	8004550 <UART_SetConfig+0x26c>
 8004538:	2301      	movs	r3, #1
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e076      	b.n	800462c <UART_SetConfig+0x348>
 800453e:	2302      	movs	r3, #2
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e073      	b.n	800462c <UART_SetConfig+0x348>
 8004544:	2304      	movs	r3, #4
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e070      	b.n	800462c <UART_SetConfig+0x348>
 800454a:	2308      	movs	r3, #8
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e06d      	b.n	800462c <UART_SetConfig+0x348>
 8004550:	2310      	movs	r3, #16
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e06a      	b.n	800462c <UART_SetConfig+0x348>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	@ (80045c8 <UART_SetConfig+0x2e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d138      	bne.n	80045d2 <UART_SetConfig+0x2ee>
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <UART_SetConfig+0x2cc>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800456a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800456e:	d017      	beq.n	80045a0 <UART_SetConfig+0x2bc>
 8004570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004574:	d82a      	bhi.n	80045cc <UART_SetConfig+0x2e8>
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457a:	d00b      	beq.n	8004594 <UART_SetConfig+0x2b0>
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004580:	d824      	bhi.n	80045cc <UART_SetConfig+0x2e8>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <UART_SetConfig+0x2aa>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458a:	d006      	beq.n	800459a <UART_SetConfig+0x2b6>
 800458c:	e01e      	b.n	80045cc <UART_SetConfig+0x2e8>
 800458e:	2300      	movs	r3, #0
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e04b      	b.n	800462c <UART_SetConfig+0x348>
 8004594:	2302      	movs	r3, #2
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e048      	b.n	800462c <UART_SetConfig+0x348>
 800459a:	2304      	movs	r3, #4
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	e045      	b.n	800462c <UART_SetConfig+0x348>
 80045a0:	2308      	movs	r3, #8
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e042      	b.n	800462c <UART_SetConfig+0x348>
 80045a6:	bf00      	nop
 80045a8:	efff69f3 	.word	0xefff69f3
 80045ac:	40011000 	.word	0x40011000
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40004400 	.word	0x40004400
 80045b8:	40004800 	.word	0x40004800
 80045bc:	40004c00 	.word	0x40004c00
 80045c0:	40005000 	.word	0x40005000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	40007800 	.word	0x40007800
 80045cc:	2310      	movs	r3, #16
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e02c      	b.n	800462c <UART_SetConfig+0x348>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a72      	ldr	r2, [pc, #456]	@ (80047a0 <UART_SetConfig+0x4bc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d125      	bne.n	8004628 <UART_SetConfig+0x344>
 80045dc:	4b71      	ldr	r3, [pc, #452]	@ (80047a4 <UART_SetConfig+0x4c0>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045ea:	d017      	beq.n	800461c <UART_SetConfig+0x338>
 80045ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045f0:	d817      	bhi.n	8004622 <UART_SetConfig+0x33e>
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f6:	d00b      	beq.n	8004610 <UART_SetConfig+0x32c>
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fc:	d811      	bhi.n	8004622 <UART_SetConfig+0x33e>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <UART_SetConfig+0x326>
 8004602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004606:	d006      	beq.n	8004616 <UART_SetConfig+0x332>
 8004608:	e00b      	b.n	8004622 <UART_SetConfig+0x33e>
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e00d      	b.n	800462c <UART_SetConfig+0x348>
 8004610:	2302      	movs	r3, #2
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e00a      	b.n	800462c <UART_SetConfig+0x348>
 8004616:	2304      	movs	r3, #4
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e007      	b.n	800462c <UART_SetConfig+0x348>
 800461c:	2308      	movs	r3, #8
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x348>
 8004622:	2310      	movs	r3, #16
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e001      	b.n	800462c <UART_SetConfig+0x348>
 8004628:	2310      	movs	r3, #16
 800462a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004634:	d15b      	bne.n	80046ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d828      	bhi.n	800468e <UART_SetConfig+0x3aa>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <UART_SetConfig+0x360>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004669 	.word	0x08004669
 8004648:	08004671 	.word	0x08004671
 800464c:	08004679 	.word	0x08004679
 8004650:	0800468f 	.word	0x0800468f
 8004654:	0800467f 	.word	0x0800467f
 8004658:	0800468f 	.word	0x0800468f
 800465c:	0800468f 	.word	0x0800468f
 8004660:	0800468f 	.word	0x0800468f
 8004664:	08004687 	.word	0x08004687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004668:	f7fe fed0 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 800466c:	61b8      	str	r0, [r7, #24]
        break;
 800466e:	e013      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7fe fee0 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004674:	61b8      	str	r0, [r7, #24]
        break;
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b4b      	ldr	r3, [pc, #300]	@ (80047a8 <UART_SetConfig+0x4c4>)
 800467a:	61bb      	str	r3, [r7, #24]
        break;
 800467c:	e00c      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7fe fdb3 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 8004682:	61b8      	str	r0, [r7, #24]
        break;
 8004684:	e008      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800468a:	61bb      	str	r3, [r7, #24]
        break;
 800468c:	e004      	b.n	8004698 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	77bb      	strb	r3, [r7, #30]
        break;
 8004696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d074      	beq.n	8004788 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	005a      	lsls	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d916      	bls.n	80046e8 <UART_SetConfig+0x404>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d212      	bcs.n	80046e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f023 030f 	bic.w	r3, r3, #15
 80046ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	4313      	orrs	r3, r2
 80046dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	89fa      	ldrh	r2, [r7, #14]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e04f      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77bb      	strb	r3, [r7, #30]
 80046ec:	e04c      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ee:	7ffb      	ldrb	r3, [r7, #31]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d828      	bhi.n	8004746 <UART_SetConfig+0x462>
 80046f4:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <UART_SetConfig+0x418>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fe74 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004724:	61b8      	str	r0, [r7, #24]
        break;
 8004726:	e013      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe fe84 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 800472c:	61b8      	str	r0, [r7, #24]
        break;
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <UART_SetConfig+0x4c4>)
 8004732:	61bb      	str	r3, [r7, #24]
        break;
 8004734:	e00c      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7fe fd57 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 800473a:	61b8      	str	r0, [r7, #24]
        break;
 800473c:	e008      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e004      	b.n	8004750 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77bb      	strb	r3, [r7, #30]
        break;
 800474e:	bf00      	nop
    }

    if (pclk != 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	085a      	lsrs	r2, r3, #1
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	441a      	add	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b0f      	cmp	r3, #15
 800476e:	d909      	bls.n	8004784 <UART_SetConfig+0x4a0>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004776:	d205      	bcs.n	8004784 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e001      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004794:	7fbb      	ldrb	r3, [r7, #30]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40007c00 	.word	0x40007c00
 80047a4:	40023800 	.word	0x40023800
 80047a8:	00f42400 	.word	0x00f42400

080047ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01a      	beq.n	80048c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048aa:	d10a      	bne.n	80048c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	@ 0x30
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004900:	f7fd f95a 	bl	8001bb8 <HAL_GetTick>
 8004904:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d12e      	bne.n	8004972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	2200      	movs	r2, #0
 800491e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f83b 	bl	800499e <UART_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d021      	beq.n	8004972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	60fb      	str	r3, [r7, #12]
   return(result);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e011      	b.n	8004996 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3728      	adds	r7, #40	@ 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ae:	e04f      	b.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d04b      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b8:	f7fd f8fe 	bl	8001bb8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <UART_WaitOnFlagUntilTimeout+0x30>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e04e      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d037      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d034      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb2>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b40      	cmp	r3, #64	@ 0x40
 80049ea:	d031      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d110      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2208      	movs	r2, #8
 8004a00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f838 	bl	8004a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2208      	movs	r2, #8
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e029      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a2a:	d111      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f81e 	bl	8004a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e00f      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d0a0      	beq.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b095      	sub	sp, #84	@ 0x54
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e6      	bne.n	8004a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e5      	bne.n	8004ab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d118      	bne.n	8004b20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6979      	ldr	r1, [r7, #20]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	613b      	str	r3, [r7, #16]
   return(result);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b34:	bf00      	nop
 8004b36:	3754      	adds	r7, #84	@ 0x54
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b40:	b084      	sub	sp, #16
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	f107 001c 	add.w	r0, r7, #28
 8004b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d121      	bne.n	8004b9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	4b21      	ldr	r3, [pc, #132]	@ (8004bf0 <USB_CoreInit+0xb0>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d105      	bne.n	8004b92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fa92 	bl	80050bc <USB_CoreReset>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	e010      	b.n	8004bc0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa86 	bl	80050bc <USB_CoreReset>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004bc0:	7fbb      	ldrb	r3, [r7, #30]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d10b      	bne.n	8004bde <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f043 0206 	orr.w	r2, r3, #6
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bea:	b004      	add	sp, #16
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	ffbdffbf 	.word	0xffbdffbf

08004bf4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f023 0201 	bic.w	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d115      	bne.n	8004c64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c44:	200a      	movs	r0, #10
 8004c46:	f7fc ffc3 	bl	8001bd0 <HAL_Delay>
      ms += 10U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	330a      	adds	r3, #10
 8004c4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa25 	bl	80050a0 <USB_GetMode>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d01e      	beq.n	8004c9a <USB_SetCurrentMode+0x84>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c60:	d9f0      	bls.n	8004c44 <USB_SetCurrentMode+0x2e>
 8004c62:	e01a      	b.n	8004c9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d115      	bne.n	8004c96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c76:	200a      	movs	r0, #10
 8004c78:	f7fc ffaa 	bl	8001bd0 <HAL_Delay>
      ms += 10U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	330a      	adds	r3, #10
 8004c80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fa0c 	bl	80050a0 <USB_GetMode>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <USB_SetCurrentMode+0x84>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c92:	d9f0      	bls.n	8004c76 <USB_SetCurrentMode+0x60>
 8004c94:	e001      	b.n	8004c9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e005      	b.n	8004ca6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c9e:	d101      	bne.n	8004ca4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e009      	b.n	8004ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	3340      	adds	r3, #64	@ 0x40
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b0e      	cmp	r3, #14
 8004ce8:	d9f2      	bls.n	8004cd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d11c      	bne.n	8004d2c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e005      	b.n	8004d38 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2300      	movs	r3, #0
 8004d42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d10d      	bne.n	8004d68 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d54:	2100      	movs	r1, #0
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f968 	bl	800502c <USB_SetDevSpeed>
 8004d5c:	e008      	b.n	8004d70 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d5e:	2101      	movs	r1, #1
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f963 	bl	800502c <USB_SetDevSpeed>
 8004d66:	e003      	b.n	8004d70 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d68:	2103      	movs	r1, #3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f95e 	bl	800502c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d70:	2110      	movs	r1, #16
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8fa 	bl	8004f6c <USB_FlushTxFifo>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f924 	bl	8004fd0 <USB_FlushRxFifo>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da4:	461a      	mov	r2, r3
 8004da6:	2300      	movs	r3, #0
 8004da8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e043      	b.n	8004e44 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd2:	d118      	bne.n	8004e06 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e013      	b.n	8004e18 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	e008      	b.n	8004e18 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	2300      	movs	r3, #0
 8004e28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	3301      	adds	r3, #1
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e48:	461a      	mov	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d3b5      	bcc.n	8004dbc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e043      	b.n	8004ede <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e6c:	d118      	bne.n	8004ea0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e013      	b.n	8004eb2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e96:	461a      	mov	r2, r3
 8004e98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e008      	b.n	8004eb2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ed6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3301      	adds	r3, #1
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d3b5      	bcc.n	8004e56 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004efc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004f0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f043 0210 	orr.w	r2, r3, #16
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <USB_DevInit+0x2b4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f043 0208 	orr.w	r2, r3, #8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <USB_DevInit+0x2b8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f60:	b004      	add	sp, #16
 8004f62:	4770      	bx	lr
 8004f64:	803c3800 	.word	0x803c3800
 8004f68:	40000004 	.word	0x40000004

08004f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f86:	d901      	bls.n	8004f8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e01b      	b.n	8004fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	daf2      	bge.n	8004f7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	019b      	lsls	r3, r3, #6
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fb0:	d901      	bls.n	8004fb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e006      	b.n	8004fc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d0f0      	beq.n	8004fa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fe8:	d901      	bls.n	8004fee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e018      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	daf2      	bge.n	8004fdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800500c:	d901      	bls.n	8005012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e006      	b.n	8005020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b10      	cmp	r3, #16
 800501c:	d0f0      	beq.n	8005000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005078:	f023 0303 	bic.w	r3, r3, #3
 800507c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800508c:	f043 0302 	orr.w	r3, r3, #2
 8005090:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f003 0301 	and.w	r3, r3, #1
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050d4:	d901      	bls.n	80050da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e01b      	b.n	8005112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	daf2      	bge.n	80050c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f043 0201 	orr.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050fe:	d901      	bls.n	8005104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e006      	b.n	8005112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d0f0      	beq.n	80050f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4a07      	ldr	r2, [pc, #28]	@ (800514c <vApplicationGetIdleTaskMemory+0x2c>)
 8005130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a06      	ldr	r2, [pc, #24]	@ (8005150 <vApplicationGetIdleTaskMemory+0x30>)
 8005136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2280      	movs	r2, #128	@ 0x80
 800513c:	601a      	str	r2, [r3, #0]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000e94 	.word	0x20000e94
 8005150:	20000f3c 	.word	0x20000f3c

08005154 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a07      	ldr	r2, [pc, #28]	@ (8005180 <vApplicationGetTimerTaskMemory+0x2c>)
 8005164:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4a06      	ldr	r2, [pc, #24]	@ (8005184 <vApplicationGetTimerTaskMemory+0x30>)
 800516a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005172:	601a      	str	r2, [r3, #0]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	2000113c 	.word	0x2000113c
 8005184:	200011e4 	.word	0x200011e4

08005188 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f103 0208 	add.w	r2, r3, #8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f04f 32ff 	mov.w	r2, #4294967295
 80051a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f103 0208 	add.w	r2, r3, #8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f103 0208 	add.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d103      	bne.n	800524a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e00c      	b.n	8005264 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3308      	adds	r3, #8
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e002      	b.n	8005258 <vListInsert+0x2e>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d2f6      	bcs.n	8005252 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	601a      	str	r2, [r3, #0]
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6892      	ldr	r2, [r2, #8]
 80052b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6852      	ldr	r2, [r2, #4]
 80052bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d103      	bne.n	80052d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	1e5a      	subs	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	b672      	cpsid	i
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	b662      	cpsie	i
 8005318:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	e7fd      	b.n	800531c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005320:	f002 fc44 	bl	8007bac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	441a      	add	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	3b01      	subs	r3, #1
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005356:	fb01 f303 	mul.w	r3, r1, r3
 800535a:	441a      	add	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	22ff      	movs	r2, #255	@ 0xff
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	22ff      	movs	r2, #255	@ 0xff
 800536c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d114      	bne.n	80053a0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01a      	beq.n	80053b4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3310      	adds	r3, #16
 8005382:	4618      	mov	r0, r3
 8005384:	f001 fb84 	bl	8006a90 <xTaskRemoveFromEventList>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d012      	beq.n	80053b4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800538e:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <xQueueGenericReset+0xd4>)
 8005390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	e009      	b.n	80053b4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3310      	adds	r3, #16
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff feef 	bl	8005188 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3324      	adds	r3, #36	@ 0x24
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff feea 	bl	8005188 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053b4:	f002 fc30 	bl	8007c18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053b8:	2301      	movs	r3, #1
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08e      	sub	sp, #56	@ 0x38
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10d      	bne.n	80053f8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	b672      	cpsid	i
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	b662      	cpsie	i
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	b672      	cpsid	i
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	b662      	cpsie	i
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	e7fd      	b.n	8005416 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <xQueueGenericCreateStatic+0x5e>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <xQueueGenericCreateStatic+0x62>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueGenericCreateStatic+0x64>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	b672      	cpsid	i
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	b662      	cpsie	i
 8005444:	623b      	str	r3, [r7, #32]
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <xQueueGenericCreateStatic+0x90>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <xQueueGenericCreateStatic+0x94>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <xQueueGenericCreateStatic+0x96>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10d      	bne.n	800547e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005466:	b672      	cpsid	i
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	b662      	cpsie	i
 8005476:	61fb      	str	r3, [r7, #28]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800547e:	2350      	movs	r3, #80	@ 0x50
 8005480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b50      	cmp	r3, #80	@ 0x50
 8005486:	d00d      	beq.n	80054a4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548c:	b672      	cpsid	i
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	b662      	cpsie	i
 800549c:	61bb      	str	r3, [r7, #24]
}
 800549e:	bf00      	nop
 80054a0:	bf00      	nop
 80054a2:	e7fd      	b.n	80054a0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80054bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f848 	bl	800555c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3730      	adds	r7, #48	@ 0x30
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08a      	sub	sp, #40	@ 0x28
 80054da:	af02      	add	r7, sp, #8
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <xQueueGenericCreate+0x30>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	b672      	cpsid	i
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	b662      	cpsie	i
 80054fe:	613b      	str	r3, [r7, #16]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e004      	b.n	800551c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3350      	adds	r3, #80	@ 0x50
 8005520:	4618      	mov	r0, r3
 8005522:	f002 fc71 	bl	8007e08 <pvPortMalloc>
 8005526:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d011      	beq.n	8005552 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3350      	adds	r3, #80	@ 0x50
 8005536:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005540:	79fa      	ldrb	r2, [r7, #7]
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f805 	bl	800555c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005552:	69bb      	ldr	r3, [r7, #24]
	}
 8005554:	4618      	mov	r0, r3
 8005556:	3720      	adds	r7, #32
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e002      	b.n	800557e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800558a:	2101      	movs	r1, #1
 800558c:	69b8      	ldr	r0, [r7, #24]
 800558e:	f7ff feaf 	bl	80052f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10d      	bne.n	80055ce <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b6:	b672      	cpsid	i
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	b662      	cpsie	i
 80055c6:	613b      	str	r3, [r7, #16]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d90d      	bls.n	80055f2 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	b672      	cpsid	i
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	b662      	cpsie	i
 80055ea:	60fb      	str	r3, [r7, #12]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055f2:	2202      	movs	r2, #2
 80055f4:	2100      	movs	r1, #0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ff6d 	bl	80054d6 <xQueueGenericCreate>
 80055fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800560a:	697b      	ldr	r3, [r7, #20]
	}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08e      	sub	sp, #56	@ 0x38
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10d      	bne.n	800564c <xQueueGenericSend+0x38>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	b672      	cpsid	i
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	b662      	cpsie	i
 8005644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <xQueueGenericSend+0x46>
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <xQueueGenericSend+0x4a>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueGenericSend+0x4c>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10d      	bne.n	8005680 <xQueueGenericSend+0x6c>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	b672      	cpsid	i
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	b662      	cpsie	i
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d103      	bne.n	800568e <xQueueGenericSend+0x7a>
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <xQueueGenericSend+0x7e>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <xQueueGenericSend+0x80>
 8005692:	2300      	movs	r3, #0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10d      	bne.n	80056b4 <xQueueGenericSend+0xa0>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	b672      	cpsid	i
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	b662      	cpsie	i
 80056ac:	623b      	str	r3, [r7, #32]
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056b4:	f001 fbba 	bl	8006e2c <xTaskGetSchedulerState>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <xQueueGenericSend+0xb0>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <xQueueGenericSend+0xb4>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <xQueueGenericSend+0xb6>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10d      	bne.n	80056ea <xQueueGenericSend+0xd6>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	b672      	cpsid	i
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	b662      	cpsie	i
 80056e2:	61fb      	str	r3, [r7, #28]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ea:	f002 fa5f 	bl	8007bac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <xQueueGenericSend+0xec>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d129      	bne.n	8005754 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005706:	f000 fbe3 	bl	8005ed0 <prvCopyDataToQueue>
 800570a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800570c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	3324      	adds	r3, #36	@ 0x24
 8005718:	4618      	mov	r0, r3
 800571a:	f001 f9b9 	bl	8006a90 <xTaskRemoveFromEventList>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005724:	4b3f      	ldr	r3, [pc, #252]	@ (8005824 <xQueueGenericSend+0x210>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	e00a      	b.n	800574c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800573c:	4b39      	ldr	r3, [pc, #228]	@ (8005824 <xQueueGenericSend+0x210>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800574c:	f002 fa64 	bl	8007c18 <vPortExitCritical>
				return pdPASS;
 8005750:	2301      	movs	r3, #1
 8005752:	e063      	b.n	800581c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800575a:	f002 fa5d 	bl	8007c18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800575e:	2300      	movs	r3, #0
 8005760:	e05c      	b.n	800581c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005768:	f107 0314 	add.w	r3, r7, #20
 800576c:	4618      	mov	r0, r3
 800576e:	f001 f9f5 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005776:	f002 fa4f 	bl	8007c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800577a:	f000 ff51 	bl	8006620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800577e:	f002 fa15 	bl	8007bac <vPortEnterCritical>
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005788:	b25b      	sxtb	r3, r3
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d103      	bne.n	8005798 <xQueueGenericSend+0x184>
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800579e:	b25b      	sxtb	r3, r3
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d103      	bne.n	80057ae <xQueueGenericSend+0x19a>
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057ae:	f002 fa33 	bl	8007c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b2:	1d3a      	adds	r2, r7, #4
 80057b4:	f107 0314 	add.w	r3, r7, #20
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 f9e4 	bl	8006b88 <xTaskCheckForTimeOut>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d124      	bne.n	8005810 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057c8:	f000 fc7a 	bl	80060c0 <prvIsQueueFull>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d018      	beq.n	8005804 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	3310      	adds	r3, #16
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 f902 	bl	80069e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057e2:	f000 fc05 	bl	8005ff0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057e6:	f000 ff29 	bl	800663c <xTaskResumeAll>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f47f af7c 	bne.w	80056ea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80057f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <xQueueGenericSend+0x210>)
 80057f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	e772      	b.n	80056ea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005806:	f000 fbf3 	bl	8005ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800580a:	f000 ff17 	bl	800663c <xTaskResumeAll>
 800580e:	e76c      	b.n	80056ea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005812:	f000 fbed 	bl	8005ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005816:	f000 ff11 	bl	800663c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800581a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800581c:	4618      	mov	r0, r3
 800581e:	3738      	adds	r7, #56	@ 0x38
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08e      	sub	sp, #56	@ 0x38
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	b672      	cpsid	i
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	b662      	cpsie	i
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <xQueueGenericSendFromISR+0x42>
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <xQueueGenericSendFromISR+0x46>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <xQueueGenericSendFromISR+0x48>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10d      	bne.n	8005890 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	b672      	cpsid	i
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	b662      	cpsie	i
 8005888:	623b      	str	r3, [r7, #32]
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d103      	bne.n	800589e <xQueueGenericSendFromISR+0x76>
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <xQueueGenericSendFromISR+0x7a>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <xQueueGenericSendFromISR+0x7c>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10d      	bne.n	80058c4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	b672      	cpsid	i
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	b662      	cpsie	i
 80058bc:	61fb      	str	r3, [r7, #28]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c4:	f002 fa5a 	bl	8007d7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058c8:	f3ef 8211 	mrs	r2, BASEPRI
 80058cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d0:	b672      	cpsid	i
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	b662      	cpsie	i
 80058e0:	61ba      	str	r2, [r7, #24]
 80058e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d302      	bcc.n	80058fa <xQueueGenericSendFromISR+0xd2>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d12c      	bne.n	8005954 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005900:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800590a:	f000 fae1 	bl	8005ed0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800590e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d112      	bne.n	800593e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d016      	beq.n	800594e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	3324      	adds	r3, #36	@ 0x24
 8005924:	4618      	mov	r0, r3
 8005926:	f001 f8b3 	bl	8006a90 <xTaskRemoveFromEventList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e007      	b.n	800594e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800593e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005942:	3301      	adds	r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	b25a      	sxtb	r2, r3
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800594e:	2301      	movs	r3, #1
 8005950:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005952:	e001      	b.n	8005958 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005954:	2300      	movs	r3, #0
 8005956:	637b      	str	r3, [r7, #52]	@ 0x34
 8005958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005966:	4618      	mov	r0, r3
 8005968:	3738      	adds	r7, #56	@ 0x38
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b08e      	sub	sp, #56	@ 0x38
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10d      	bne.n	800599e <xQueueGiveFromISR+0x30>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005986:	b672      	cpsid	i
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	b662      	cpsie	i
 8005996:	623b      	str	r3, [r7, #32]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	b672      	cpsid	i
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	b662      	cpsie	i
 80059ba:	61fb      	str	r3, [r7, #28]
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e7fd      	b.n	80059be <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d103      	bne.n	80059d2 <xQueueGiveFromISR+0x64>
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <xQueueGiveFromISR+0x68>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <xQueueGiveFromISR+0x6a>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	b672      	cpsid	i
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	b662      	cpsie	i
 80059f0:	61bb      	str	r3, [r7, #24]
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f8:	f002 f9c0 	bl	8007d7c <vPortValidateInterruptPriority>
	__asm volatile
 80059fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a04:	b672      	cpsid	i
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	b662      	cpsie	i
 8005a14:	617a      	str	r2, [r7, #20]
 8005a16:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a18:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d22b      	bcs.n	8005a84 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d112      	bne.n	8005a6e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	3324      	adds	r3, #36	@ 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 f81b 	bl	8006a90 <xTaskRemoveFromEventList>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e007      	b.n	8005a7e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a72:	3301      	adds	r3, #1
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	b25a      	sxtb	r2, r3
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a82:	e001      	b.n	8005a88 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f383 8811 	msr	BASEPRI, r3
}
 8005a92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3738      	adds	r7, #56	@ 0x38
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08c      	sub	sp, #48	@ 0x30
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10d      	bne.n	8005ad6 <xQueueReceive+0x36>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	b672      	cpsid	i
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	b662      	cpsie	i
 8005ace:	623b      	str	r3, [r7, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <xQueueReceive+0x44>
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <xQueueReceive+0x48>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <xQueueReceive+0x4a>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10d      	bne.n	8005b0a <xQueueReceive+0x6a>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	b672      	cpsid	i
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	b662      	cpsie	i
 8005b02:	61fb      	str	r3, [r7, #28]
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	e7fd      	b.n	8005b06 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b0a:	f001 f98f 	bl	8006e2c <xTaskGetSchedulerState>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <xQueueReceive+0x7a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <xQueueReceive+0x7e>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueReceive+0x80>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10d      	bne.n	8005b40 <xQueueReceive+0xa0>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	b672      	cpsid	i
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	b662      	cpsie	i
 8005b38:	61bb      	str	r3, [r7, #24]
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b40:	f002 f834 	bl	8007bac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01f      	beq.n	8005b90 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b54:	f000 fa26 	bl	8005fa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	1e5a      	subs	r2, r3, #1
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00f      	beq.n	8005b88 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6a:	3310      	adds	r3, #16
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 ff8f 	bl	8006a90 <xTaskRemoveFromEventList>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b78:	4b3c      	ldr	r3, [pc, #240]	@ (8005c6c <xQueueReceive+0x1cc>)
 8005b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b88:	f002 f846 	bl	8007c18 <vPortExitCritical>
				return pdPASS;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e069      	b.n	8005c64 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b96:	f002 f83f 	bl	8007c18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e062      	b.n	8005c64 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ba4:	f107 0310 	add.w	r3, r7, #16
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 ffd7 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bb2:	f002 f831 	bl	8007c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bb6:	f000 fd33 	bl	8006620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bba:	f001 fff7 	bl	8007bac <vPortEnterCritical>
 8005bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bc4:	b25b      	sxtb	r3, r3
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d103      	bne.n	8005bd4 <xQueueReceive+0x134>
 8005bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d103      	bne.n	8005bea <xQueueReceive+0x14a>
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bea:	f002 f815 	bl	8007c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bee:	1d3a      	adds	r2, r7, #4
 8005bf0:	f107 0310 	add.w	r3, r7, #16
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 ffc6 	bl	8006b88 <xTaskCheckForTimeOut>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d123      	bne.n	8005c4a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c04:	f000 fa46 	bl	8006094 <prvIsQueueEmpty>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d017      	beq.n	8005c3e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	3324      	adds	r3, #36	@ 0x24
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4611      	mov	r1, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fee4 	bl	80069e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c1e:	f000 f9e7 	bl	8005ff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c22:	f000 fd0b 	bl	800663c <xTaskResumeAll>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d189      	bne.n	8005b40 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c6c <xQueueReceive+0x1cc>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	e780      	b.n	8005b40 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c40:	f000 f9d6 	bl	8005ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c44:	f000 fcfa 	bl	800663c <xTaskResumeAll>
 8005c48:	e77a      	b.n	8005b40 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c4c:	f000 f9d0 	bl	8005ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c50:	f000 fcf4 	bl	800663c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c56:	f000 fa1d 	bl	8006094 <prvIsQueueEmpty>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f43f af6f 	beq.w	8005b40 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3730      	adds	r7, #48	@ 0x30
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	e000ed04 	.word	0xe000ed04

08005c70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08e      	sub	sp, #56	@ 0x38
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10d      	bne.n	8005ca8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	b672      	cpsid	i
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	b662      	cpsie	i
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	b672      	cpsid	i
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	b662      	cpsie	i
 8005cc4:	61fb      	str	r3, [r7, #28]
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ccc:	f001 f8ae 	bl	8006e2c <xTaskGetSchedulerState>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <xQueueSemaphoreTake+0x6c>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <xQueueSemaphoreTake+0x70>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <xQueueSemaphoreTake+0x72>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10d      	bne.n	8005d02 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	b672      	cpsid	i
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	b662      	cpsie	i
 8005cfa:	61bb      	str	r3, [r7, #24]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d02:	f001 ff53 	bl	8007bac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d024      	beq.n	8005d5c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	1e5a      	subs	r2, r3, #1
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d22:	f001 fa05 	bl	8007130 <pvTaskIncrementMutexHeldCount>
 8005d26:	4602      	mov	r2, r0
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00f      	beq.n	8005d54 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d36:	3310      	adds	r3, #16
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fea9 	bl	8006a90 <xTaskRemoveFromEventList>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d44:	4b55      	ldr	r3, [pc, #340]	@ (8005e9c <xQueueSemaphoreTake+0x22c>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d54:	f001 ff60 	bl	8007c18 <vPortExitCritical>
				return pdPASS;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e09a      	b.n	8005e92 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d114      	bne.n	8005d8c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00d      	beq.n	8005d84 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6c:	b672      	cpsid	i
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	b662      	cpsie	i
 8005d7c:	617b      	str	r3, [r7, #20]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d84:	f001 ff48 	bl	8007c18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e082      	b.n	8005e92 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d92:	f107 030c 	add.w	r3, r7, #12
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fee0 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005da0:	f001 ff3a 	bl	8007c18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005da4:	f000 fc3c 	bl	8006620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da8:	f001 ff00 	bl	8007bac <vPortEnterCritical>
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d103      	bne.n	8005dc2 <xQueueSemaphoreTake+0x152>
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d103      	bne.n	8005dd8 <xQueueSemaphoreTake+0x168>
 8005dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd8:	f001 ff1e 	bl	8007c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ddc:	463a      	mov	r2, r7
 8005dde:	f107 030c 	add.w	r3, r7, #12
 8005de2:	4611      	mov	r1, r2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fecf 	bl	8006b88 <xTaskCheckForTimeOut>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d132      	bne.n	8005e56 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005df0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005df2:	f000 f94f 	bl	8006094 <prvIsQueueEmpty>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d026      	beq.n	8005e4a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d109      	bne.n	8005e18 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005e04:	f001 fed2 	bl	8007bac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 f82b 	bl	8006e68 <xTaskPriorityInherit>
 8005e12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005e14:	f001 ff00 	bl	8007c18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1a:	3324      	adds	r3, #36	@ 0x24
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fddf 	bl	80069e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e28:	f000 f8e2 	bl	8005ff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e2c:	f000 fc06 	bl	800663c <xTaskResumeAll>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f47f af65 	bne.w	8005d02 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005e38:	4b18      	ldr	r3, [pc, #96]	@ (8005e9c <xQueueSemaphoreTake+0x22c>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	e75b      	b.n	8005d02 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e4c:	f000 f8d0 	bl	8005ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e50:	f000 fbf4 	bl	800663c <xTaskResumeAll>
 8005e54:	e755      	b.n	8005d02 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e58:	f000 f8ca 	bl	8005ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e5c:	f000 fbee 	bl	800663c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e62:	f000 f917 	bl	8006094 <prvIsQueueEmpty>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f43f af4a 	beq.w	8005d02 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005e74:	f001 fe9a 	bl	8007bac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e7a:	f000 f811 	bl	8005ea0 <prvGetDisinheritPriorityAfterTimeout>
 8005e7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f8ca 	bl	8007020 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e8c:	f001 fec4 	bl	8007c18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3738      	adds	r7, #56	@ 0x38
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d006      	beq.n	8005ebe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e001      	b.n	8005ec2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10d      	bne.n	8005f0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d14d      	bne.n	8005f92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 f81c 	bl	8006f38 <xTaskPriorityDisinherit>
 8005f00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	609a      	str	r2, [r3, #8]
 8005f08:	e043      	b.n	8005f92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d119      	bne.n	8005f44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6858      	ldr	r0, [r3, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68b9      	ldr	r1, [r7, #8]
 8005f1c:	f002 f9e2 	bl	80082e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d32b      	bcc.n	8005f92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	e026      	b.n	8005f92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68d8      	ldr	r0, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	f002 f9c8 	bl	80082e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	425b      	negs	r3, r3
 8005f5e:	441a      	add	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d207      	bcs.n	8005f80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f78:	425b      	negs	r3, r3
 8005f7a:	441a      	add	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d105      	bne.n	8005f92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d018      	beq.n	8005fe8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	441a      	add	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d303      	bcc.n	8005fd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68d9      	ldr	r1, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6838      	ldr	r0, [r7, #0]
 8005fe4:	f002 f97e 	bl	80082e4 <memcpy>
	}
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ff8:	f001 fdd8 	bl	8007bac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006002:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006004:	e011      	b.n	800602a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	2b00      	cmp	r3, #0
 800600c:	d012      	beq.n	8006034 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3324      	adds	r3, #36	@ 0x24
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fd3c 	bl	8006a90 <xTaskRemoveFromEventList>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800601e:	f000 fe1b 	bl	8006c58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	3b01      	subs	r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800602a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	dce9      	bgt.n	8006006 <prvUnlockQueue+0x16>
 8006032:	e000      	b.n	8006036 <prvUnlockQueue+0x46>
					break;
 8006034:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	22ff      	movs	r2, #255	@ 0xff
 800603a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800603e:	f001 fdeb 	bl	8007c18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006042:	f001 fdb3 	bl	8007bac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800604c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800604e:	e011      	b.n	8006074 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d012      	beq.n	800607e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3310      	adds	r3, #16
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fd17 	bl	8006a90 <xTaskRemoveFromEventList>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006068:	f000 fdf6 	bl	8006c58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	3b01      	subs	r3, #1
 8006070:	b2db      	uxtb	r3, r3
 8006072:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006078:	2b00      	cmp	r3, #0
 800607a:	dce9      	bgt.n	8006050 <prvUnlockQueue+0x60>
 800607c:	e000      	b.n	8006080 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800607e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	22ff      	movs	r2, #255	@ 0xff
 8006084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006088:	f001 fdc6 	bl	8007c18 <vPortExitCritical>
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800609c:	f001 fd86 	bl	8007bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	e001      	b.n	80060b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060b2:	f001 fdb1 	bl	8007c18 <vPortExitCritical>

	return xReturn;
 80060b6:	68fb      	ldr	r3, [r7, #12]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060c8:	f001 fd70 	bl	8007bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d102      	bne.n	80060de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e001      	b.n	80060e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060e2:	f001 fd99 	bl	8007c18 <vPortExitCritical>

	return xReturn;
 80060e6:	68fb      	ldr	r3, [r7, #12]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e014      	b.n	800612a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006100:	4a0f      	ldr	r2, [pc, #60]	@ (8006140 <vQueueAddToRegistry+0x50>)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800610c:	490c      	ldr	r1, [pc, #48]	@ (8006140 <vQueueAddToRegistry+0x50>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006116:	4a0a      	ldr	r2, [pc, #40]	@ (8006140 <vQueueAddToRegistry+0x50>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4413      	add	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006122:	e006      	b.n	8006132 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3301      	adds	r3, #1
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b07      	cmp	r3, #7
 800612e:	d9e7      	bls.n	8006100 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	200015e4 	.word	0x200015e4

08006144 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006154:	f001 fd2a 	bl	8007bac <vPortEnterCritical>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800615e:	b25b      	sxtb	r3, r3
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d103      	bne.n	800616e <vQueueWaitForMessageRestricted+0x2a>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006174:	b25b      	sxtb	r3, r3
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d103      	bne.n	8006184 <vQueueWaitForMessageRestricted+0x40>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006184:	f001 fd48 	bl	8007c18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	3324      	adds	r3, #36	@ 0x24
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fc4b 	bl	8006a34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800619e:	6978      	ldr	r0, [r7, #20]
 80061a0:	f7ff ff26 	bl	8005ff0 <prvUnlockQueue>
	}
 80061a4:	bf00      	nop
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	@ 0x38
 80061b0:	af04      	add	r7, sp, #16
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <xTaskCreateStatic+0x30>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	b672      	cpsid	i
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	b662      	cpsie	i
 80061d4:	623b      	str	r3, [r7, #32]
}
 80061d6:	bf00      	nop
 80061d8:	bf00      	nop
 80061da:	e7fd      	b.n	80061d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10d      	bne.n	80061fe <xTaskCreateStatic+0x52>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e6:	b672      	cpsid	i
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	b662      	cpsie	i
 80061f6:	61fb      	str	r3, [r7, #28]
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	e7fd      	b.n	80061fa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061fe:	23a8      	movs	r3, #168	@ 0xa8
 8006200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2ba8      	cmp	r3, #168	@ 0xa8
 8006206:	d00d      	beq.n	8006224 <xTaskCreateStatic+0x78>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620c:	b672      	cpsid	i
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	b662      	cpsie	i
 800621c:	61bb      	str	r3, [r7, #24]
}
 800621e:	bf00      	nop
 8006220:	bf00      	nop
 8006222:	e7fd      	b.n	8006220 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006224:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01e      	beq.n	800626a <xTaskCreateStatic+0xbe>
 800622c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01b      	beq.n	800626a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	2202      	movs	r2, #2
 8006240:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006244:	2300      	movs	r3, #0
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f851 	bl	8006304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006264:	f000 f8f8 	bl	8006458 <prvAddNewTaskToReadyList>
 8006268:	e001      	b.n	800626e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800626e:	697b      	ldr	r3, [r7, #20]
	}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	@ 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	@ 0x30
 800627c:	af04      	add	r7, sp, #16
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fdbb 	bl	8007e08 <pvPortMalloc>
 8006292:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800629a:	20a8      	movs	r0, #168	@ 0xa8
 800629c:	f001 fdb4 	bl	8007e08 <pvPortMalloc>
 80062a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80062ae:	e005      	b.n	80062bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062b0:	6978      	ldr	r0, [r7, #20]
 80062b2:	f001 fe77 	bl	8007fa4 <vPortFree>
 80062b6:	e001      	b.n	80062bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d017      	beq.n	80062f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062ca:	88fa      	ldrh	r2, [r7, #6]
 80062cc:	2300      	movs	r3, #0
 80062ce:	9303      	str	r3, [sp, #12]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	9302      	str	r3, [sp, #8]
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f80f 	bl	8006304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062e6:	69f8      	ldr	r0, [r7, #28]
 80062e8:	f000 f8b6 	bl	8006458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062ec:	2301      	movs	r3, #1
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e002      	b.n	80062f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062f2:	f04f 33ff 	mov.w	r3, #4294967295
 80062f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062f8:	69bb      	ldr	r3, [r7, #24]
	}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	461a      	mov	r2, r3
 800631c:	21a5      	movs	r1, #165	@ 0xa5
 800631e:	f001 ff5d 	bl	80081dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800632c:	440b      	add	r3, r1
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00d      	beq.n	8006362 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	b672      	cpsid	i
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	b662      	cpsie	i
 800635a:	617b      	str	r3, [r7, #20]
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	e7fd      	b.n	800635e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01f      	beq.n	80063a8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006368:	2300      	movs	r3, #0
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e012      	b.n	8006394 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	7819      	ldrb	r1, [r3, #0]
 8006376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	3334      	adds	r3, #52	@ 0x34
 800637e:	460a      	mov	r2, r1
 8006380:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3301      	adds	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d9e9      	bls.n	800636e <prvInitialiseNewTask+0x6a>
 800639a:	e000      	b.n	800639e <prvInitialiseNewTask+0x9a>
			{
				break;
 800639c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a6:	e003      	b.n	80063b0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	2b37      	cmp	r3, #55	@ 0x37
 80063b4:	d901      	bls.n	80063ba <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063b6:	2337      	movs	r3, #55	@ 0x37
 80063b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	2200      	movs	r2, #0
 80063ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fef9 	bl	80051c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	3318      	adds	r3, #24
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fef4 	bl	80051c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	2200      	movs	r2, #0
 8006402:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	3354      	adds	r3, #84	@ 0x54
 800640a:	224c      	movs	r2, #76	@ 0x4c
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fee4 	bl	80081dc <memset>
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	4a0d      	ldr	r2, [pc, #52]	@ (800644c <prvInitialiseNewTask+0x148>)
 8006418:	659a      	str	r2, [r3, #88]	@ 0x58
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	4a0c      	ldr	r2, [pc, #48]	@ (8006450 <prvInitialiseNewTask+0x14c>)
 800641e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	4a0c      	ldr	r2, [pc, #48]	@ (8006454 <prvInitialiseNewTask+0x150>)
 8006424:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	68f9      	ldr	r1, [r7, #12]
 800642a:	69b8      	ldr	r0, [r7, #24]
 800642c:	f001 fab0 	bl	8007990 <pxPortInitialiseStack>
 8006430:	4602      	mov	r2, r0
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800643c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006442:	bf00      	nop
 8006444:	3720      	adds	r7, #32
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20005870 	.word	0x20005870
 8006450:	200058d8 	.word	0x200058d8
 8006454:	20005940 	.word	0x20005940

08006458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006460:	f001 fba4 	bl	8007bac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006464:	4b2d      	ldr	r3, [pc, #180]	@ (800651c <prvAddNewTaskToReadyList+0xc4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	4a2c      	ldr	r2, [pc, #176]	@ (800651c <prvAddNewTaskToReadyList+0xc4>)
 800646c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800646e:	4b2c      	ldr	r3, [pc, #176]	@ (8006520 <prvAddNewTaskToReadyList+0xc8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006476:	4a2a      	ldr	r2, [pc, #168]	@ (8006520 <prvAddNewTaskToReadyList+0xc8>)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800647c:	4b27      	ldr	r3, [pc, #156]	@ (800651c <prvAddNewTaskToReadyList+0xc4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d110      	bne.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006484:	f000 fc0c 	bl	8006ca0 <prvInitialiseTaskLists>
 8006488:	e00d      	b.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800648a:	4b26      	ldr	r3, [pc, #152]	@ (8006524 <prvAddNewTaskToReadyList+0xcc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006492:	4b23      	ldr	r3, [pc, #140]	@ (8006520 <prvAddNewTaskToReadyList+0xc8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	429a      	cmp	r2, r3
 800649e:	d802      	bhi.n	80064a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006520 <prvAddNewTaskToReadyList+0xc8>)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064a6:	4b20      	ldr	r3, [pc, #128]	@ (8006528 <prvAddNewTaskToReadyList+0xd0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3301      	adds	r3, #1
 80064ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006528 <prvAddNewTaskToReadyList+0xd0>)
 80064ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006528 <prvAddNewTaskToReadyList+0xd0>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	4b1b      	ldr	r3, [pc, #108]	@ (800652c <prvAddNewTaskToReadyList+0xd4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d903      	bls.n	80064cc <prvAddNewTaskToReadyList+0x74>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	4a18      	ldr	r2, [pc, #96]	@ (800652c <prvAddNewTaskToReadyList+0xd4>)
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4a15      	ldr	r2, [pc, #84]	@ (8006530 <prvAddNewTaskToReadyList+0xd8>)
 80064da:	441a      	add	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f7fe fe7d 	bl	80051e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064e8:	f001 fb96 	bl	8007c18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <prvAddNewTaskToReadyList+0xcc>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00e      	beq.n	8006512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <prvAddNewTaskToReadyList+0xc8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d207      	bcs.n	8006512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <prvAddNewTaskToReadyList+0xdc>)
 8006504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20001af8 	.word	0x20001af8
 8006520:	20001624 	.word	0x20001624
 8006524:	20001b04 	.word	0x20001b04
 8006528:	20001b14 	.word	0x20001b14
 800652c:	20001b00 	.word	0x20001b00
 8006530:	20001628 	.word	0x20001628
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	@ 0x28
 800653c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006546:	463a      	mov	r2, r7
 8006548:	1d39      	adds	r1, r7, #4
 800654a:	f107 0308 	add.w	r3, r7, #8
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fde6 	bl	8005120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	9202      	str	r2, [sp, #8]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	2300      	movs	r3, #0
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	2300      	movs	r3, #0
 8006564:	460a      	mov	r2, r1
 8006566:	4926      	ldr	r1, [pc, #152]	@ (8006600 <vTaskStartScheduler+0xc8>)
 8006568:	4826      	ldr	r0, [pc, #152]	@ (8006604 <vTaskStartScheduler+0xcc>)
 800656a:	f7ff fe1f 	bl	80061ac <xTaskCreateStatic>
 800656e:	4603      	mov	r3, r0
 8006570:	4a25      	ldr	r2, [pc, #148]	@ (8006608 <vTaskStartScheduler+0xd0>)
 8006572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006574:	4b24      	ldr	r3, [pc, #144]	@ (8006608 <vTaskStartScheduler+0xd0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800657c:	2301      	movs	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e001      	b.n	8006586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d102      	bne.n	8006592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800658c:	f000 fe38 	bl	8007200 <xTimerCreateTimerTask>
 8006590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d11d      	bne.n	80065d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	613b      	str	r3, [r7, #16]
}
 80065ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065b0:	4b16      	ldr	r3, [pc, #88]	@ (800660c <vTaskStartScheduler+0xd4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3354      	adds	r3, #84	@ 0x54
 80065b6:	4a16      	ldr	r2, [pc, #88]	@ (8006610 <vTaskStartScheduler+0xd8>)
 80065b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065ba:	4b16      	ldr	r3, [pc, #88]	@ (8006614 <vTaskStartScheduler+0xdc>)
 80065bc:	f04f 32ff 	mov.w	r2, #4294967295
 80065c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065c2:	4b15      	ldr	r3, [pc, #84]	@ (8006618 <vTaskStartScheduler+0xe0>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065c8:	4b14      	ldr	r3, [pc, #80]	@ (800661c <vTaskStartScheduler+0xe4>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065ce:	f001 fa6f 	bl	8007ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065d2:	e011      	b.n	80065f8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d10d      	bne.n	80065f8 <vTaskStartScheduler+0xc0>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	b672      	cpsid	i
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	b662      	cpsie	i
 80065f0:	60fb      	str	r3, [r7, #12]
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <vTaskStartScheduler+0xbc>
}
 80065f8:	bf00      	nop
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	08008424 	.word	0x08008424
 8006604:	08006c71 	.word	0x08006c71
 8006608:	20001b1c 	.word	0x20001b1c
 800660c:	20001624 	.word	0x20001624
 8006610:	20000614 	.word	0x20000614
 8006614:	20001b18 	.word	0x20001b18
 8006618:	20001b04 	.word	0x20001b04
 800661c:	20001afc 	.word	0x20001afc

08006620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006624:	4b04      	ldr	r3, [pc, #16]	@ (8006638 <vTaskSuspendAll+0x18>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	4a03      	ldr	r2, [pc, #12]	@ (8006638 <vTaskSuspendAll+0x18>)
 800662c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800662e:	bf00      	nop
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	20001b20 	.word	0x20001b20

0800663c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800664a:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <xTaskResumeAll+0x11c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <xTaskResumeAll+0x32>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	b672      	cpsid	i
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	b662      	cpsie	i
 8006666:	603b      	str	r3, [r7, #0]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800666e:	f001 fa9d 	bl	8007bac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006672:	4b39      	ldr	r3, [pc, #228]	@ (8006758 <xTaskResumeAll+0x11c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3b01      	subs	r3, #1
 8006678:	4a37      	ldr	r2, [pc, #220]	@ (8006758 <xTaskResumeAll+0x11c>)
 800667a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800667c:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <xTaskResumeAll+0x11c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d162      	bne.n	800674a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006684:	4b35      	ldr	r3, [pc, #212]	@ (800675c <xTaskResumeAll+0x120>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d05e      	beq.n	800674a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800668c:	e02f      	b.n	80066ee <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668e:	4b34      	ldr	r3, [pc, #208]	@ (8006760 <xTaskResumeAll+0x124>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3318      	adds	r3, #24
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fdfe 	bl	800529c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3304      	adds	r3, #4
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe fdf9 	bl	800529c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006764 <xTaskResumeAll+0x128>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d903      	bls.n	80066be <xTaskResumeAll+0x82>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006764 <xTaskResumeAll+0x128>)
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4a27      	ldr	r2, [pc, #156]	@ (8006768 <xTaskResumeAll+0x12c>)
 80066cc:	441a      	add	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fe fd84 	bl	80051e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066de:	4b23      	ldr	r3, [pc, #140]	@ (800676c <xTaskResumeAll+0x130>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d302      	bcc.n	80066ee <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80066e8:	4b21      	ldr	r3, [pc, #132]	@ (8006770 <xTaskResumeAll+0x134>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006760 <xTaskResumeAll+0x124>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1cb      	bne.n	800668e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066fc:	f000 fb76 	bl	8006dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006700:	4b1c      	ldr	r3, [pc, #112]	@ (8006774 <xTaskResumeAll+0x138>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800670c:	f000 f846 	bl	800679c <xTaskIncrementTick>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006716:	4b16      	ldr	r3, [pc, #88]	@ (8006770 <xTaskResumeAll+0x134>)
 8006718:	2201      	movs	r2, #1
 800671a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3b01      	subs	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f1      	bne.n	800670c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006728:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <xTaskResumeAll+0x138>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800672e:	4b10      	ldr	r3, [pc, #64]	@ (8006770 <xTaskResumeAll+0x134>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006736:	2301      	movs	r3, #1
 8006738:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800673a:	4b0f      	ldr	r3, [pc, #60]	@ (8006778 <xTaskResumeAll+0x13c>)
 800673c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800674a:	f001 fa65 	bl	8007c18 <vPortExitCritical>

	return xAlreadyYielded;
 800674e:	68bb      	ldr	r3, [r7, #8]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20001b20 	.word	0x20001b20
 800675c:	20001af8 	.word	0x20001af8
 8006760:	20001ab8 	.word	0x20001ab8
 8006764:	20001b00 	.word	0x20001b00
 8006768:	20001628 	.word	0x20001628
 800676c:	20001624 	.word	0x20001624
 8006770:	20001b0c 	.word	0x20001b0c
 8006774:	20001b08 	.word	0x20001b08
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006782:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <xTaskGetTickCount+0x1c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006788:	687b      	ldr	r3, [r7, #4]
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20001afc 	.word	0x20001afc

0800679c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067a6:	4b50      	ldr	r3, [pc, #320]	@ (80068e8 <xTaskIncrementTick+0x14c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 808c 	bne.w	80068c8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067b0:	4b4e      	ldr	r3, [pc, #312]	@ (80068ec <xTaskIncrementTick+0x150>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067b8:	4a4c      	ldr	r2, [pc, #304]	@ (80068ec <xTaskIncrementTick+0x150>)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d123      	bne.n	800680c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80067c4:	4b4a      	ldr	r3, [pc, #296]	@ (80068f0 <xTaskIncrementTick+0x154>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00d      	beq.n	80067ea <xTaskIncrementTick+0x4e>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	b672      	cpsid	i
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	b662      	cpsie	i
 80067e2:	603b      	str	r3, [r7, #0]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xTaskIncrementTick+0x4a>
 80067ea:	4b41      	ldr	r3, [pc, #260]	@ (80068f0 <xTaskIncrementTick+0x154>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	4b40      	ldr	r3, [pc, #256]	@ (80068f4 <xTaskIncrementTick+0x158>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3e      	ldr	r2, [pc, #248]	@ (80068f0 <xTaskIncrementTick+0x154>)
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4a3e      	ldr	r2, [pc, #248]	@ (80068f4 <xTaskIncrementTick+0x158>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	4b3e      	ldr	r3, [pc, #248]	@ (80068f8 <xTaskIncrementTick+0x15c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	4a3c      	ldr	r2, [pc, #240]	@ (80068f8 <xTaskIncrementTick+0x15c>)
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	f000 faf0 	bl	8006dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800680c:	4b3b      	ldr	r3, [pc, #236]	@ (80068fc <xTaskIncrementTick+0x160>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	d349      	bcc.n	80068aa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006816:	4b36      	ldr	r3, [pc, #216]	@ (80068f0 <xTaskIncrementTick+0x154>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006820:	4b36      	ldr	r3, [pc, #216]	@ (80068fc <xTaskIncrementTick+0x160>)
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	601a      	str	r2, [r3, #0]
					break;
 8006828:	e03f      	b.n	80068aa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800682a:	4b31      	ldr	r3, [pc, #196]	@ (80068f0 <xTaskIncrementTick+0x154>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d203      	bcs.n	800684a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006842:	4a2e      	ldr	r2, [pc, #184]	@ (80068fc <xTaskIncrementTick+0x160>)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006848:	e02f      	b.n	80068aa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3304      	adds	r3, #4
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fd24 	bl	800529c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	3318      	adds	r3, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe fd1b 	bl	800529c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686a:	4b25      	ldr	r3, [pc, #148]	@ (8006900 <xTaskIncrementTick+0x164>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d903      	bls.n	800687a <xTaskIncrementTick+0xde>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	4a22      	ldr	r2, [pc, #136]	@ (8006900 <xTaskIncrementTick+0x164>)
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4a1f      	ldr	r2, [pc, #124]	@ (8006904 <xTaskIncrementTick+0x168>)
 8006888:	441a      	add	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	3304      	adds	r3, #4
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f7fe fca6 	bl	80051e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689a:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <xTaskIncrementTick+0x16c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d3b8      	bcc.n	8006816 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068a8:	e7b5      	b.n	8006816 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068aa:	4b17      	ldr	r3, [pc, #92]	@ (8006908 <xTaskIncrementTick+0x16c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b0:	4914      	ldr	r1, [pc, #80]	@ (8006904 <xTaskIncrementTick+0x168>)
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d907      	bls.n	80068d2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80068c2:	2301      	movs	r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e004      	b.n	80068d2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80068c8:	4b10      	ldr	r3, [pc, #64]	@ (800690c <xTaskIncrementTick+0x170>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a0f      	ldr	r2, [pc, #60]	@ (800690c <xTaskIncrementTick+0x170>)
 80068d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80068d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006910 <xTaskIncrementTick+0x174>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80068de:	697b      	ldr	r3, [r7, #20]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20001b20 	.word	0x20001b20
 80068ec:	20001afc 	.word	0x20001afc
 80068f0:	20001ab0 	.word	0x20001ab0
 80068f4:	20001ab4 	.word	0x20001ab4
 80068f8:	20001b10 	.word	0x20001b10
 80068fc:	20001b18 	.word	0x20001b18
 8006900:	20001b00 	.word	0x20001b00
 8006904:	20001628 	.word	0x20001628
 8006908:	20001624 	.word	0x20001624
 800690c:	20001b08 	.word	0x20001b08
 8006910:	20001b0c 	.word	0x20001b0c

08006914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800691a:	4b2c      	ldr	r3, [pc, #176]	@ (80069cc <vTaskSwitchContext+0xb8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006922:	4b2b      	ldr	r3, [pc, #172]	@ (80069d0 <vTaskSwitchContext+0xbc>)
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006928:	e049      	b.n	80069be <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800692a:	4b29      	ldr	r3, [pc, #164]	@ (80069d0 <vTaskSwitchContext+0xbc>)
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006930:	4b28      	ldr	r3, [pc, #160]	@ (80069d4 <vTaskSwitchContext+0xc0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e013      	b.n	8006960 <vTaskSwitchContext+0x4c>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10d      	bne.n	800695a <vTaskSwitchContext+0x46>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	b672      	cpsid	i
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	b662      	cpsie	i
 8006952:	607b      	str	r3, [r7, #4]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <vTaskSwitchContext+0x42>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3b01      	subs	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	491d      	ldr	r1, [pc, #116]	@ (80069d8 <vTaskSwitchContext+0xc4>)
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0e1      	beq.n	8006938 <vTaskSwitchContext+0x24>
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a16      	ldr	r2, [pc, #88]	@ (80069d8 <vTaskSwitchContext+0xc4>)
 8006980:	4413      	add	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	3308      	adds	r3, #8
 8006996:	429a      	cmp	r2, r3
 8006998:	d104      	bne.n	80069a4 <vTaskSwitchContext+0x90>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	4a0c      	ldr	r2, [pc, #48]	@ (80069dc <vTaskSwitchContext+0xc8>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4a09      	ldr	r2, [pc, #36]	@ (80069d4 <vTaskSwitchContext+0xc0>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069b4:	4b09      	ldr	r3, [pc, #36]	@ (80069dc <vTaskSwitchContext+0xc8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3354      	adds	r3, #84	@ 0x54
 80069ba:	4a09      	ldr	r2, [pc, #36]	@ (80069e0 <vTaskSwitchContext+0xcc>)
 80069bc:	6013      	str	r3, [r2, #0]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20001b20 	.word	0x20001b20
 80069d0:	20001b0c 	.word	0x20001b0c
 80069d4:	20001b00 	.word	0x20001b00
 80069d8:	20001628 	.word	0x20001628
 80069dc:	20001624 	.word	0x20001624
 80069e0:	20000614 	.word	0x20000614

080069e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10d      	bne.n	8006a10 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f8:	b672      	cpsid	i
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	b662      	cpsie	i
 8006a08:	60fb      	str	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a10:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <vTaskPlaceOnEventList+0x4c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3318      	adds	r3, #24
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fe fc06 	bl	800522a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a1e:	2101      	movs	r1, #1
 8006a20:	6838      	ldr	r0, [r7, #0]
 8006a22:	f000 fb99 	bl	8007158 <prvAddCurrentTaskToDelayedList>
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20001624 	.word	0x20001624

08006a34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	b672      	cpsid	i
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	b662      	cpsie	i
 8006a5a:	617b      	str	r3, [r7, #20]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a62:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <vTaskPlaceOnEventListRestricted+0x58>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3318      	adds	r3, #24
 8006a68:	4619      	mov	r1, r3
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7fe fbb9 	bl	80051e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	68b8      	ldr	r0, [r7, #8]
 8006a80:	f000 fb6a 	bl	8007158 <prvAddCurrentTaskToDelayedList>
	}
 8006a84:	bf00      	nop
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20001624 	.word	0x20001624

08006a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aaa:	b672      	cpsid	i
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	b662      	cpsie	i
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	e7fd      	b.n	8006abe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3318      	adds	r3, #24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe fbe8 	bl	800529c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006acc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b44 <xTaskRemoveFromEventList+0xb4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11d      	bne.n	8006b10 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fbdf 	bl	800529c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae2:	4b19      	ldr	r3, [pc, #100]	@ (8006b48 <xTaskRemoveFromEventList+0xb8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d903      	bls.n	8006af2 <xTaskRemoveFromEventList+0x62>
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aee:	4a16      	ldr	r2, [pc, #88]	@ (8006b48 <xTaskRemoveFromEventList+0xb8>)
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4a13      	ldr	r2, [pc, #76]	@ (8006b4c <xTaskRemoveFromEventList+0xbc>)
 8006b00:	441a      	add	r2, r3
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7fe fb6a 	bl	80051e2 <vListInsertEnd>
 8006b0e:	e005      	b.n	8006b1c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	3318      	adds	r3, #24
 8006b14:	4619      	mov	r1, r3
 8006b16:	480e      	ldr	r0, [pc, #56]	@ (8006b50 <xTaskRemoveFromEventList+0xc0>)
 8006b18:	f7fe fb63 	bl	80051e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b20:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <xTaskRemoveFromEventList+0xc4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d905      	bls.n	8006b36 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <xTaskRemoveFromEventList+0xc8>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e001      	b.n	8006b3a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b3a:	697b      	ldr	r3, [r7, #20]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20001b20 	.word	0x20001b20
 8006b48:	20001b00 	.word	0x20001b00
 8006b4c:	20001628 	.word	0x20001628
 8006b50:	20001ab8 	.word	0x20001ab8
 8006b54:	20001624 	.word	0x20001624
 8006b58:	20001b0c 	.word	0x20001b0c

08006b5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b64:	4b06      	ldr	r3, [pc, #24]	@ (8006b80 <vTaskInternalSetTimeOutState+0x24>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b6c:	4b05      	ldr	r3, [pc, #20]	@ (8006b84 <vTaskInternalSetTimeOutState+0x28>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	605a      	str	r2, [r3, #4]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20001b10 	.word	0x20001b10
 8006b84:	20001afc 	.word	0x20001afc

08006b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10d      	bne.n	8006bb4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	b672      	cpsid	i
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	b662      	cpsie	i
 8006bac:	613b      	str	r3, [r7, #16]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10d      	bne.n	8006bd6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	b672      	cpsid	i
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	b662      	cpsie	i
 8006bce:	60fb      	str	r3, [r7, #12]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006bd6:	f000 ffe9 	bl	8007bac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bda:	4b1d      	ldr	r3, [pc, #116]	@ (8006c50 <xTaskCheckForTimeOut+0xc8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d102      	bne.n	8006bfa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e023      	b.n	8006c42 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b15      	ldr	r3, [pc, #84]	@ (8006c54 <xTaskCheckForTimeOut+0xcc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d007      	beq.n	8006c16 <xTaskCheckForTimeOut+0x8e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d302      	bcc.n	8006c16 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e015      	b.n	8006c42 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d20b      	bcs.n	8006c38 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	1ad2      	subs	r2, r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ff95 	bl	8006b5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	e004      	b.n	8006c42 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c42:	f000 ffe9 	bl	8007c18 <vPortExitCritical>

	return xReturn;
 8006c46:	69fb      	ldr	r3, [r7, #28]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20001afc 	.word	0x20001afc
 8006c54:	20001b10 	.word	0x20001b10

08006c58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c5c:	4b03      	ldr	r3, [pc, #12]	@ (8006c6c <vTaskMissedYield+0x14>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
}
 8006c62:	bf00      	nop
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20001b0c 	.word	0x20001b0c

08006c70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c78:	f000 f852 	bl	8006d20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <prvIdleTask+0x28>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d9f9      	bls.n	8006c78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c84:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <prvIdleTask+0x2c>)
 8006c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c94:	e7f0      	b.n	8006c78 <prvIdleTask+0x8>
 8006c96:	bf00      	nop
 8006c98:	20001628 	.word	0x20001628
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	e00c      	b.n	8006cc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a12      	ldr	r2, [pc, #72]	@ (8006d00 <prvInitialiseTaskLists+0x60>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe fa64 	bl	8005188 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b37      	cmp	r3, #55	@ 0x37
 8006cca:	d9ef      	bls.n	8006cac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ccc:	480d      	ldr	r0, [pc, #52]	@ (8006d04 <prvInitialiseTaskLists+0x64>)
 8006cce:	f7fe fa5b 	bl	8005188 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cd2:	480d      	ldr	r0, [pc, #52]	@ (8006d08 <prvInitialiseTaskLists+0x68>)
 8006cd4:	f7fe fa58 	bl	8005188 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cd8:	480c      	ldr	r0, [pc, #48]	@ (8006d0c <prvInitialiseTaskLists+0x6c>)
 8006cda:	f7fe fa55 	bl	8005188 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cde:	480c      	ldr	r0, [pc, #48]	@ (8006d10 <prvInitialiseTaskLists+0x70>)
 8006ce0:	f7fe fa52 	bl	8005188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ce4:	480b      	ldr	r0, [pc, #44]	@ (8006d14 <prvInitialiseTaskLists+0x74>)
 8006ce6:	f7fe fa4f 	bl	8005188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cea:	4b0b      	ldr	r3, [pc, #44]	@ (8006d18 <prvInitialiseTaskLists+0x78>)
 8006cec:	4a05      	ldr	r2, [pc, #20]	@ (8006d04 <prvInitialiseTaskLists+0x64>)
 8006cee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d1c <prvInitialiseTaskLists+0x7c>)
 8006cf2:	4a05      	ldr	r2, [pc, #20]	@ (8006d08 <prvInitialiseTaskLists+0x68>)
 8006cf4:	601a      	str	r2, [r3, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20001628 	.word	0x20001628
 8006d04:	20001a88 	.word	0x20001a88
 8006d08:	20001a9c 	.word	0x20001a9c
 8006d0c:	20001ab8 	.word	0x20001ab8
 8006d10:	20001acc 	.word	0x20001acc
 8006d14:	20001ae4 	.word	0x20001ae4
 8006d18:	20001ab0 	.word	0x20001ab0
 8006d1c:	20001ab4 	.word	0x20001ab4

08006d20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d26:	e019      	b.n	8006d5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d28:	f000 ff40 	bl	8007bac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2c:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <prvCheckTasksWaitingTermination+0x50>)
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe faaf 	bl	800529c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <prvCheckTasksWaitingTermination+0x54>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	4a0b      	ldr	r2, [pc, #44]	@ (8006d74 <prvCheckTasksWaitingTermination+0x54>)
 8006d46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d48:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <prvCheckTasksWaitingTermination+0x58>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d78 <prvCheckTasksWaitingTermination+0x58>)
 8006d50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d52:	f000 ff61 	bl	8007c18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f810 	bl	8006d7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d5c:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <prvCheckTasksWaitingTermination+0x58>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e1      	bne.n	8006d28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20001acc 	.word	0x20001acc
 8006d74:	20001af8 	.word	0x20001af8
 8006d78:	20001ae0 	.word	0x20001ae0

08006d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3354      	adds	r3, #84	@ 0x54
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fa2f 	bl	80081ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d108      	bne.n	8006daa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 f901 	bl	8007fa4 <vPortFree>
				vPortFree( pxTCB );
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 f8fe 	bl	8007fa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006da8:	e01b      	b.n	8006de2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d103      	bne.n	8006dbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 f8f5 	bl	8007fa4 <vPortFree>
	}
 8006dba:	e012      	b.n	8006de2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d00d      	beq.n	8006de2 <prvDeleteTCB+0x66>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dca:	b672      	cpsid	i
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	b662      	cpsie	i
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <prvDeleteTCB+0x62>
	}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <prvResetNextTaskUnblockTime+0x38>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <prvResetNextTaskUnblockTime+0x3c>)
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e04:	e008      	b.n	8006e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e06:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <prvResetNextTaskUnblockTime+0x38>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <prvResetNextTaskUnblockTime+0x3c>)
 8006e16:	6013      	str	r3, [r2, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	20001ab0 	.word	0x20001ab0
 8006e28:	20001b18 	.word	0x20001b18

08006e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e32:	4b0b      	ldr	r3, [pc, #44]	@ (8006e60 <xTaskGetSchedulerState+0x34>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	e008      	b.n	8006e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e40:	4b08      	ldr	r3, [pc, #32]	@ (8006e64 <xTaskGetSchedulerState+0x38>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	607b      	str	r3, [r7, #4]
 8006e4c:	e001      	b.n	8006e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e52:	687b      	ldr	r3, [r7, #4]
	}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20001b04 	.word	0x20001b04
 8006e64:	20001b20 	.word	0x20001b20

08006e68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d051      	beq.n	8006f22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	4b2a      	ldr	r3, [pc, #168]	@ (8006f2c <xTaskPriorityInherit+0xc4>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d241      	bcs.n	8006f10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	db06      	blt.n	8006ea2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e94:	4b25      	ldr	r3, [pc, #148]	@ (8006f2c <xTaskPriorityInherit+0xc4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6959      	ldr	r1, [r3, #20]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f30 <xTaskPriorityInherit+0xc8>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	4299      	cmp	r1, r3
 8006eb8:	d122      	bne.n	8006f00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe f9ec 	bl	800529c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ec4:	4b19      	ldr	r3, [pc, #100]	@ (8006f2c <xTaskPriorityInherit+0xc4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed2:	4b18      	ldr	r3, [pc, #96]	@ (8006f34 <xTaskPriorityInherit+0xcc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d903      	bls.n	8006ee2 <xTaskPriorityInherit+0x7a>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	4a15      	ldr	r2, [pc, #84]	@ (8006f34 <xTaskPriorityInherit+0xcc>)
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a10      	ldr	r2, [pc, #64]	@ (8006f30 <xTaskPriorityInherit+0xc8>)
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f7fe f972 	bl	80051e2 <vListInsertEnd>
 8006efe:	e004      	b.n	8006f0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f00:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <xTaskPriorityInherit+0xc4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e008      	b.n	8006f22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <xTaskPriorityInherit+0xc4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d201      	bcs.n	8006f22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f22:	68fb      	ldr	r3, [r7, #12]
	}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20001624 	.word	0x20001624
 8006f30:	20001628 	.word	0x20001628
 8006f34:	20001b00 	.word	0x20001b00

08006f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d05c      	beq.n	8007008 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f4e:	4b31      	ldr	r3, [pc, #196]	@ (8007014 <xTaskPriorityDisinherit+0xdc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d00d      	beq.n	8006f74 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5c:	b672      	cpsid	i
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	b662      	cpsie	i
 8006f6c:	60fb      	str	r3, [r7, #12]
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10d      	bne.n	8006f98 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f80:	b672      	cpsid	i
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	b662      	cpsie	i
 8006f90:	60bb      	str	r3, [r7, #8]
}
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	e7fd      	b.n	8006f94 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9c:	1e5a      	subs	r2, r3, #1
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d02c      	beq.n	8007008 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d128      	bne.n	8007008 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe f96e 	bl	800529c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007018 <xTaskPriorityDisinherit+0xe0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d903      	bls.n	8006fe8 <xTaskPriorityDisinherit+0xb0>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8007018 <xTaskPriorityDisinherit+0xe0>)
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a09      	ldr	r2, [pc, #36]	@ (800701c <xTaskPriorityDisinherit+0xe4>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f7fe f8ef 	bl	80051e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007008:	697b      	ldr	r3, [r7, #20]
	}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20001624 	.word	0x20001624
 8007018:	20001b00 	.word	0x20001b00
 800701c:	20001628 	.word	0x20001628

08007020 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800702e:	2301      	movs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d070      	beq.n	800711a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10d      	bne.n	800705c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007044:	b672      	cpsid	i
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	b662      	cpsie	i
 8007054:	60fb      	str	r3, [r7, #12]
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	e7fd      	b.n	8007058 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d902      	bls.n	800706c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	61fb      	str	r3, [r7, #28]
 800706a:	e002      	b.n	8007072 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007070:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	429a      	cmp	r2, r3
 800707a:	d04e      	beq.n	800711a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	429a      	cmp	r2, r3
 8007084:	d149      	bne.n	800711a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007086:	4b27      	ldr	r3, [pc, #156]	@ (8007124 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	429a      	cmp	r2, r3
 800708e:	d10d      	bne.n	80070ac <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	b672      	cpsid	i
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	b662      	cpsie	i
 80070a4:	60bb      	str	r3, [r7, #8]
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	db04      	blt.n	80070ca <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	6959      	ldr	r1, [r3, #20]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a13      	ldr	r2, [pc, #76]	@ (8007128 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80070da:	4413      	add	r3, r2
 80070dc:	4299      	cmp	r1, r3
 80070de:	d11c      	bne.n	800711a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe f8d9 	bl	800529c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ee:	4b0f      	ldr	r3, [pc, #60]	@ (800712c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d903      	bls.n	80070fe <vTaskPriorityDisinheritAfterTimeout+0xde>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fa:	4a0c      	ldr	r2, [pc, #48]	@ (800712c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4a07      	ldr	r2, [pc, #28]	@ (8007128 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800710c:	441a      	add	r2, r3
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f7fe f864 	bl	80051e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800711a:	bf00      	nop
 800711c:	3720      	adds	r7, #32
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20001624 	.word	0x20001624
 8007128:	20001628 	.word	0x20001628
 800712c:	20001b00 	.word	0x20001b00

08007130 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007134:	4b07      	ldr	r3, [pc, #28]	@ (8007154 <pvTaskIncrementMutexHeldCount+0x24>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800713c:	4b05      	ldr	r3, [pc, #20]	@ (8007154 <pvTaskIncrementMutexHeldCount+0x24>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007142:	3201      	adds	r2, #1
 8007144:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007146:	4b03      	ldr	r3, [pc, #12]	@ (8007154 <pvTaskIncrementMutexHeldCount+0x24>)
 8007148:	681b      	ldr	r3, [r3, #0]
	}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	20001624 	.word	0x20001624

08007158 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007162:	4b21      	ldr	r3, [pc, #132]	@ (80071e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007168:	4b20      	ldr	r3, [pc, #128]	@ (80071ec <prvAddCurrentTaskToDelayedList+0x94>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3304      	adds	r3, #4
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe f894 	bl	800529c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717a:	d10a      	bne.n	8007192 <prvAddCurrentTaskToDelayedList+0x3a>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007182:	4b1a      	ldr	r3, [pc, #104]	@ (80071ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4819      	ldr	r0, [pc, #100]	@ (80071f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800718c:	f7fe f829 	bl	80051e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007190:	e026      	b.n	80071e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800719a:	4b14      	ldr	r3, [pc, #80]	@ (80071ec <prvAddCurrentTaskToDelayedList+0x94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d209      	bcs.n	80071be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071aa:	4b12      	ldr	r3, [pc, #72]	@ (80071f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b0f      	ldr	r3, [pc, #60]	@ (80071ec <prvAddCurrentTaskToDelayedList+0x94>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fe f837 	bl	800522a <vListInsert>
}
 80071bc:	e010      	b.n	80071e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071be:	4b0e      	ldr	r3, [pc, #56]	@ (80071f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b0a      	ldr	r3, [pc, #40]	@ (80071ec <prvAddCurrentTaskToDelayedList+0x94>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f7fe f82d 	bl	800522a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071d0:	4b0a      	ldr	r3, [pc, #40]	@ (80071fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d202      	bcs.n	80071e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071da:	4a08      	ldr	r2, [pc, #32]	@ (80071fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6013      	str	r3, [r2, #0]
}
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20001afc 	.word	0x20001afc
 80071ec:	20001624 	.word	0x20001624
 80071f0:	20001ae4 	.word	0x20001ae4
 80071f4:	20001ab4 	.word	0x20001ab4
 80071f8:	20001ab0 	.word	0x20001ab0
 80071fc:	20001b18 	.word	0x20001b18

08007200 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	@ 0x28
 8007204:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800720a:	f000 fb81 	bl	8007910 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800720e:	4b1e      	ldr	r3, [pc, #120]	@ (8007288 <xTimerCreateTimerTask+0x88>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d021      	beq.n	800725a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800721e:	1d3a      	adds	r2, r7, #4
 8007220:	f107 0108 	add.w	r1, r7, #8
 8007224:	f107 030c 	add.w	r3, r7, #12
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd ff93 	bl	8005154 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	9202      	str	r2, [sp, #8]
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	2302      	movs	r3, #2
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	2300      	movs	r3, #0
 800723e:	460a      	mov	r2, r1
 8007240:	4912      	ldr	r1, [pc, #72]	@ (800728c <xTimerCreateTimerTask+0x8c>)
 8007242:	4813      	ldr	r0, [pc, #76]	@ (8007290 <xTimerCreateTimerTask+0x90>)
 8007244:	f7fe ffb2 	bl	80061ac <xTaskCreateStatic>
 8007248:	4603      	mov	r3, r0
 800724a:	4a12      	ldr	r2, [pc, #72]	@ (8007294 <xTimerCreateTimerTask+0x94>)
 800724c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800724e:	4b11      	ldr	r3, [pc, #68]	@ (8007294 <xTimerCreateTimerTask+0x94>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007256:	2301      	movs	r3, #1
 8007258:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10d      	bne.n	800727c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	613b      	str	r3, [r7, #16]
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	e7fd      	b.n	8007278 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800727c:	697b      	ldr	r3, [r7, #20]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20001b54 	.word	0x20001b54
 800728c:	0800842c 	.word	0x0800842c
 8007290:	08007499 	.word	0x08007499
 8007294:	20001b58 	.word	0x20001b58

08007298 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80072a6:	202c      	movs	r0, #44	@ 0x2c
 80072a8:	f000 fdae 	bl	8007e08 <pvPortMalloc>
 80072ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00d      	beq.n	80072d0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f805 	bl	80072da <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80072d0:	697b      	ldr	r3, [r7, #20]
	}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b086      	sub	sp, #24
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <prvInitialiseNewTimer+0x30>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	b672      	cpsid	i
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	b662      	cpsie	i
 8007302:	617b      	str	r3, [r7, #20]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01e      	beq.n	800734e <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007310:	f000 fafe 	bl	8007910 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	6a3a      	ldr	r2, [r7, #32]
 800732a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	3304      	adds	r3, #4
 8007330:	4618      	mov	r0, r3
 8007332:	f7fd ff49 	bl	80051c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007342:	f043 0304 	orr.w	r3, r3, #4
 8007346:	b2da      	uxtb	r2, r3
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800734e:	bf00      	nop
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	@ 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <xTimerGenericCommand+0x34>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	b672      	cpsid	i
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	b662      	cpsie	i
 8007384:	623b      	str	r3, [r7, #32]
}
 8007386:	bf00      	nop
 8007388:	bf00      	nop
 800738a:	e7fd      	b.n	8007388 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800738c:	4b19      	ldr	r3, [pc, #100]	@ (80073f4 <xTimerGenericCommand+0x9c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02a      	beq.n	80073ea <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b05      	cmp	r3, #5
 80073a4:	dc18      	bgt.n	80073d8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073a6:	f7ff fd41 	bl	8006e2c <xTaskGetSchedulerState>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d109      	bne.n	80073c4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073b0:	4b10      	ldr	r3, [pc, #64]	@ (80073f4 <xTimerGenericCommand+0x9c>)
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	f107 0110 	add.w	r1, r7, #16
 80073b8:	2300      	movs	r3, #0
 80073ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073bc:	f7fe f92a 	bl	8005614 <xQueueGenericSend>
 80073c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80073c2:	e012      	b.n	80073ea <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073c4:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <xTimerGenericCommand+0x9c>)
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	f107 0110 	add.w	r1, r7, #16
 80073cc:	2300      	movs	r3, #0
 80073ce:	2200      	movs	r2, #0
 80073d0:	f7fe f920 	bl	8005614 <xQueueGenericSend>
 80073d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80073d6:	e008      	b.n	80073ea <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073d8:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <xTimerGenericCommand+0x9c>)
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	f107 0110 	add.w	r1, r7, #16
 80073e0:	2300      	movs	r3, #0
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	f7fe fa20 	bl	8005828 <xQueueGenericSendFromISR>
 80073e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3728      	adds	r7, #40	@ 0x28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20001b54 	.word	0x20001b54

080073f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007402:	4b24      	ldr	r3, [pc, #144]	@ (8007494 <prvProcessExpiredTimer+0x9c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7fd ff43 	bl	800529c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b00      	cmp	r3, #0
 8007422:	d025      	beq.n	8007470 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	18d1      	adds	r1, r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	6978      	ldr	r0, [r7, #20]
 8007432:	f000 f8d7 	bl	80075e4 <prvInsertTimerInActiveList>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d022      	beq.n	8007482 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800743c:	2300      	movs	r3, #0
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	2300      	movs	r3, #0
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	2100      	movs	r1, #0
 8007446:	6978      	ldr	r0, [r7, #20]
 8007448:	f7ff ff86 	bl	8007358 <xTimerGenericCommand>
 800744c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d116      	bne.n	8007482 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	b672      	cpsid	i
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	b662      	cpsie	i
 8007468:	60fb      	str	r3, [r7, #12]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	b2da      	uxtb	r2, r3
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	6978      	ldr	r0, [r7, #20]
 8007488:	4798      	blx	r3
}
 800748a:	bf00      	nop
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20001b4c 	.word	0x20001b4c

08007498 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074a0:	f107 0308 	add.w	r3, r7, #8
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 f859 	bl	800755c <prvGetNextExpireTime>
 80074aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4619      	mov	r1, r3
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f805 	bl	80074c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074b6:	f000 f8d7 	bl	8007668 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074ba:	bf00      	nop
 80074bc:	e7f0      	b.n	80074a0 <prvTimerTask+0x8>
	...

080074c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074ca:	f7ff f8a9 	bl	8006620 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 f866 	bl	80075a4 <prvSampleTimeNow>
 80074d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d130      	bne.n	8007542 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <prvProcessTimerOrBlockTask+0x3c>
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d806      	bhi.n	80074fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074ee:	f7ff f8a5 	bl	800663c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ff7f 	bl	80073f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074fa:	e024      	b.n	8007546 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d008      	beq.n	8007514 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007502:	4b13      	ldr	r3, [pc, #76]	@ (8007550 <prvProcessTimerOrBlockTask+0x90>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <prvProcessTimerOrBlockTask+0x50>
 800750c:	2301      	movs	r3, #1
 800750e:	e000      	b.n	8007512 <prvProcessTimerOrBlockTask+0x52>
 8007510:	2300      	movs	r3, #0
 8007512:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007514:	4b0f      	ldr	r3, [pc, #60]	@ (8007554 <prvProcessTimerOrBlockTask+0x94>)
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	4619      	mov	r1, r3
 8007522:	f7fe fe0f 	bl	8006144 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007526:	f7ff f889 	bl	800663c <xTaskResumeAll>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007530:	4b09      	ldr	r3, [pc, #36]	@ (8007558 <prvProcessTimerOrBlockTask+0x98>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
}
 8007540:	e001      	b.n	8007546 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007542:	f7ff f87b 	bl	800663c <xTaskResumeAll>
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20001b50 	.word	0x20001b50
 8007554:	20001b54 	.word	0x20001b54
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007564:	4b0e      	ldr	r3, [pc, #56]	@ (80075a0 <prvGetNextExpireTime+0x44>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <prvGetNextExpireTime+0x16>
 800756e:	2201      	movs	r2, #1
 8007570:	e000      	b.n	8007574 <prvGetNextExpireTime+0x18>
 8007572:	2200      	movs	r2, #0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d105      	bne.n	800758c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007580:	4b07      	ldr	r3, [pc, #28]	@ (80075a0 <prvGetNextExpireTime+0x44>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e001      	b.n	8007590 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20001b4c 	.word	0x20001b4c

080075a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075ac:	f7ff f8e6 	bl	800677c <xTaskGetTickCount>
 80075b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075b2:	4b0b      	ldr	r3, [pc, #44]	@ (80075e0 <prvSampleTimeNow+0x3c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d205      	bcs.n	80075c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075bc:	f000 f940 	bl	8007840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e002      	b.n	80075ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075ce:	4a04      	ldr	r2, [pc, #16]	@ (80075e0 <prvSampleTimeNow+0x3c>)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075d4:	68fb      	ldr	r3, [r7, #12]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20001b5c 	.word	0x20001b5c

080075e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	d812      	bhi.n	8007630 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	429a      	cmp	r2, r3
 8007616:	d302      	bcc.n	800761e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e01b      	b.n	8007656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800761e:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <prvInsertTimerInActiveList+0x7c>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f7fd fdfe 	bl	800522a <vListInsert>
 800762e:	e012      	b.n	8007656 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d206      	bcs.n	8007646 <prvInsertTimerInActiveList+0x62>
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d302      	bcc.n	8007646 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007640:	2301      	movs	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	e007      	b.n	8007656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007646:	4b07      	ldr	r3, [pc, #28]	@ (8007664 <prvInsertTimerInActiveList+0x80>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3304      	adds	r3, #4
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f7fd fdea 	bl	800522a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007656:	697b      	ldr	r3, [r7, #20]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20001b50 	.word	0x20001b50
 8007664:	20001b4c 	.word	0x20001b4c

08007668 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08e      	sub	sp, #56	@ 0x38
 800766c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800766e:	e0d4      	b.n	800781a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	da1b      	bge.n	80076ae <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007676:	1d3b      	adds	r3, r7, #4
 8007678:	3304      	adds	r3, #4
 800767a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800767c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007686:	b672      	cpsid	i
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	b662      	cpsie	i
 8007696:	61fb      	str	r3, [r7, #28]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800769e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a4:	6850      	ldr	r0, [r2, #4]
 80076a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076a8:	6892      	ldr	r2, [r2, #8]
 80076aa:	4611      	mov	r1, r2
 80076ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f2c0 80b2 	blt.w	800781a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d004      	beq.n	80076cc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fd fde8 	bl	800529c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076cc:	463b      	mov	r3, r7
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff ff68 	bl	80075a4 <prvSampleTimeNow>
 80076d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b09      	cmp	r3, #9
 80076da:	f200 809b 	bhi.w	8007814 <prvProcessReceivedCommands+0x1ac>
 80076de:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <prvProcessReceivedCommands+0x7c>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	08007787 	.word	0x08007787
 80076f4:	0800779b 	.word	0x0800779b
 80076f8:	080077eb 	.word	0x080077eb
 80076fc:	0800770d 	.word	0x0800770d
 8007700:	0800770d 	.word	0x0800770d
 8007704:	08007787 	.word	0x08007787
 8007708:	0800779b 	.word	0x0800779b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800770c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	b2da      	uxtb	r2, r3
 8007718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	18d1      	adds	r1, r2, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800772c:	f7ff ff5a 	bl	80075e4 <prvInsertTimerInActiveList>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d070      	beq.n	8007818 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800773c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d065      	beq.n	8007818 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	441a      	add	r2, r3
 8007754:	2300      	movs	r3, #0
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	2100      	movs	r1, #0
 800775c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800775e:	f7ff fdfb 	bl	8007358 <xTimerGenericCommand>
 8007762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d156      	bne.n	8007818 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	b672      	cpsid	i
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	b662      	cpsie	i
 800777e:	61bb      	str	r3, [r7, #24]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	b2da      	uxtb	r2, r3
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007798:	e03f      	b.n	800781a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10d      	bne.n	80077d6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	b672      	cpsid	i
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	b662      	cpsie	i
 80077ce:	617b      	str	r3, [r7, #20]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	18d1      	adds	r1, r2, r3
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077e4:	f7ff fefe 	bl	80075e4 <prvInsertTimerInActiveList>
					break;
 80077e8:	e017      	b.n	800781a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d103      	bne.n	8007800 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80077f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077fa:	f000 fbd3 	bl	8007fa4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077fe:	e00c      	b.n	800781a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007806:	f023 0301 	bic.w	r3, r3, #1
 800780a:	b2da      	uxtb	r2, r3
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007812:	e002      	b.n	800781a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <prvProcessReceivedCommands+0x1b2>
					break;
 8007818:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800781a:	4b08      	ldr	r3, [pc, #32]	@ (800783c <prvProcessReceivedCommands+0x1d4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	1d39      	adds	r1, r7, #4
 8007820:	2200      	movs	r2, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe f93c 	bl	8005aa0 <xQueueReceive>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	f47f af20 	bne.w	8007670 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3730      	adds	r7, #48	@ 0x30
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20001b54 	.word	0x20001b54

08007840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007846:	e04b      	b.n	80078e0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007848:	4b2f      	ldr	r3, [pc, #188]	@ (8007908 <prvSwitchTimerLists+0xc8>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007852:	4b2d      	ldr	r3, [pc, #180]	@ (8007908 <prvSwitchTimerLists+0xc8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3304      	adds	r3, #4
 8007860:	4618      	mov	r0, r3
 8007862:	f7fd fd1b 	bl	800529c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d031      	beq.n	80078e0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	429a      	cmp	r2, r3
 800788c:	d90e      	bls.n	80078ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800789a:	4b1b      	ldr	r3, [pc, #108]	@ (8007908 <prvSwitchTimerLists+0xc8>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3304      	adds	r3, #4
 80078a2:	4619      	mov	r1, r3
 80078a4:	4610      	mov	r0, r2
 80078a6:	f7fd fcc0 	bl	800522a <vListInsert>
 80078aa:	e019      	b.n	80078e0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078ac:	2300      	movs	r3, #0
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	2100      	movs	r1, #0
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fd4e 	bl	8007358 <xTimerGenericCommand>
 80078bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10d      	bne.n	80078e0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c8:	b672      	cpsid	i
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	b662      	cpsie	i
 80078d8:	603b      	str	r3, [r7, #0]
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	e7fd      	b.n	80078dc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078e0:	4b09      	ldr	r3, [pc, #36]	@ (8007908 <prvSwitchTimerLists+0xc8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1ae      	bne.n	8007848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078ea:	4b07      	ldr	r3, [pc, #28]	@ (8007908 <prvSwitchTimerLists+0xc8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078f0:	4b06      	ldr	r3, [pc, #24]	@ (800790c <prvSwitchTimerLists+0xcc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a04      	ldr	r2, [pc, #16]	@ (8007908 <prvSwitchTimerLists+0xc8>)
 80078f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078f8:	4a04      	ldr	r2, [pc, #16]	@ (800790c <prvSwitchTimerLists+0xcc>)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	6013      	str	r3, [r2, #0]
}
 80078fe:	bf00      	nop
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20001b4c 	.word	0x20001b4c
 800790c:	20001b50 	.word	0x20001b50

08007910 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007916:	f000 f949 	bl	8007bac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800791a:	4b15      	ldr	r3, [pc, #84]	@ (8007970 <prvCheckForValidListAndQueue+0x60>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d120      	bne.n	8007964 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007922:	4814      	ldr	r0, [pc, #80]	@ (8007974 <prvCheckForValidListAndQueue+0x64>)
 8007924:	f7fd fc30 	bl	8005188 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007928:	4813      	ldr	r0, [pc, #76]	@ (8007978 <prvCheckForValidListAndQueue+0x68>)
 800792a:	f7fd fc2d 	bl	8005188 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800792e:	4b13      	ldr	r3, [pc, #76]	@ (800797c <prvCheckForValidListAndQueue+0x6c>)
 8007930:	4a10      	ldr	r2, [pc, #64]	@ (8007974 <prvCheckForValidListAndQueue+0x64>)
 8007932:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007934:	4b12      	ldr	r3, [pc, #72]	@ (8007980 <prvCheckForValidListAndQueue+0x70>)
 8007936:	4a10      	ldr	r2, [pc, #64]	@ (8007978 <prvCheckForValidListAndQueue+0x68>)
 8007938:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800793a:	2300      	movs	r3, #0
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	4b11      	ldr	r3, [pc, #68]	@ (8007984 <prvCheckForValidListAndQueue+0x74>)
 8007940:	4a11      	ldr	r2, [pc, #68]	@ (8007988 <prvCheckForValidListAndQueue+0x78>)
 8007942:	2110      	movs	r1, #16
 8007944:	200a      	movs	r0, #10
 8007946:	f7fd fd3f 	bl	80053c8 <xQueueGenericCreateStatic>
 800794a:	4603      	mov	r3, r0
 800794c:	4a08      	ldr	r2, [pc, #32]	@ (8007970 <prvCheckForValidListAndQueue+0x60>)
 800794e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007950:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <prvCheckForValidListAndQueue+0x60>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <prvCheckForValidListAndQueue+0x60>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	490b      	ldr	r1, [pc, #44]	@ (800798c <prvCheckForValidListAndQueue+0x7c>)
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fbc6 	bl	80060f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007964:	f000 f958 	bl	8007c18 <vPortExitCritical>
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20001b54 	.word	0x20001b54
 8007974:	20001b24 	.word	0x20001b24
 8007978:	20001b38 	.word	0x20001b38
 800797c:	20001b4c 	.word	0x20001b4c
 8007980:	20001b50 	.word	0x20001b50
 8007984:	20001c00 	.word	0x20001c00
 8007988:	20001b60 	.word	0x20001b60
 800798c:	08008434 	.word	0x08008434

08007990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3b04      	subs	r3, #4
 80079a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079c0:	4a0c      	ldr	r2, [pc, #48]	@ (80079f4 <pxPortInitialiseStack+0x64>)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3b14      	subs	r3, #20
 80079ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3b04      	subs	r3, #4
 80079d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f06f 0202 	mvn.w	r2, #2
 80079de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3b20      	subs	r3, #32
 80079e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	080079f9 	.word	0x080079f9

080079f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a02:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <prvTaskExitError+0x60>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d00d      	beq.n	8007a28 <prvTaskExitError+0x30>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a10:	b672      	cpsid	i
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	b662      	cpsie	i
 8007a20:	60fb      	str	r3, [r7, #12]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <prvTaskExitError+0x2c>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	60bb      	str	r3, [r7, #8]
}
 8007a3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a40:	bf00      	nop
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0fc      	beq.n	8007a42 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000610 	.word	0x20000610
 8007a5c:	00000000 	.word	0x00000000

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	4770      	bx	lr
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst2>:
 8007a80:	20001624 	.word	0x20001624
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a88:	4808      	ldr	r0, [pc, #32]	@ (8007aac <prvPortStartFirstTask+0x24>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8814 	msr	CONTROL, r0
 8007a9a:	b662      	cpsie	i
 8007a9c:	b661      	cpsie	f
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	df00      	svc	0
 8007aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aaa:	bf00      	nop
 8007aac:	e000ed08 	.word	0xe000ed08

08007ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ab6:	4b37      	ldr	r3, [pc, #220]	@ (8007b94 <xPortStartScheduler+0xe4>)
 8007ab8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	22ff      	movs	r2, #255	@ 0xff
 8007ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	4b2f      	ldr	r3, [pc, #188]	@ (8007b98 <xPortStartScheduler+0xe8>)
 8007adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ade:	4b2f      	ldr	r3, [pc, #188]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ae4:	e009      	b.n	8007afa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4a2b      	ldr	r2, [pc, #172]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b02:	2b80      	cmp	r3, #128	@ 0x80
 8007b04:	d0ef      	beq.n	8007ae6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b06:	4b25      	ldr	r3, [pc, #148]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f1c3 0307 	rsb	r3, r3, #7
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d00d      	beq.n	8007b2e <xPortStartScheduler+0x7e>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	b672      	cpsid	i
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	b662      	cpsie	i
 8007b26:	60bb      	str	r3, [r7, #8]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	4a19      	ldr	r2, [pc, #100]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b38:	4b18      	ldr	r3, [pc, #96]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b40:	4a16      	ldr	r2, [pc, #88]	@ (8007b9c <xPortStartScheduler+0xec>)
 8007b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b4c:	4b14      	ldr	r3, [pc, #80]	@ (8007ba0 <xPortStartScheduler+0xf0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a13      	ldr	r2, [pc, #76]	@ (8007ba0 <xPortStartScheduler+0xf0>)
 8007b52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b58:	4b11      	ldr	r3, [pc, #68]	@ (8007ba0 <xPortStartScheduler+0xf0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a10      	ldr	r2, [pc, #64]	@ (8007ba0 <xPortStartScheduler+0xf0>)
 8007b5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b64:	f000 f8dc 	bl	8007d20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b68:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba4 <xPortStartScheduler+0xf4>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b6e:	f000 f8fb 	bl	8007d68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba8 <xPortStartScheduler+0xf8>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ba8 <xPortStartScheduler+0xf8>)
 8007b78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b7e:	f7ff ff83 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b82:	f7fe fec7 	bl	8006914 <vTaskSwitchContext>
	prvTaskExitError();
 8007b86:	f7ff ff37 	bl	80079f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	e000e400 	.word	0xe000e400
 8007b98:	20001c50 	.word	0x20001c50
 8007b9c:	20001c54 	.word	0x20001c54
 8007ba0:	e000ed20 	.word	0xe000ed20
 8007ba4:	20000610 	.word	0x20000610
 8007ba8:	e000ef34 	.word	0xe000ef34

08007bac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	b672      	cpsid	i
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	b662      	cpsie	i
 8007bc6:	607b      	str	r3, [r7, #4]
}
 8007bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bca:	4b11      	ldr	r3, [pc, #68]	@ (8007c10 <vPortEnterCritical+0x64>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8007c10 <vPortEnterCritical+0x64>)
 8007bd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c10 <vPortEnterCritical+0x64>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d112      	bne.n	8007c02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <vPortEnterCritical+0x68>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00d      	beq.n	8007c02 <vPortEnterCritical+0x56>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	b672      	cpsid	i
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	b662      	cpsie	i
 8007bfa:	603b      	str	r3, [r7, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <vPortEnterCritical+0x52>
	}
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000610 	.word	0x20000610
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c1e:	4b13      	ldr	r3, [pc, #76]	@ (8007c6c <vPortExitCritical+0x54>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <vPortExitCritical+0x2a>
	__asm volatile
 8007c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2a:	b672      	cpsid	i
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	b662      	cpsie	i
 8007c3a:	607b      	str	r3, [r7, #4]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007c42:	4b0a      	ldr	r3, [pc, #40]	@ (8007c6c <vPortExitCritical+0x54>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	4a08      	ldr	r2, [pc, #32]	@ (8007c6c <vPortExitCritical+0x54>)
 8007c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c4c:	4b07      	ldr	r3, [pc, #28]	@ (8007c6c <vPortExitCritical+0x54>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <vPortExitCritical+0x48>
 8007c54:	2300      	movs	r3, #0
 8007c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	f383 8811 	msr	BASEPRI, r3
}
 8007c5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	20000610 	.word	0x20000610

08007c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c70:	f3ef 8009 	mrs	r0, PSP
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4b15      	ldr	r3, [pc, #84]	@ (8007cd0 <pxCurrentTCBConst>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f01e 0f10 	tst.w	lr, #16
 8007c80:	bf08      	it	eq
 8007c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	6010      	str	r0, [r2, #0]
 8007c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f380 8811 	msr	BASEPRI, r0
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	f7fe fe36 	bl	8006914 <vTaskSwitchContext>
 8007ca8:	f04f 0000 	mov.w	r0, #0
 8007cac:	f380 8811 	msr	BASEPRI, r0
 8007cb0:	bc09      	pop	{r0, r3}
 8007cb2:	6819      	ldr	r1, [r3, #0]
 8007cb4:	6808      	ldr	r0, [r1, #0]
 8007cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	f01e 0f10 	tst.w	lr, #16
 8007cbe:	bf08      	it	eq
 8007cc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cc4:	f380 8809 	msr	PSP, r0
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop

08007cd0 <pxCurrentTCBConst>:
 8007cd0:	20001624 	.word	0x20001624
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop

08007cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	b672      	cpsid	i
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	b662      	cpsie	i
 8007cf2:	607b      	str	r3, [r7, #4]
}
 8007cf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cf6:	f7fe fd51 	bl	800679c <xTaskIncrementTick>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d00:	4b06      	ldr	r3, [pc, #24]	@ (8007d1c <SysTick_Handler+0x44>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	f383 8811 	msr	BASEPRI, r3
}
 8007d12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	e000ed04 	.word	0xe000ed04

08007d20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d24:	4b0b      	ldr	r3, [pc, #44]	@ (8007d54 <vPortSetupTimerInterrupt+0x34>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d58 <vPortSetupTimerInterrupt+0x38>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <vPortSetupTimerInterrupt+0x3c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a0a      	ldr	r2, [pc, #40]	@ (8007d60 <vPortSetupTimerInterrupt+0x40>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	099b      	lsrs	r3, r3, #6
 8007d3c:	4a09      	ldr	r2, [pc, #36]	@ (8007d64 <vPortSetupTimerInterrupt+0x44>)
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d42:	4b04      	ldr	r3, [pc, #16]	@ (8007d54 <vPortSetupTimerInterrupt+0x34>)
 8007d44:	2207      	movs	r2, #7
 8007d46:	601a      	str	r2, [r3, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	e000e010 	.word	0xe000e010
 8007d58:	e000e018 	.word	0xe000e018
 8007d5c:	20000604 	.word	0x20000604
 8007d60:	10624dd3 	.word	0x10624dd3
 8007d64:	e000e014 	.word	0xe000e014

08007d68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d78 <vPortEnableVFP+0x10>
 8007d6c:	6801      	ldr	r1, [r0, #0]
 8007d6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d72:	6001      	str	r1, [r0, #0]
 8007d74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d76:	bf00      	nop
 8007d78:	e000ed88 	.word	0xe000ed88

08007d7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d82:	f3ef 8305 	mrs	r3, IPSR
 8007d86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	d917      	bls.n	8007dbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007df8 <vPortValidateInterruptPriority+0x7c>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d98:	4b18      	ldr	r3, [pc, #96]	@ (8007dfc <vPortValidateInterruptPriority+0x80>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	7afa      	ldrb	r2, [r7, #11]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d20d      	bcs.n	8007dbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da6:	b672      	cpsid	i
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	b662      	cpsie	i
 8007db6:	607b      	str	r3, [r7, #4]
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dbe:	4b10      	ldr	r3, [pc, #64]	@ (8007e00 <vPortValidateInterruptPriority+0x84>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e04 <vPortValidateInterruptPriority+0x88>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d90d      	bls.n	8007dea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	b672      	cpsid	i
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	b662      	cpsie	i
 8007de2:	603b      	str	r3, [r7, #0]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <vPortValidateInterruptPriority+0x6a>
	}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	e000e3f0 	.word	0xe000e3f0
 8007dfc:	20001c50 	.word	0x20001c50
 8007e00:	e000ed0c 	.word	0xe000ed0c
 8007e04:	20001c54 	.word	0x20001c54

08007e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	@ 0x28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e14:	f7fe fc04 	bl	8006620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e18:	4b5d      	ldr	r3, [pc, #372]	@ (8007f90 <pvPortMalloc+0x188>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e20:	f000 f920 	bl	8008064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e24:	4b5b      	ldr	r3, [pc, #364]	@ (8007f94 <pvPortMalloc+0x18c>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 8094 	bne.w	8007f5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d020      	beq.n	8007e7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007e38:	2208      	movs	r2, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d017      	beq.n	8007e7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f023 0307 	bic.w	r3, r3, #7
 8007e50:	3308      	adds	r3, #8
 8007e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <pvPortMalloc+0x72>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	b672      	cpsid	i
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	b662      	cpsie	i
 8007e72:	617b      	str	r3, [r7, #20]
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	e7fd      	b.n	8007e76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d06c      	beq.n	8007f5a <pvPortMalloc+0x152>
 8007e80:	4b45      	ldr	r3, [pc, #276]	@ (8007f98 <pvPortMalloc+0x190>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d867      	bhi.n	8007f5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e8a:	4b44      	ldr	r3, [pc, #272]	@ (8007f9c <pvPortMalloc+0x194>)
 8007e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e8e:	4b43      	ldr	r3, [pc, #268]	@ (8007f9c <pvPortMalloc+0x194>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e94:	e004      	b.n	8007ea0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d903      	bls.n	8007eb2 <pvPortMalloc+0xaa>
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f1      	bne.n	8007e96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007eb2:	4b37      	ldr	r3, [pc, #220]	@ (8007f90 <pvPortMalloc+0x188>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d04e      	beq.n	8007f5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	4413      	add	r3, r2
 8007ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	1ad2      	subs	r2, r2, r3
 8007ed6:	2308      	movs	r3, #8
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d922      	bls.n	8007f24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00d      	beq.n	8007f0c <pvPortMalloc+0x104>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef4:	b672      	cpsid	i
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	b662      	cpsie	i
 8007f04:	613b      	str	r3, [r7, #16]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f1e:	69b8      	ldr	r0, [r7, #24]
 8007f20:	f000 f902 	bl	8008128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f24:	4b1c      	ldr	r3, [pc, #112]	@ (8007f98 <pvPortMalloc+0x190>)
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007f98 <pvPortMalloc+0x190>)
 8007f30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f32:	4b19      	ldr	r3, [pc, #100]	@ (8007f98 <pvPortMalloc+0x190>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <pvPortMalloc+0x198>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d203      	bcs.n	8007f46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f3e:	4b16      	ldr	r3, [pc, #88]	@ (8007f98 <pvPortMalloc+0x190>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a17      	ldr	r2, [pc, #92]	@ (8007fa0 <pvPortMalloc+0x198>)
 8007f44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	4b12      	ldr	r3, [pc, #72]	@ (8007f94 <pvPortMalloc+0x18c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f5a:	f7fe fb6f 	bl	800663c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f003 0307 	and.w	r3, r3, #7
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00d      	beq.n	8007f84 <pvPortMalloc+0x17c>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6c:	b672      	cpsid	i
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	b662      	cpsie	i
 8007f7c:	60fb      	str	r3, [r7, #12]
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	e7fd      	b.n	8007f80 <pvPortMalloc+0x178>
	return pvReturn;
 8007f84:	69fb      	ldr	r3, [r7, #28]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3728      	adds	r7, #40	@ 0x28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20005860 	.word	0x20005860
 8007f94:	2000586c 	.word	0x2000586c
 8007f98:	20005864 	.word	0x20005864
 8007f9c:	20005858 	.word	0x20005858
 8007fa0:	20005868 	.word	0x20005868

08007fa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d04e      	beq.n	8008054 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fb6:	2308      	movs	r3, #8
 8007fb8:	425b      	negs	r3, r3
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	4b24      	ldr	r3, [pc, #144]	@ (800805c <vPortFree+0xb8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10d      	bne.n	8007fee <vPortFree+0x4a>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	b672      	cpsid	i
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	b662      	cpsie	i
 8007fe6:	60fb      	str	r3, [r7, #12]
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	e7fd      	b.n	8007fea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00d      	beq.n	8008012 <vPortFree+0x6e>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffa:	b672      	cpsid	i
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	b662      	cpsie	i
 800800a:	60bb      	str	r3, [r7, #8]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	4b11      	ldr	r3, [pc, #68]	@ (800805c <vPortFree+0xb8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4013      	ands	r3, r2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d019      	beq.n	8008054 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d115      	bne.n	8008054 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	4b0b      	ldr	r3, [pc, #44]	@ (800805c <vPortFree+0xb8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	43db      	mvns	r3, r3
 8008032:	401a      	ands	r2, r3
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008038:	f7fe faf2 	bl	8006620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	4b07      	ldr	r3, [pc, #28]	@ (8008060 <vPortFree+0xbc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4413      	add	r3, r2
 8008046:	4a06      	ldr	r2, [pc, #24]	@ (8008060 <vPortFree+0xbc>)
 8008048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800804a:	6938      	ldr	r0, [r7, #16]
 800804c:	f000 f86c 	bl	8008128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008050:	f7fe faf4 	bl	800663c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008054:	bf00      	nop
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	2000586c 	.word	0x2000586c
 8008060:	20005864 	.word	0x20005864

08008064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800806a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800806e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008070:	4b27      	ldr	r3, [pc, #156]	@ (8008110 <prvHeapInit+0xac>)
 8008072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00c      	beq.n	8008098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3307      	adds	r3, #7
 8008082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0307 	bic.w	r3, r3, #7
 800808a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	4a1f      	ldr	r2, [pc, #124]	@ (8008110 <prvHeapInit+0xac>)
 8008094:	4413      	add	r3, r2
 8008096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800809c:	4a1d      	ldr	r2, [pc, #116]	@ (8008114 <prvHeapInit+0xb0>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008114 <prvHeapInit+0xb0>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4413      	add	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080b0:	2208      	movs	r2, #8
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0307 	bic.w	r3, r3, #7
 80080be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <prvHeapInit+0xb4>)
 80080c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080c6:	4b14      	ldr	r3, [pc, #80]	@ (8008118 <prvHeapInit+0xb4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080ce:	4b12      	ldr	r3, [pc, #72]	@ (8008118 <prvHeapInit+0xb4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	1ad2      	subs	r2, r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <prvHeapInit+0xb4>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	4a0a      	ldr	r2, [pc, #40]	@ (800811c <prvHeapInit+0xb8>)
 80080f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a09      	ldr	r2, [pc, #36]	@ (8008120 <prvHeapInit+0xbc>)
 80080fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080fc:	4b09      	ldr	r3, [pc, #36]	@ (8008124 <prvHeapInit+0xc0>)
 80080fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008102:	601a      	str	r2, [r3, #0]
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	20001c58 	.word	0x20001c58
 8008114:	20005858 	.word	0x20005858
 8008118:	20005860 	.word	0x20005860
 800811c:	20005868 	.word	0x20005868
 8008120:	20005864 	.word	0x20005864
 8008124:	2000586c 	.word	0x2000586c

08008128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008130:	4b28      	ldr	r3, [pc, #160]	@ (80081d4 <prvInsertBlockIntoFreeList+0xac>)
 8008132:	60fb      	str	r3, [r7, #12]
 8008134:	e002      	b.n	800813c <prvInsertBlockIntoFreeList+0x14>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	429a      	cmp	r2, r3
 8008144:	d8f7      	bhi.n	8008136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	4413      	add	r3, r2
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d108      	bne.n	800816a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	441a      	add	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	441a      	add	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d118      	bne.n	80081b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b15      	ldr	r3, [pc, #84]	@ (80081d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d00d      	beq.n	80081a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	441a      	add	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	e008      	b.n	80081b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081a6:	4b0c      	ldr	r3, [pc, #48]	@ (80081d8 <prvInsertBlockIntoFreeList+0xb0>)
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e003      	b.n	80081b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d002      	beq.n	80081c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20005858 	.word	0x20005858
 80081d8:	20005860 	.word	0x20005860

080081dc <memset>:
 80081dc:	4402      	add	r2, r0
 80081de:	4603      	mov	r3, r0
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d100      	bne.n	80081e6 <memset+0xa>
 80081e4:	4770      	bx	lr
 80081e6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ea:	e7f9      	b.n	80081e0 <memset+0x4>

080081ec <_reclaim_reent>:
 80081ec:	4b29      	ldr	r3, [pc, #164]	@ (8008294 <_reclaim_reent+0xa8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4283      	cmp	r3, r0
 80081f2:	b570      	push	{r4, r5, r6, lr}
 80081f4:	4604      	mov	r4, r0
 80081f6:	d04b      	beq.n	8008290 <_reclaim_reent+0xa4>
 80081f8:	69c3      	ldr	r3, [r0, #28]
 80081fa:	b1ab      	cbz	r3, 8008228 <_reclaim_reent+0x3c>
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	b16b      	cbz	r3, 800821c <_reclaim_reent+0x30>
 8008200:	2500      	movs	r5, #0
 8008202:	69e3      	ldr	r3, [r4, #28]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	5959      	ldr	r1, [r3, r5]
 8008208:	2900      	cmp	r1, #0
 800820a:	d13b      	bne.n	8008284 <_reclaim_reent+0x98>
 800820c:	3504      	adds	r5, #4
 800820e:	2d80      	cmp	r5, #128	@ 0x80
 8008210:	d1f7      	bne.n	8008202 <_reclaim_reent+0x16>
 8008212:	69e3      	ldr	r3, [r4, #28]
 8008214:	4620      	mov	r0, r4
 8008216:	68d9      	ldr	r1, [r3, #12]
 8008218:	f000 f872 	bl	8008300 <_free_r>
 800821c:	69e3      	ldr	r3, [r4, #28]
 800821e:	6819      	ldr	r1, [r3, #0]
 8008220:	b111      	cbz	r1, 8008228 <_reclaim_reent+0x3c>
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f86c 	bl	8008300 <_free_r>
 8008228:	6961      	ldr	r1, [r4, #20]
 800822a:	b111      	cbz	r1, 8008232 <_reclaim_reent+0x46>
 800822c:	4620      	mov	r0, r4
 800822e:	f000 f867 	bl	8008300 <_free_r>
 8008232:	69e1      	ldr	r1, [r4, #28]
 8008234:	b111      	cbz	r1, 800823c <_reclaim_reent+0x50>
 8008236:	4620      	mov	r0, r4
 8008238:	f000 f862 	bl	8008300 <_free_r>
 800823c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800823e:	b111      	cbz	r1, 8008246 <_reclaim_reent+0x5a>
 8008240:	4620      	mov	r0, r4
 8008242:	f000 f85d 	bl	8008300 <_free_r>
 8008246:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008248:	b111      	cbz	r1, 8008250 <_reclaim_reent+0x64>
 800824a:	4620      	mov	r0, r4
 800824c:	f000 f858 	bl	8008300 <_free_r>
 8008250:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008252:	b111      	cbz	r1, 800825a <_reclaim_reent+0x6e>
 8008254:	4620      	mov	r0, r4
 8008256:	f000 f853 	bl	8008300 <_free_r>
 800825a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800825c:	b111      	cbz	r1, 8008264 <_reclaim_reent+0x78>
 800825e:	4620      	mov	r0, r4
 8008260:	f000 f84e 	bl	8008300 <_free_r>
 8008264:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008266:	b111      	cbz	r1, 800826e <_reclaim_reent+0x82>
 8008268:	4620      	mov	r0, r4
 800826a:	f000 f849 	bl	8008300 <_free_r>
 800826e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008270:	b111      	cbz	r1, 8008278 <_reclaim_reent+0x8c>
 8008272:	4620      	mov	r0, r4
 8008274:	f000 f844 	bl	8008300 <_free_r>
 8008278:	6a23      	ldr	r3, [r4, #32]
 800827a:	b14b      	cbz	r3, 8008290 <_reclaim_reent+0xa4>
 800827c:	4620      	mov	r0, r4
 800827e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008282:	4718      	bx	r3
 8008284:	680e      	ldr	r6, [r1, #0]
 8008286:	4620      	mov	r0, r4
 8008288:	f000 f83a 	bl	8008300 <_free_r>
 800828c:	4631      	mov	r1, r6
 800828e:	e7bb      	b.n	8008208 <_reclaim_reent+0x1c>
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	bf00      	nop
 8008294:	20000614 	.word	0x20000614

08008298 <__libc_init_array>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4d0d      	ldr	r5, [pc, #52]	@ (80082d0 <__libc_init_array+0x38>)
 800829c:	4c0d      	ldr	r4, [pc, #52]	@ (80082d4 <__libc_init_array+0x3c>)
 800829e:	1b64      	subs	r4, r4, r5
 80082a0:	10a4      	asrs	r4, r4, #2
 80082a2:	2600      	movs	r6, #0
 80082a4:	42a6      	cmp	r6, r4
 80082a6:	d109      	bne.n	80082bc <__libc_init_array+0x24>
 80082a8:	4d0b      	ldr	r5, [pc, #44]	@ (80082d8 <__libc_init_array+0x40>)
 80082aa:	4c0c      	ldr	r4, [pc, #48]	@ (80082dc <__libc_init_array+0x44>)
 80082ac:	f000 f87e 	bl	80083ac <_init>
 80082b0:	1b64      	subs	r4, r4, r5
 80082b2:	10a4      	asrs	r4, r4, #2
 80082b4:	2600      	movs	r6, #0
 80082b6:	42a6      	cmp	r6, r4
 80082b8:	d105      	bne.n	80082c6 <__libc_init_array+0x2e>
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
 80082bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c0:	4798      	blx	r3
 80082c2:	3601      	adds	r6, #1
 80082c4:	e7ee      	b.n	80082a4 <__libc_init_array+0xc>
 80082c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ca:	4798      	blx	r3
 80082cc:	3601      	adds	r6, #1
 80082ce:	e7f2      	b.n	80082b6 <__libc_init_array+0x1e>
 80082d0:	0800845c 	.word	0x0800845c
 80082d4:	0800845c 	.word	0x0800845c
 80082d8:	0800845c 	.word	0x0800845c
 80082dc:	08008460 	.word	0x08008460

080082e0 <__retarget_lock_acquire_recursive>:
 80082e0:	4770      	bx	lr

080082e2 <__retarget_lock_release_recursive>:
 80082e2:	4770      	bx	lr

080082e4 <memcpy>:
 80082e4:	440a      	add	r2, r1
 80082e6:	4291      	cmp	r1, r2
 80082e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ec:	d100      	bne.n	80082f0 <memcpy+0xc>
 80082ee:	4770      	bx	lr
 80082f0:	b510      	push	{r4, lr}
 80082f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082fa:	4291      	cmp	r1, r2
 80082fc:	d1f9      	bne.n	80082f2 <memcpy+0xe>
 80082fe:	bd10      	pop	{r4, pc}

08008300 <_free_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4605      	mov	r5, r0
 8008304:	2900      	cmp	r1, #0
 8008306:	d041      	beq.n	800838c <_free_r+0x8c>
 8008308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800830c:	1f0c      	subs	r4, r1, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfb8      	it	lt
 8008312:	18e4      	addlt	r4, r4, r3
 8008314:	f000 f83e 	bl	8008394 <__malloc_lock>
 8008318:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <_free_r+0x90>)
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x2c>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	4628      	mov	r0, r5
 8008324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008328:	f000 b83a 	b.w	80083a0 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x42>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	1821      	adds	r1, r4, r0
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1809      	addeq	r1, r1, r0
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x1e>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x4c>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x42>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1850      	adds	r0, r2, r1
 8008350:	42a0      	cmp	r0, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x6c>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	4401      	add	r1, r0
 8008358:	1850      	adds	r0, r2, r1
 800835a:	4283      	cmp	r3, r0
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x22>
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	6053      	str	r3, [r2, #4]
 8008366:	4408      	add	r0, r1
 8008368:	6010      	str	r0, [r2, #0]
 800836a:	e7da      	b.n	8008322 <_free_r+0x22>
 800836c:	d902      	bls.n	8008374 <_free_r+0x74>
 800836e:	230c      	movs	r3, #12
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x22>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	1821      	adds	r1, r4, r0
 8008378:	428b      	cmp	r3, r1
 800837a:	bf04      	itt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	bf04      	itt	eq
 8008384:	1809      	addeq	r1, r1, r0
 8008386:	6021      	streq	r1, [r4, #0]
 8008388:	6054      	str	r4, [r2, #4]
 800838a:	e7ca      	b.n	8008322 <_free_r+0x22>
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	200059ac 	.word	0x200059ac

08008394 <__malloc_lock>:
 8008394:	4801      	ldr	r0, [pc, #4]	@ (800839c <__malloc_lock+0x8>)
 8008396:	f7ff bfa3 	b.w	80082e0 <__retarget_lock_acquire_recursive>
 800839a:	bf00      	nop
 800839c:	200059a8 	.word	0x200059a8

080083a0 <__malloc_unlock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	@ (80083a8 <__malloc_unlock+0x8>)
 80083a2:	f7ff bf9e 	b.w	80082e2 <__retarget_lock_release_recursive>
 80083a6:	bf00      	nop
 80083a8:	200059a8 	.word	0x200059a8

080083ac <_init>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	bf00      	nop
 80083b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b2:	bc08      	pop	{r3}
 80083b4:	469e      	mov	lr, r3
 80083b6:	4770      	bx	lr

080083b8 <_fini>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr
